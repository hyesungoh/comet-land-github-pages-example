(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("react"), require("react-dom"));
	else if(typeof define === 'function' && define.amd)
		define(["react", "react-dom"], factory);
	else if(typeof exports === 'object')
		exports["NextUI"] = factory(require("react"), require("react-dom"));
	else
		root["NextUI"] = factory(root["React"], root["ReactDOM"]);
})(self, function(__WEBPACK_EXTERNAL_MODULE__787__, __WEBPACK_EXTERNAL_MODULE__156__) {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 753:
/***/ ((module) => {

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/***/ }),

/***/ 334:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/** @license React v17.0.2
 * react-jsx-dev-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


__webpack_require__(753);

__webpack_require__(787);

exports.Fragment = 60107;

if ("function" === typeof Symbol && Symbol.for) {
  var a = Symbol.for;
  exports.Fragment = a("react.fragment");
}

exports.jsxDEV = void 0;

/***/ }),

/***/ 194:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (true) {
  module.exports = __webpack_require__(334);
} else {}

/***/ }),

/***/ 787:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__787__;

/***/ }),

/***/ 156:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_MODULE__156__;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Avatar": () => (/* reexport */ src_avatar),
  "Backdrop": () => (/* reexport */ src_backdrop),
  "Button": () => (/* reexport */ src_button),
  "Card": () => (/* reexport */ src_card),
  "Checkbox": () => (/* reexport */ src_checkbox),
  "Code": () => (/* reexport */ src_code),
  "Col": () => (/* reexport */ src_col),
  "Collapse": () => (/* reexport */ src_collapse),
  "Container": () => (/* reexport */ src_container),
  "CssBaseline": () => (/* reexport */ css_baseline),
  "Divider": () => (/* reexport */ src_divider),
  "Grid": () => (/* reexport */ src_grid),
  "Image": () => (/* reexport */ src_image),
  "Input": () => (/* reexport */ src_input),
  "KeyCode": () => (/* reexport */ KeyCode),
  "KeyMod": () => (/* reexport */ KeyMod),
  "Link": () => (/* reexport */ src_link),
  "Loading": () => (/* reexport */ src_loading),
  "Modal": () => (/* reexport */ src_modal),
  "NextUIProvider": () => (/* reexport */ theme_provider),
  "Pagination": () => (/* reexport */ src_pagination),
  "Progress": () => (/* reexport */ src_progress),
  "Radio": () => (/* reexport */ src_radio),
  "Row": () => (/* reexport */ src_row),
  "Snippet": () => (/* reexport */ src_snippet),
  "Spacer": () => (/* reexport */ src_spacer),
  "Spinner": () => (/* reexport */ loading_spinner),
  "StyledAvatar": () => (/* reexport */ StyledAvatar),
  "StyledAvatarGroup": () => (/* reexport */ StyledAvatarGroup),
  "StyledAvatarGroupCount": () => (/* reexport */ StyledAvatarGroupCount),
  "StyledBackdrop": () => (/* reexport */ StyledBackdrop),
  "StyledBackdropContent": () => (/* reexport */ StyledBackdropContent),
  "StyledBackdropLayer": () => (/* reexport */ StyledBackdropLayer),
  "StyledButton": () => (/* reexport */ StyledButton),
  "StyledButtonGroup": () => (/* reexport */ StyledButtonGroup),
  "StyledButtonIcon": () => (/* reexport */ StyledButtonIcon),
  "StyledCard": () => (/* reexport */ StyledCard),
  "StyledCardBody": () => (/* reexport */ StyledCardBody),
  "StyledCardFooter": () => (/* reexport */ StyledCardFooter),
  "StyledCardHeader": () => (/* reexport */ StyledCardHeader),
  "StyledCheckboxContainer": () => (/* reexport */ StyledCheckboxContainer),
  "StyledCheckboxGroup": () => (/* reexport */ StyledCheckboxGroup),
  "StyledCheckboxInput": () => (/* reexport */ StyledCheckboxInput),
  "StyledCheckboxLabel": () => (/* reexport */ StyledCheckboxLabel),
  "StyledCheckboxMask": () => (/* reexport */ StyledCheckboxMask),
  "StyledCheckboxText": () => (/* reexport */ StyledCheckboxText),
  "StyledCode": () => (/* reexport */ StyledCode),
  "StyledCol": () => (/* reexport */ StyledCol),
  "StyledCollapse": () => (/* reexport */ StyledCollapse),
  "StyledCollapseContent": () => (/* reexport */ StyledCollapseContent),
  "StyledCollapseGroup": () => (/* reexport */ StyledCollapseGroup),
  "StyledCollapseIcon": () => (/* reexport */ StyledCollapseIcon),
  "StyledCollapseView": () => (/* reexport */ StyledCollapseView),
  "StyledContainer": () => (/* reexport */ StyledContainer),
  "StyledDivider": () => (/* reexport */ StyledDivider),
  "StyledDividerText": () => (/* reexport */ StyledDividerText),
  "StyledGridContainer": () => (/* reexport */ StyledGridContainer),
  "StyledGridItem": () => (/* reexport */ StyledGridItem),
  "StyledHelperText": () => (/* reexport */ StyledHelperText),
  "StyledHelperTextContainer": () => (/* reexport */ StyledHelperTextContainer),
  "StyledIconCheck": () => (/* reexport */ StyledIconCheck),
  "StyledIconCheckFirstLine": () => (/* reexport */ StyledIconCheckFirstLine),
  "StyledIconCheckSecondLine": () => (/* reexport */ StyledIconCheckSecondLine),
  "StyledImage": () => (/* reexport */ StyledImage),
  "StyledImageContainer": () => (/* reexport */ StyledImageContainer),
  "StyledImageSkeleton": () => (/* reexport */ StyledImageSkeleton),
  "StyledInput": () => (/* reexport */ StyledInput),
  "StyledInputBlockLabel": () => (/* reexport */ StyledInputBlockLabel),
  "StyledInputClearButton": () => (/* reexport */ StyledInputClearButton),
  "StyledInputContainer": () => (/* reexport */ StyledInputContainer),
  "StyledInputContent": () => (/* reexport */ StyledInputContent),
  "StyledInputLabel": () => (/* reexport */ StyledInputLabel),
  "StyledInputMainContainer": () => (/* reexport */ StyledInputMainContainer),
  "StyledInputPlaceholder": () => (/* reexport */ StyledInputPlaceholder),
  "StyledInputWrapper": () => (/* reexport */ StyledInputWrapper),
  "StyledLink": () => (/* reexport */ StyledLink),
  "StyledLinkIcon": () => (/* reexport */ StyledLinkIcon),
  "StyledLoading": () => (/* reexport */ StyledLoading),
  "StyledLoadingContainer": () => (/* reexport */ StyledLoadingContainer),
  "StyledLoadingLabel": () => (/* reexport */ StyledLoadingLabel),
  "StyledModal": () => (/* reexport */ StyledModal),
  "StyledModalBody": () => (/* reexport */ StyledModalBody),
  "StyledModalCloseButton": () => (/* reexport */ StyledModalCloseButton),
  "StyledModalFooter": () => (/* reexport */ StyledModalFooter),
  "StyledModalHeader": () => (/* reexport */ StyledModalHeader),
  "StyledModalHideTab": () => (/* reexport */ StyledModalHideTab),
  "StyledPagination": () => (/* reexport */ StyledPagination),
  "StyledPaginationEllipsis": () => (/* reexport */ StyledPaginationEllipsis),
  "StyledPaginationHighlight": () => (/* reexport */ StyledPaginationHighlight),
  "StyledPaginationIcon": () => (/* reexport */ StyledPaginationIcon),
  "StyledPaginationItem": () => (/* reexport */ StyledPaginationItem),
  "StyledPaginationItemContent": () => (/* reexport */ StyledPaginationItemContent),
  "StyledPre": () => (/* reexport */ StyledPre),
  "StyledProgress": () => (/* reexport */ StyledProgress),
  "StyledProgressBar": () => (/* reexport */ StyledProgressBar),
  "StyledRadio": () => (/* reexport */ StyledRadio),
  "StyledRadioDescription": () => (/* reexport */ StyledRadioDescription),
  "StyledRadioGroup": () => (/* reexport */ StyledRadioGroup),
  "StyledRadioInput": () => (/* reexport */ StyledRadioInput),
  "StyledRadioLabel": () => (/* reexport */ StyledRadioLabel),
  "StyledRadioPoint": () => (/* reexport */ StyledRadioPoint),
  "StyledRow": () => (/* reexport */ StyledRow),
  "StyledSnippetCopyButton": () => (/* reexport */ StyledSnippetCopyButton),
  "StyledSnippetCopyButtonIcon": () => (/* reexport */ StyledSnippetCopyButtonIcon),
  "StyledSnippetPre": () => (/* reexport */ StyledSnippetPre),
  "StyledSpacer": () => (/* reexport */ StyledSpacer),
  "StyledSpinner": () => (/* reexport */ StyledSpinner),
  "StyledSpinnerContainer": () => (/* reexport */ StyledSpinnerContainer),
  "StyledSpinnerSpan": () => (/* reexport */ StyledSpinnerSpan),
  "StyledSwitch": () => (/* reexport */ StyledSwitch),
  "StyledSwitchCircle": () => (/* reexport */ StyledSwitchCircle),
  "StyledSwitchContainer": () => (/* reexport */ StyledSwitchContainer),
  "StyledSwitchInput": () => (/* reexport */ StyledSwitchInput),
  "StyledTable": () => (/* reexport */ StyledTable),
  "StyledTableCell": () => (/* reexport */ StyledTableCell),
  "StyledTableHeaderCell": () => (/* reexport */ StyledTableHeaderCell),
  "StyledTableRow": () => (/* reexport */ StyledTableRow),
  "StyledText": () => (/* reexport */ StyledText),
  "StyledTooltip": () => (/* reexport */ StyledTooltip),
  "StyledTooltipArrow": () => (/* reexport */ StyledTooltipArrow),
  "StyledTooltipContent": () => (/* reexport */ StyledTooltipContent),
  "StyledTooltipTrigger": () => (/* reexport */ StyledTooltipTrigger),
  "StyledUser": () => (/* reexport */ StyledUser),
  "StyledUserDesc": () => (/* reexport */ StyledUserDesc),
  "StyledUserInfo": () => (/* reexport */ StyledUserInfo),
  "StyledUserLink": () => (/* reexport */ StyledUserLink),
  "StyledUserName": () => (/* reexport */ StyledUserName),
  "Switch": () => (/* reexport */ src_switch),
  "Table": () => (/* reexport */ src_table),
  "Text": () => (/* reexport */ src_text),
  "Textarea": () => (/* reexport */ src_textarea),
  "Tooltip": () => (/* reexport */ src_tooltip),
  "User": () => (/* reexport */ src_user),
  "changeTheme": () => (/* reexport */ changeTheme),
  "config": () => (/* reexport */ config),
  "createTheme": () => (/* reexport */ createTheme),
  "css": () => (/* reexport */ css),
  "defaultTheme": () => (/* reexport */ theme),
  "excludedInputPropsForTextarea": () => (/* reexport */ excludedInputPropsForTextarea),
  "excludedTableProps": () => (/* reexport */ excludedTableProps),
  "extendedColors": () => (/* reexport */ extendedColors),
  "extendedColorsNoGradient": () => (/* reexport */ extendedColorsNoGradient),
  "extraColors": () => (/* reexport */ extraColors),
  "getCssText": () => (/* reexport */ getCssText),
  "getDocumentTheme": () => (/* reexport */ getDocumentTheme),
  "getTokenValue": () => (/* reexport */ getTokenValue),
  "globalCss": () => (/* reexport */ globalCss),
  "keyframes": () => (/* reexport */ keyframes),
  "normalColors": () => (/* reexport */ normalColors),
  "normalLoaders": () => (/* reexport */ normalLoaders),
  "normalWeights": () => (/* reexport */ normalWeights),
  "sharedFocus": () => (/* reexport */ sharedFocus),
  "sharedVisuallyHidden": () => (/* reexport */ sharedVisuallyHidden),
  "simpleColors": () => (/* reexport */ simpleColors),
  "stitchesConfig": () => (/* reexport */ config),
  "styled": () => (/* reexport */ styled),
  "textTransforms": () => (/* reexport */ textTransforms),
  "textWeights": () => (/* reexport */ textWeights),
  "theme": () => (/* reexport */ theme),
  "tuple": () => (/* reexport */ tuple),
  "useAsyncList": () => (/* reexport */ $a3d5ea29a1945d34$export$bc3384a35de93d66),
  "useBodyScroll": () => (/* reexport */ src_use_body_scroll),
  "useClickAnywhere": () => (/* reexport */ src_use_click_anywhere),
  "useClickAway": () => (/* reexport */ src_use_click_away),
  "useClipboard": () => (/* reexport */ src_use_clipboard),
  "useCollator": () => (/* reexport */ $bc0d3f91da683b81$export$a16aca283550c30d),
  "useCurrentState": () => (/* reexport */ src_use_current_state),
  "useInput": () => (/* reexport */ src_use_input),
  "useKeyboard": () => (/* reexport */ src_use_keyboard),
  "useModal": () => (/* reexport */ use_modal),
  "usePagination": () => (/* reexport */ use_pagination),
  "usePortal": () => (/* reexport */ src_use_portal),
  "useRealShape": () => (/* reexport */ src_use_real_shape),
  "useResize": () => (/* reexport */ src_use_resize),
  "useSSR": () => (/* reexport */ src_use_ssr),
  "useTheme": () => (/* reexport */ src_use_theme)
});

;// CONCATENATED MODULE: ./src/utils/prop-types.ts
const tuple = (...args) => args;
const normalSizes = tuple('xs', 'sm', 'md', 'lg', 'xl');
const normalColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'gradient');
const simpleColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error');
const extendedColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'invert', 'gradient');
const extendedColorsNoGradient = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'invert');
const extraColors = tuple('default', 'primary', 'secondary', 'success', 'warning', 'error', 'dark', 'lite', 'alert', 'purple', 'violet', 'gradient', 'cyan');
const normalLoaders = tuple('default', 'points', 'points-opacity', 'gradient', 'spinner');
const normalWeights = tuple('light', 'normal', 'bold', 'extrabold', 'black');
const textWeights = tuple(
/* Keyword values */
'normal', 'bold',
/* Keyword values relative to the parent */
'lighter', 'bolder',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
const textTransforms = tuple(
/* Keyword values */
'none', 'capitalize', 'uppercase', 'lowercase', 'full-width', 'full-size-kana',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
const copyTypes = tuple('default', 'slient', 'prevent');
const triggerTypes = tuple('hover', 'click');
const placement = tuple('top', 'topStart', 'topEnd', 'left', 'leftStart', 'leftEnd', 'bottom', 'bottomStart', 'bottomEnd', 'right', 'rightStart', 'rightEnd');
const position = tuple('static', 'relative', 'absolute', 'fixed', 'sticky',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
const objectFit = tuple('contain', 'cover', 'fill', 'none', 'scale-down',
/* Global values */
'inherit', 'initial', 'revert', 'unset');
const dividerAlign = tuple('start', 'center', 'end', 'left', 'right');
const justify = tuple('flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly');
const alignItems = tuple('flex-start', 'flex-end', 'center', 'stretch', 'baseline');
const alignContent = tuple('stretch', 'center', 'flex-start', 'flex-end', 'space-between', 'space-around');
const direction = tuple('row', 'row-reverse', 'column', 'column-reverse');
const wrap = tuple('nowrap', 'wrap', 'wrap-reverse');
const display = tuple('flex', 'block', 'grid', 'inline', 'inline-block', 'inline-flex', 'inline-grid');
const contentPosition = tuple('left', 'right');
const normalAlignments = tuple('start', 'center', 'end');
const excludedInputPropsForTextarea = tuple('clearable', 'as', 'rounded', 'labelLeft', 'labelRight', 'contentLeft', 'contentRight', 'contentClickable', 'contentLeftStyling', 'contentRightStyling', 'onContentClick', 'onClearClick', 'css');
const excludedTableProps = tuple('items', 'disabledKeys', 'allowDuplicateSelectionEvents', 'disallowEmptySelection', 'defaultSelectedKeys', 'sortDescriptor', 'onSortChange');
const selectionBehavior = tuple('toggle', 'replace');
const selectionMode = tuple('none', 'single', 'multiple');
// EXTERNAL MODULE: external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react"}
var external_root_React_commonjs2_react_commonjs_react_amd_react_ = __webpack_require__(787);
var external_root_React_commonjs2_react_commonjs_react_amd_react_default = /*#__PURE__*/__webpack_require__.n(external_root_React_commonjs2_react_commonjs_react_amd_react_);
;// CONCATENATED MODULE: ./src/use-current-state/use-current-state.ts


const useCurrentState = initialState => {
  const [state, setState] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(() => {
    return typeof initialState === 'function' ? initialState() : initialState;
  });
  const ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(initialState);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    ref.current = state;
  }, [state]);

  const setValue = val => {
    const result = typeof val === 'function' ? val(ref.current) : val;
    ref.current = result;
    setState(result);
  };

  return [state, setValue, ref];
};

/* harmony default export */ const use_current_state = (useCurrentState);
;// CONCATENATED MODULE: ./src/use-current-state/index.ts

/* harmony default export */ const src_use_current_state = (use_current_state);
;// CONCATENATED MODULE: ./src/use-real-shape/use-real-shape.ts


const getCSSStyleVal = (str, parentNum) => {
  if (!str) return 0;
  const strVal = str.includes('px') ? +str.split('px')[0] : str.includes('%') ? +str.split('%')[0] * parentNum * 0.01 : str;
  return Number.isNaN(+strVal) ? 0 : +strVal;
};

const getRealShape = el => {
  const defaultShape = {
    width: 0,
    height: 0
  };
  if (!el || typeof window === 'undefined') return defaultShape;
  const rect = el.getBoundingClientRect();
  const {
    width,
    height
  } = window.getComputedStyle(el);
  return {
    width: getCSSStyleVal(`${width}`, rect.width),
    height: getCSSStyleVal(`${height}`, rect.height)
  };
};

const useRealShape = ref => {
  const [state, setState] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)({
    width: 0,
    height: 0
  });

  const update = () => {
    const {
      width,
      height
    } = getRealShape(ref.current);
    setState({
      width,
      height
    });
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => update(), [ref.current]);
  return [state, update];
};

/* harmony default export */ const use_real_shape = (useRealShape);
;// CONCATENATED MODULE: ./src/use-real-shape/index.ts

/* harmony default export */ const src_use_real_shape = (use_real_shape);
;// CONCATENATED MODULE: ./src/use-resize/use-resize.ts


const useResize = (callback, immediatelyInvoke = true) => {
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const fn = () => callback();

    if (immediatelyInvoke) {
      fn();
    }

    window.addEventListener('resize', fn);
    return () => window.removeEventListener('resize', fn);
  }, []);
};

/* harmony default export */ const use_resize = (useResize);
;// CONCATENATED MODULE: ./src/use-resize/index.ts

/* harmony default export */ const src_use_resize = (use_resize);
;// CONCATENATED MODULE: ../../node_modules/@stitches/react/dist/index.mjs
var e="colors",t="sizes",r="space",n={gap:r,gridGap:r,columnGap:r,gridColumnGap:r,rowGap:r,gridRowGap:r,inset:r,insetBlock:r,insetBlockEnd:r,insetBlockStart:r,insetInline:r,insetInlineEnd:r,insetInlineStart:r,margin:r,marginTop:r,marginRight:r,marginBottom:r,marginLeft:r,marginBlock:r,marginBlockEnd:r,marginBlockStart:r,marginInline:r,marginInlineEnd:r,marginInlineStart:r,padding:r,paddingTop:r,paddingRight:r,paddingBottom:r,paddingLeft:r,paddingBlock:r,paddingBlockEnd:r,paddingBlockStart:r,paddingInline:r,paddingInlineEnd:r,paddingInlineStart:r,top:r,right:r,bottom:r,left:r,scrollMargin:r,scrollMarginTop:r,scrollMarginRight:r,scrollMarginBottom:r,scrollMarginLeft:r,scrollMarginX:r,scrollMarginY:r,scrollMarginBlock:r,scrollMarginBlockEnd:r,scrollMarginBlockStart:r,scrollMarginInline:r,scrollMarginInlineEnd:r,scrollMarginInlineStart:r,scrollPadding:r,scrollPaddingTop:r,scrollPaddingRight:r,scrollPaddingBottom:r,scrollPaddingLeft:r,scrollPaddingX:r,scrollPaddingY:r,scrollPaddingBlock:r,scrollPaddingBlockEnd:r,scrollPaddingBlockStart:r,scrollPaddingInline:r,scrollPaddingInlineEnd:r,scrollPaddingInlineStart:r,fontSize:"fontSizes",background:e,backgroundColor:e,backgroundImage:e,borderImage:e,border:e,borderBlock:e,borderBlockEnd:e,borderBlockStart:e,borderBottom:e,borderBottomColor:e,borderColor:e,borderInline:e,borderInlineEnd:e,borderInlineStart:e,borderLeft:e,borderLeftColor:e,borderRight:e,borderRightColor:e,borderTop:e,borderTopColor:e,caretColor:e,color:e,columnRuleColor:e,fill:e,outline:e,outlineColor:e,stroke:e,textDecorationColor:e,fontFamily:"fonts",fontWeight:"fontWeights",lineHeight:"lineHeights",letterSpacing:"letterSpacings",blockSize:t,minBlockSize:t,maxBlockSize:t,inlineSize:t,minInlineSize:t,maxInlineSize:t,width:t,minWidth:t,maxWidth:t,height:t,minHeight:t,maxHeight:t,flexBasis:t,gridTemplateColumns:t,gridTemplateRows:t,borderWidth:"borderWidths",borderTopWidth:"borderWidths",borderRightWidth:"borderWidths",borderBottomWidth:"borderWidths",borderLeftWidth:"borderWidths",borderStyle:"borderStyles",borderTopStyle:"borderStyles",borderRightStyle:"borderStyles",borderBottomStyle:"borderStyles",borderLeftStyle:"borderStyles",borderRadius:"radii",borderTopLeftRadius:"radii",borderTopRightRadius:"radii",borderBottomRightRadius:"radii",borderBottomLeftRadius:"radii",boxShadow:"shadows",textShadow:"shadows",transition:"transitions",zIndex:"zIndices"},i=(e,t)=>"function"==typeof t?{"()":Function.prototype.toString.call(t)}:t,o=()=>{const e=Object.create(null);return(t,r,...n)=>{const o=(e=>JSON.stringify(e,i))(t);return o in e?e[o]:e[o]=r(t,...n)}},l=Symbol.for("sxs.internal"),s=(e,t)=>Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)),a=e=>{for(const t in e)return!0;return!1},{hasOwnProperty:c}=Object.prototype,d=e=>e.includes("-")?e:e.replace(/[A-Z]/g,(e=>"-"+e.toLowerCase())),g=/\s+(?![^()]*\))/,p=e=>t=>e(..."string"==typeof t?String(t).split(g):[t]),u={appearance:e=>({WebkitAppearance:e,appearance:e}),backfaceVisibility:e=>({WebkitBackfaceVisibility:e,backfaceVisibility:e}),backdropFilter:e=>({WebkitBackdropFilter:e,backdropFilter:e}),backgroundClip:e=>({WebkitBackgroundClip:e,backgroundClip:e}),boxDecorationBreak:e=>({WebkitBoxDecorationBreak:e,boxDecorationBreak:e}),clipPath:e=>({WebkitClipPath:e,clipPath:e}),content:e=>({content:e.includes('"')||e.includes("'")||/^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e)?e:`"${e}"`}),hyphens:e=>({WebkitHyphens:e,hyphens:e}),maskImage:e=>({WebkitMaskImage:e,maskImage:e}),maskSize:e=>({WebkitMaskSize:e,maskSize:e}),tabSize:e=>({MozTabSize:e,tabSize:e}),textSizeAdjust:e=>({WebkitTextSizeAdjust:e,textSizeAdjust:e}),userSelect:e=>({WebkitUserSelect:e,userSelect:e}),marginBlock:p(((e,t)=>({marginBlockStart:e,marginBlockEnd:t||e}))),marginInline:p(((e,t)=>({marginInlineStart:e,marginInlineEnd:t||e}))),maxSize:p(((e,t)=>({maxBlockSize:e,maxInlineSize:t||e}))),minSize:p(((e,t)=>({minBlockSize:e,minInlineSize:t||e}))),paddingBlock:p(((e,t)=>({paddingBlockStart:e,paddingBlockEnd:t||e}))),paddingInline:p(((e,t)=>({paddingInlineStart:e,paddingInlineEnd:t||e})))},h=/([\d.]+)([^]*)/,f=(e,t)=>e.length?e.reduce(((e,r)=>(e.push(...t.map((e=>e.includes("&")?e.replace(/&/g,/[ +>|~]/.test(r)&&/&.*&/.test(e)?`:is(${r})`:r):r+" "+e))),e)),[]):t,m=(e,t)=>e in b&&"string"==typeof t?t.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/,((t,r,n,i)=>r+("stretch"===n?`-moz-available${i};${d(e)}:${r}-webkit-fill-available`:`-moz-fit-content${i};${d(e)}:${r}fit-content`)+i)):String(t),b={blockSize:1,height:1,inlineSize:1,maxBlockSize:1,maxHeight:1,maxInlineSize:1,maxWidth:1,minBlockSize:1,minHeight:1,minInlineSize:1,minWidth:1,width:1},S=e=>e?e+"-":"",k=(e,t,r)=>e.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g,((e,n,i,o,l)=>"$"==o==!!i?e:(n||"--"==o?"calc(":"")+"var(--"+("$"===o?S(t)+(l.includes("$")?"":S(r))+l.replace(/\$/g,"-"):l)+")"+(n||"--"==o?"*"+(n||"")+(i||"1")+")":""))),y=/\s*,\s*(?![^()]*\))/,B=Object.prototype.toString,$=(e,t,r,n,i)=>{let o,l,s;const a=(e,t,r)=>{let c,g;const p=e=>{for(c in e){const R=64===c.charCodeAt(0),z=R&&Array.isArray(e[c])?e[c]:[e[c]];for(g of z){const e=/[A-Z]/.test($=c)?$:$.replace(/-[^]/g,(e=>e[1].toUpperCase())),z="object"==typeof g&&g&&g.toString===B&&(!n.utils[e]||!t.length);if(e in n.utils&&!z){const t=n.utils[e];if(t!==l){l=t,p(t(g)),l=null;continue}}else if(e in u){const t=u[e];if(t!==s){s=t,p(t(g)),s=null;continue}}if(R&&(b=c.slice(1)in n.media?"@media "+n.media[c.slice(1)]:c,c=b.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g,((e,t,r,n,i,o)=>{const l=h.test(t),s=.0625*(l?-1:1),[a,c]=l?[n,t]:[t,n];return"("+("="===r[0]?"":">"===r[0]===l?"max-":"min-")+a+":"+("="!==r[0]&&1===r.length?c.replace(h,((e,t,n)=>Number(t)+s*(">"===r?1:-1)+n)):c)+(i?") and ("+(">"===i[0]?"min-":"max-")+a+":"+(1===i.length?o.replace(h,((e,t,r)=>Number(t)+s*(">"===i?-1:1)+r)):o):"")+")"}))),z){const e=R?r.concat(c):[...r],n=R?[...t]:f(t,c.split(y));void 0!==o&&i(x(...o)),o=void 0,a(g,n,e)}else void 0===o&&(o=[[],t,r]),c=R||36!==c.charCodeAt(0)?c:`--${S(n.prefix)}${c.slice(1).replace(/\$/g,"-")}`,g=z?g:"number"==typeof g?g&&e in I?String(g)+"px":String(g):k(m(e,null==g?"":g),n.prefix,n.themeMap[e]),o[0].push(`${R?`${c} `:`${d(c)}:`}${g}`)}}var b,$};p(e),void 0!==o&&i(x(...o)),o=void 0};a(e,t,r)},x=(e,t,r)=>`${r.map((e=>`${e}{`)).join("")}${t.length?`${t.join(",")}{`:""}${e.join(";")}${t.length?"}":""}${Array(r.length?r.length+1:0).join("}")}`,I={animationDelay:1,animationDuration:1,backgroundSize:1,blockSize:1,border:1,borderBlock:1,borderBlockEnd:1,borderBlockEndWidth:1,borderBlockStart:1,borderBlockStartWidth:1,borderBlockWidth:1,borderBottom:1,borderBottomLeftRadius:1,borderBottomRightRadius:1,borderBottomWidth:1,borderEndEndRadius:1,borderEndStartRadius:1,borderInlineEnd:1,borderInlineEndWidth:1,borderInlineStart:1,borderInlineStartWidth:1,borderInlineWidth:1,borderLeft:1,borderLeftWidth:1,borderRadius:1,borderRight:1,borderRightWidth:1,borderSpacing:1,borderStartEndRadius:1,borderStartStartRadius:1,borderTop:1,borderTopLeftRadius:1,borderTopRightRadius:1,borderTopWidth:1,borderWidth:1,bottom:1,columnGap:1,columnRule:1,columnRuleWidth:1,columnWidth:1,containIntrinsicSize:1,flexBasis:1,fontSize:1,gap:1,gridAutoColumns:1,gridAutoRows:1,gridTemplateColumns:1,gridTemplateRows:1,height:1,inlineSize:1,inset:1,insetBlock:1,insetBlockEnd:1,insetBlockStart:1,insetInline:1,insetInlineEnd:1,insetInlineStart:1,left:1,letterSpacing:1,margin:1,marginBlock:1,marginBlockEnd:1,marginBlockStart:1,marginBottom:1,marginInline:1,marginInlineEnd:1,marginInlineStart:1,marginLeft:1,marginRight:1,marginTop:1,maxBlockSize:1,maxHeight:1,maxInlineSize:1,maxWidth:1,minBlockSize:1,minHeight:1,minInlineSize:1,minWidth:1,offsetDistance:1,offsetRotate:1,outline:1,outlineOffset:1,outlineWidth:1,overflowClipMargin:1,padding:1,paddingBlock:1,paddingBlockEnd:1,paddingBlockStart:1,paddingBottom:1,paddingInline:1,paddingInlineEnd:1,paddingInlineStart:1,paddingLeft:1,paddingRight:1,paddingTop:1,perspective:1,right:1,rowGap:1,scrollMargin:1,scrollMarginBlock:1,scrollMarginBlockEnd:1,scrollMarginBlockStart:1,scrollMarginBottom:1,scrollMarginInline:1,scrollMarginInlineEnd:1,scrollMarginInlineStart:1,scrollMarginLeft:1,scrollMarginRight:1,scrollMarginTop:1,scrollPadding:1,scrollPaddingBlock:1,scrollPaddingBlockEnd:1,scrollPaddingBlockStart:1,scrollPaddingBottom:1,scrollPaddingInline:1,scrollPaddingInlineEnd:1,scrollPaddingInlineStart:1,scrollPaddingLeft:1,scrollPaddingRight:1,scrollPaddingTop:1,shapeMargin:1,textDecoration:1,textDecorationThickness:1,textIndent:1,textUnderlineOffset:1,top:1,transitionDelay:1,transitionDuration:1,verticalAlign:1,width:1,wordSpacing:1},R=e=>String.fromCharCode(e+(e>25?39:97)),z=e=>(e=>{let t,r="";for(t=Math.abs(e);t>52;t=t/52|0)r=R(t%52)+r;return R(t%52)+r})(((e,t)=>{let r=t.length;for(;r;)e=33*e^t.charCodeAt(--r);return e})(5381,JSON.stringify(e))>>>0),W=["themed","global","styled","onevar","resonevar","allvar","inline"],j=e=>{if(e.href&&!e.href.startsWith(location.origin))return!1;try{return e.cssRules,!0}catch(e){return!1}},E=e=>{let t;const r=()=>{if(t){const{rules:e,sheet:r}=t;if(!r.deleteRule){for(;3===Object(Object(r.cssRules)[0]).type;)r.cssRules.splice(0,1);r.cssRules=[]}for(const t in e)delete e[t]}const n=Object(e).styleSheets||[];for(const e of n)if(j(e)){for(let n=0,i=e.cssRules;i[n];++n){const o=Object(i[n]);if(1!==o.type)continue;const l=Object(i[n+1]);if(4!==l.type)continue;++n;const{cssText:s}=o;if(!s.startsWith("--sxs"))continue;const a=s.slice(14,-3).trim().split(/\s+/),c=W[a[0]];c&&(t||(t={sheet:e,reset:r,rules:{}}),t.rules[c]={group:l,index:n,cache:new Set(a)})}if(t)break}if(!t){const n=(e,t)=>({type:t,cssRules:[],insertRule(e,t){this.cssRules.splice(t,0,n(e,{import:3,undefined:1}[(e.toLowerCase().match(/^@([a-z]+)/)||[])[1]]||4))},get cssText(){return"@media{}"===e?`@media{${[].map.call(this.cssRules,(e=>e.cssText)).join("")}}`:e}});t={sheet:e?(e.head||e).appendChild(document.createElement("style")).sheet:n("","text/css"),rules:{},reset:r,toString(){const{cssRules:e}=t.sheet;return[].map.call(e,((r,n)=>{const{cssText:i}=r;let o="";if(i.startsWith("--sxs"))return"";if(e[n-1]&&(o=e[n-1].cssText).startsWith("--sxs")){if(!r.cssRules.length)return"";for(const e in t.rules)if(t.rules[e].group===r)return`--sxs{--sxs:${[...t.rules[e].cache].join(" ")}}${i}`;return r.cssRules.length?`${o}${i}`:""}return i})).join("")}}}const{sheet:i,rules:o}=t;for(let e=W.length-1;e>=0;--e){const t=W[e];if(!o[t]){const r=W[e+1],n=o[r]?o[r].index:i.cssRules.length;i.insertRule("@media{}",n),i.insertRule(`--sxs{--sxs:${e}}`,n),o[t]={group:i.cssRules[n+1],index:n,cache:new Set([e])}}v(o[t])}};return r(),t},v=e=>{const t=e.group;let r=t.cssRules.length;e.apply=e=>{try{t.insertRule(e,r),++r}catch{}}},T=Symbol(),w=o(),M=(e,t)=>w(e,(()=>(...r)=>{let n={type:null,composers:new Set};for(const t of r)if(null!=t)if(t[l]){null==n.type&&(n.type=t[l].type);for(const e of t[l].composers)n.composers.add(e)}else t.constructor!==Object||t.$$typeof?null==n.type&&(n.type=t):n.composers.add(C(t,e));return null==n.type&&(n.type="span"),n.composers.size||n.composers.add(["PJLV",{},[],[],{},[]]),P(e,n,t)})),C=({variants:e,compoundVariants:t,defaultVariants:r,...n},i)=>{const o=`${S(i.prefix)}c-${z(n)}`,l=[],s=[],d=Object.create(null),g=[];for(const e in r)d[e]=String(r[e]);if("object"==typeof e&&e)for(const t in e){p=d,u=t,c.call(p,u)||(d[t]="undefined");const r=e[t];for(const e in r){const n={[t]:String(e)};"undefined"===String(e)&&g.push(t);const i=r[e],o=[n,i,!a(i)];l.push(o)}}var p,u;if("object"==typeof t&&t)for(const e of t){let{css:t,...r}=e;t="object"==typeof t&&t||{};for(const e in r)r[e]=String(r[e]);const n=[r,t,!a(t)];s.push(n)}return[o,n,l,s,d,g]},P=(e,t,r)=>{const[n,i,o,a]=L(t.composers),c="function"==typeof t.type||t.type.$$typeof?(e=>{function t(){for(let r=0;r<t[T].length;r++){const[n,i]=t[T][r];e.rules[n].apply(i)}return t[T]=[],null}return t[T]=[],t.rules={},W.forEach((e=>t.rules[e]={apply:r=>t[T].push([e,r])})),t})(r):null,d=(c||r).rules,g=`.${n}${i.length>1?`:where(.${i.slice(1).join(".")})`:""}`,p=l=>{l="object"==typeof l&&l||A;const{css:s,...p}=l,u={};for(const e in o)if(delete p[e],e in l){let t=l[e];"object"==typeof t&&t?u[e]={"@initial":o[e],...t}:(t=String(t),u[e]="undefined"!==t||a.has(e)?t:o[e])}else u[e]=o[e];const h=new Set([...i]);for(const[n,i,o,l]of t.composers){r.rules.styled.cache.has(n)||(r.rules.styled.cache.add(n),$(i,[`.${n}`],[],e,(e=>{d.styled.apply(e)})));const t=O(o,u,e.media),s=O(l,u,e.media,!0);for(const i of t)if(void 0!==i)for(const[t,o,l]of i){const i=`${n}-${z(o)}-${t}`;h.add(i);const s=(l?r.rules.resonevar:r.rules.onevar).cache,a=l?d.resonevar:d.onevar;s.has(i)||(s.add(i),$(o,[`.${i}`],[],e,(e=>{a.apply(e)})))}for(const t of s)if(void 0!==t)for(const[i,o]of t){const t=`${n}-${z(o)}-${i}`;h.add(t),r.rules.allvar.cache.has(t)||(r.rules.allvar.cache.add(t),$(o,[`.${t}`],[],e,(e=>{d.allvar.apply(e)})))}}if("object"==typeof s&&s){const t=`${n}-i${z(s)}-css`;h.add(t),r.rules.inline.cache.has(t)||(r.rules.inline.cache.add(t),$(s,[`.${t}`],[],e,(e=>{d.inline.apply(e)})))}for(const e of String(l.className||"").trim().split(/\s+/))e&&h.add(e);const f=p.className=[...h].join(" ");return{type:t.type,className:f,selector:g,props:p,toString:()=>f,deferredInjector:c}};return s(p,{className:n,selector:g,[l]:t,toString:()=>(r.rules.styled.cache.has(n)||p(),n)})},L=e=>{let t="";const r=[],n={},i=[];for(const[o,,,,l,s]of e){""===t&&(t=o),r.push(o),i.push(...s);for(const e in l){const t=l[e];(void 0===n[e]||"undefined"!==t||s.includes(t))&&(n[e]=t)}}return[t,r,n,new Set(i)]},O=(e,t,r,n)=>{const i=[];e:for(let[o,l,s]of e){if(s)continue;let e,a=0,c=!1;for(e in o){const n=o[e];let i=t[e];if(i!==n){if("object"!=typeof i||!i)continue e;{let e,t,o=0;for(const l in i){if(n===String(i[l])){if("@initial"!==l){const e=l.slice(1);(t=t||[]).push(e in r?r[e]:l.replace(/^@media ?/,"")),c=!0}a+=o,e=!0}++o}if(t&&t.length&&(l={["@media "+t.join(", ")]:l}),!e)continue e}}}(i[a]=i[a]||[]).push([n?"cv":`${e}-${o[e]}`,l,c])}return i},A={},N=o(),D=(e,t)=>N(e,(()=>(...r)=>{const n=()=>{for(let n of r){n="object"==typeof n&&n||{};let r=z(n);if(!t.rules.global.cache.has(r)){if(t.rules.global.cache.add(r),"@import"in n){let e=[].indexOf.call(t.sheet.cssRules,t.rules.themed.group)-1;for(let r of[].concat(n["@import"]))r=r.includes('"')||r.includes("'")?r:`"${r}"`,t.sheet.insertRule(`@import ${r};`,e++);delete n["@import"]}$(n,[],[],e,(e=>{t.rules.global.apply(e)}))}}return""};return s(n,{toString:n})})),H=o(),V=(e,t)=>H(e,(()=>r=>{const n=`${S(e.prefix)}k-${z(r)}`,i=()=>{if(!t.rules.global.cache.has(n)){t.rules.global.cache.add(n);const i=[];$(r,[],[],e,(e=>i.push(e)));const o=`@keyframes ${n}{${i.join("")}}`;t.rules.global.apply(o)}return n};return s(i,{get name(){return i()},toString:i})})),G=class{constructor(e,t,r,n){this.token=null==e?"":String(e),this.value=null==t?"":String(t),this.scale=null==r?"":String(r),this.prefix=null==n?"":String(n)}get computedValue(){return"var("+this.variable+")"}get variable(){return"--"+S(this.prefix)+S(this.scale)+this.token}toString(){return this.computedValue}},F=o(),J=(e,t)=>F(e,(()=>(r,n)=>{n="object"==typeof r&&r||Object(n);const i=`.${r=(r="string"==typeof r?r:"")||`${S(e.prefix)}t-${z(n)}`}`,o={},l=[];for(const t in n){o[t]={};for(const r in n[t]){const i=`--${S(e.prefix)}${t}-${r}`,s=k(String(n[t][r]),e.prefix,t);o[t][r]=new G(r,s,t,e.prefix),l.push(`${i}:${s}`)}}const s=()=>{if(l.length&&!t.rules.themed.cache.has(r)){t.rules.themed.cache.add(r);const i=`${n===e.theme?":root,":""}.${r}{${l.join(";")}}`;t.rules.themed.apply(i)}return r};return{...o,get className(){return s()},selector:i,toString:s}})),U=o();var X,Y=o(),q=e=>{const t=(e=>{let t=!1;const r=U(e,(e=>{t=!0;const r="prefix"in(e="object"==typeof e&&e||{})?String(e.prefix):"",i="object"==typeof e.media&&e.media||{},o="object"==typeof e.root?e.root||null:globalThis.document||null,l="object"==typeof e.theme&&e.theme||{},s={prefix:r,media:i,theme:l,themeMap:"object"==typeof e.themeMap&&e.themeMap||{...n},utils:"object"==typeof e.utils&&e.utils||{}},a=E(o),c={css:M(s,a),globalCss:D(s,a),keyframes:V(s,a),createTheme:J(s,a),reset(){a.reset(),c.theme.toString()},theme:{},sheet:a,config:s,prefix:r,getCssText:a.toString,toString:a.toString};return String(c.theme=c.createTheme(l)),c}));return t||r.reset(),r})(e);return t.styled=(({config:e,sheet:t})=>Y(e,(()=>{const r=M(e,t);return(...e)=>{const t=r(...e),n=t[l].type,i=external_root_React_commonjs2_react_commonjs_react_amd_react_.forwardRef(((e,r)=>{const i=e&&e.as||n,{props:o,deferredInjector:l}=t(e);return delete o.as,o.ref=r,l?external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_.Fragment,null,external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(i,o),external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(l,null)):external_root_React_commonjs2_react_commonjs_react_amd_react_.createElement(i,o)}));return i.className=t.className,i.displayName=`Styled.${n.displayName||n.name||n}`,i.selector=t.selector,i.toString=()=>t.selector,i[l]=t[l],i}})))(t),t},K=()=>X||(X=q()),Q=(...e)=>K().createTheme(...e),_=(...e)=>K().globalCss(...e),ee=(...e)=>K().keyframes(...e),te=(...e)=>K().css(...e),re=(...e)=>K().styled(...e);
//# sourceMappingUrl=index.map
;// CONCATENATED MODULE: ./src/theme/common.ts

const defaultTokens = {
  fonts: {
    sans: "-apple-system, BlinkMacSystemFont, 'Segoe UI','Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans','Helvetica Neue', sans-serif;",
    mono: "Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono','Courier New', monospace;"
  },
  fontSizes: {
    tiny: '.75rem',
    xs: '0.875rem',
    base: '1rem',
    sm: '1.25rem',
    md: '1.5rem',
    lg: '2.25rem',
    xl: '3rem'
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  lineHeights: {
    xs: 1,
    sm: 1.25,
    md: 1.5,
    lg: 1.625,
    xl: 1.75
  },
  letterSpacings: {
    tighter: '-0.05em',
    tight: '-0.025em',
    normal: '0',
    wide: '0.025em',
    wider: '0.05em',
    widest: '0.1em'
  },
  space: {
    0: '0rem',
    xs: '0.5rem',
    sm: '0.75rem',
    md: '1rem',
    lg: '1.25rem',
    xl: '2.25rem',
    px: '1px',
    1: '0.125rem',
    2: '0.25rem',
    3: '0.375rem',
    4: '0.5rem',
    5: '0.625rem',
    6: '0.75rem',
    7: '0.875rem',
    8: '1rem',
    9: '1.25rem',
    10: '1.5rem',
    11: '1.75rem',
    12: '2rem',
    13: '2.25rem',
    14: '2.5rem',
    15: '2.75rem',
    16: '3rem',
    17: '3.5rem',
    18: '4rem',
    20: '5rem',
    24: '6rem',
    28: '7rem',
    32: '8rem',
    36: '9rem',
    40: '10rem',
    44: '11rem',
    48: '12rem',
    52: '13rem',
    56: '14rem',
    60: '15rem',
    64: '16rem',
    72: '18rem',
    80: '20rem',
    96: '24rem'
  },
  radii: {
    xs: '7px',
    sm: '9px',
    md: '12px',
    base: '14px',
    lg: '14px',
    xl: '18px',
    squared: '33%',
    rounded: '50%',
    pill: '9999px'
  },
  zIndices: {
    1: '100',
    2: '200',
    3: '300',
    4: '400',
    5: '500',
    10: '1000',
    max: '9999'
  },
  borderWeights: {
    light: '1px',
    normal: '2px',
    bold: '3px',
    extrabold: '4px',
    black: '5px'
  },
  transitions: {
    default: 'all 250ms ease'
  },
  breakpoints: {
    xs: '650px',
    sm: '960px',
    md: '1280px',
    lg: '1400px',
    xl: '1920px'
  }
};
const defaultColors = {
  // generic colors
  white: '#ffffff',
  black: '#000000',
  //semantic colors
  blue100: '#bfd8fc',
  blue200: '#98D5FD',
  blue300: '#64B8FB',
  blue400: '#3D9CF7',
  blue500: '#0070F3',
  blue600: '#0056D0',
  blue700: '#0040AE',
  blue800: '#002D8C',
  blue900: '#002074',
  purple100: '#dbc8f0',
  purple200: '#DDA9F9',
  purple300: '#C17CEF',
  purple400: '#A258DF',
  purple500: '#7928ca',
  purple600: '#5E1DAD',
  purple700: '#461491',
  purple800: '#310C75',
  purple900: '#220760',
  green100: '#dafee8',
  green200: '#A1F9AC',
  green300: '#6FEE8D',
  green400: '#4ADE7B',
  green500: '#17c964',
  green600: '#10AC63',
  green700: '#0B905F',
  green800: '#077457',
  green900: '#046050',
  yellow100: '#fce6c7',
  yellow200: '#FEE7A6',
  yellow300: '#FCD57A',
  yellow400: '#F9C258',
  yellow500: '#f5a623',
  yellow600: '#D28519',
  yellow700: '#B06811',
  yellow800: '#8E4D0B',
  yellow900: '#753A06',
  red100: '#fbc4d5',
  red200: '#FDA0A5',
  red300: '#FB7085',
  red400: '#F74C77',
  red500: '#f21361',
  red600: '#D00D65',
  red700: '#AE0963',
  red800: '#8C065C',
  red900: '#740357',
  cyan100: '#EEFFF4',
  cyan200: '#DDFFED',
  cyan300: '#CCFFE9',
  cyan400: '#BFFFEA',
  cyan500: '#AAFFEC',
  cyan600: '#7CDBCF',
  cyan700: '#55B7B4',
  cyan800: '#368D93',
  cyan900: '#206C7A',
  pink100: '#FFDBE7',
  pink200: '#FFB8D6',
  pink300: '#FF94CC',
  pink400: '#FF7ACC',
  pink500: '#ff4ecd',
  pink600: '#DB39BD',
  pink700: '#B727AA',
  pink800: '#921893',
  pink900: '#6E0E7A',
  gray100: '#F4F4F4',
  gray200: '#EAEAEA',
  gray300: '#C1C1C1',
  gray400: '#999999',
  gray500: '#888888',
  gray600: '#666666',
  gray700: '#444444',
  gray800: '#333333',
  gray900: '#111111',
  // brand colors
  primaryLight: '$blue100',
  primary: '$blue500',
  primaryDark: '$blue600',
  primaryShadow: '$blue100',
  secondaryLight: '$purple100',
  secondary: '$purple500',
  secondaryDark: '$purple600',
  secondaryShadow: '$purple100',
  successLight: '$green100',
  success: '$green500',
  successDark: '$green600',
  successShadow: '$green100',
  warningLight: '$yellow100',
  warning: '$yellow500',
  warningDark: '$yellow600',
  warningShadow: '$yellow100',
  errorLight: '$red100',
  error: '$red500',
  errorDark: '$red600',
  errorShadow: '$red100',
  gradient: 'linear-gradient(112deg, $cyan500 -63.59%, $pink500 -20.3%, $blue500 70.46%)',
  link: '$blue500'
};
const defaultMedia = {
  xs: `(min-width: ${defaultTokens.breakpoints.xs})`,
  sm: `(min-width: ${defaultTokens.breakpoints.sm})`,
  md: `(min-width: ${defaultTokens.breakpoints.md})`,
  lg: `(min-width: ${defaultTokens.breakpoints.lg})`,
  xl: `(min-width: ${defaultTokens.breakpoints.xl})`,
  xsMax: `(max-width: ${defaultTokens.breakpoints.xs})`,
  smMax: `(max-width: ${defaultTokens.breakpoints.sm})`,
  mdMax: `(max-width: ${defaultTokens.breakpoints.md})`,
  lgMax: `(max-width: ${defaultTokens.breakpoints.lg})`,
  xlMax: `(max-width: ${defaultTokens.breakpoints.xl})`,
  motion: '(prefers-reduced-motion)',
  safari: 'not all and (min-resolution:.001dpcm)',
  hover: '(any-hover: hover)',
  dark: '(prefers-color-scheme: dark)',
  light: '(prefers-color-scheme: light)'
};
const defaultUtils = {
  p: value => ({
    padding: value
  }),
  pt: value => ({
    paddingTop: value
  }),
  pr: value => ({
    paddingRight: value
  }),
  pb: value => ({
    paddingBottom: value
  }),
  pl: value => ({
    paddingLeft: value
  }),
  px: value => ({
    paddingLeft: value,
    paddingRight: value
  }),
  py: value => ({
    paddingTop: value,
    paddingBottom: value
  }),
  m: value => ({
    margin: value
  }),
  mt: value => ({
    marginTop: value
  }),
  mr: value => ({
    marginRight: value
  }),
  mb: value => ({
    marginBottom: value
  }),
  ml: value => ({
    marginLeft: value
  }),
  mx: value => ({
    marginLeft: value,
    marginRight: value
  }),
  my: value => ({
    marginTop: value,
    marginBottom: value
  }),
  ta: value => ({
    textAlign: value
  }),
  tt: value => ({
    textTransform: value
  }),
  to: value => ({
    textOverflow: value
  }),
  d: value => ({
    display: value
  }),
  dflex: value => ({
    display: 'flex',
    alignItems: value,
    justifyContent: value
  }),
  fd: value => ({
    flexDirection: value
  }),
  fw: value => ({
    flexWrap: value
  }),
  ai: value => ({
    alignItems: value
  }),
  ac: value => ({
    alignContent: value
  }),
  jc: value => ({
    justifyContent: value
  }),
  as: value => ({
    alignSelf: value
  }),
  fg: value => ({
    flexGrow: value
  }),
  fs: value => ({
    fontSize: value
  }),
  fb: value => ({
    flexBasis: value
  }),
  bc: value => ({
    backgroundColor: value
  }),
  bf: value => ({
    backdropFilter: value
  }),
  bg: value => ({
    background: value
  }),
  bgBlur: value => ({
    bf: 'saturate(180%) blur(10px)',
    bg: `${value}66`
  }),
  bgColor: value => ({
    backgroundColor: value
  }),
  backgroundClip: value => ({
    WebkitBackgroundClip: value,
    backgroundClip: value
  }),
  bgClip: value => ({
    WebkitBackgroundClip: value,
    backgroundClip: value
  }),
  br: value => ({
    borderRadius: value
  }),
  bw: value => ({
    borderWidth: value
  }),
  btrr: value => ({
    borderTopRightRadius: value
  }),
  bbrr: value => ({
    borderBottomRightRadius: value
  }),
  bblr: value => ({
    borderBottomLeftRadius: value
  }),
  btlr: value => ({
    borderTopLeftRadius: value
  }),
  bs: value => ({
    boxShadow: value
  }),
  normalShadow: value => ({
    boxShadow: `0 4px 14px 0 $colors${value}`
  }),
  normalShadowVar: value => ({
    boxShadow: `0 4px 14px 0 ${value}`
  }),
  lh: value => ({
    lineHeight: value
  }),
  ov: value => ({
    overflow: value
  }),
  ox: value => ({
    overflowX: value
  }),
  oy: value => ({
    overflowY: value
  }),
  pe: value => ({
    pointerEvents: value
  }),
  events: value => ({
    pointerEvents: value
  }),
  us: value => ({
    WebkitUserSelect: value,
    userSelect: value
  }),
  userSelect: value => ({
    WebkitUserSelect: value,
    userSelect: value
  }),
  w: value => ({
    width: value
  }),
  h: value => ({
    height: value
  }),
  mw: value => ({
    maxWidth: value
  }),
  maxW: value => ({
    maxWidth: value
  }),
  mh: value => ({
    maxHeight: value
  }),
  maxH: value => ({
    maxHeight: value
  }),
  size: value => ({
    width: value,
    height: value
  }),
  minSize: value => ({
    minWidth: value,
    minHeight: value,
    width: value,
    height: value
  }),
  sizeMin: value => ({
    minWidth: value,
    minHeight: value,
    width: value,
    height: value
  }),
  maxSize: value => ({
    maxWidth: value,
    maxHeight: value
  }),
  sizeMax: value => ({
    maxWidth: value,
    maxHeight: value
  }),
  appearance: value => ({
    WebkitAppearance: value,
    appearance: value
  }),
  scale: value => ({
    transform: `scale(${value})`
  }),
  linearGradient: value => ({
    backgroundImage: `linear-gradient(${value})`
  }),
  tdl: value => ({
    textDecorationLine: value
  }),
  textGradient: value => ({
    backgroundImage: `linear-gradient(${value})`,
    WebkitBackgroundClip: 'text',
    WebkitTextFillColor: 'transparent',
    '&::selection': {
      WebkitTextFillColor: '$colors$text'
    }
  })
};
const defaultThemeMap = { ...n,
  width: 'space',
  height: 'space',
  minWidth: 'space',
  maxWidth: 'space',
  minHeight: 'space',
  maxHeight: 'space',
  flexBasis: 'space',
  gridTemplateColumns: 'space',
  gridTemplateRows: 'space',
  blockSize: 'space',
  minBlockSize: 'space',
  maxBlockSize: 'space',
  inlineSize: 'space',
  minInlineSize: 'space',
  maxInlineSize: 'space',
  borderWidth: 'borderWeights'
};
/* harmony default export */ const common = ({
  prefix: 'nextui',
  theme: { ...defaultTokens,
    colors: defaultColors,
    shadows: {}
  },
  media: defaultMedia,
  utils: defaultUtils,
  themeMap: defaultThemeMap
});
;// CONCATENATED MODULE: ./src/theme/light-theme.ts
/* harmony default export */ const light_theme = ({
  colors: {
    accents1: '$gray100',
    accents2: '$gray200',
    accents3: '$gray300',
    accents4: '$gray400',
    accents5: '$gray500',
    accents6: '$gray600',
    accents7: '$gray700',
    accents8: '$gray800',
    accents9: '$gray900',
    text: '$gray800',
    background: '$white',
    foreground: '$black',
    codeLight: '$pink100',
    code: '$pink600',
    border: '$gray200',
    selection: '$blue200'
  },
  shadows: {
    xs: '-4px 0 4px rgb(0 0 0 / 5%);',
    sm: '0 5px 20px -5px rgba(0, 0, 0, 0.1)',
    md: '0 8px 30px rgba(0, 0, 0, 0.15)',
    lg: '0 30px 60px rgba(0, 0, 0, 0.15)',
    xl: '0 40px 80px rgba(0, 0, 0, 0.25)'
  }
});
;// CONCATENATED MODULE: ./src/theme/dark-theme.ts
/* harmony default export */ const dark_theme = ({
  colors: {
    accents1: '$gray900',
    accents2: '$gray800',
    accents3: '$gray700',
    accents4: '$gray600',
    accents5: '$gray500',
    accents6: '$gray400',
    accents7: '$gray300',
    accents8: '$gray200',
    accents9: '$gray100',
    text: '$white',
    blue900: '#001835',
    purple900: '#1c0631',
    green900: '#033116',
    yellow900: '#3d2705',
    red900: '#3c0216',
    primaryLight: '$blue900',
    primaryShadow: '$blue600',
    secondaryLight: '$purple900',
    secondaryShadow: '$purple600',
    successLight: '$green900',
    successShadow: '$green600',
    warningLight: '$yellow900',
    warningShadow: '$yellow600',
    errorLight: '$red900',
    errorShadow: '$red600',
    background: '$black',
    foreground: '$white',
    codeLight: '#16272e',
    code: '#6cc0e1',
    border: '$gray700',
    selection: '#ff4ecd'
  },
  shadows: {
    xs: '-4px 0 15px rgb(0 0 0 / 50%)',
    sm: '0 5px 20px -5px rgba(20, 20, 20, 0.1)',
    md: '0 8px 30px rgba(20, 20, 20, 0.15)',
    lg: '0 30px 60px rgba(20, 20, 20, 0.15)',
    xl: '0 40px 80px rgba(20, 20, 20, 0.25)'
  }
});
;// CONCATENATED MODULE: ./src/utils/deep-merge.js
function deep_merge_deepMerge(result) {
  var stack = Array.prototype.slice.call(arguments, 1);
  var item;
  var key;

  while (stack.length) {
    item = stack.shift();

    for (key in item) {
      // eslint-disable-next-line no-prototype-builtins
      if (item.hasOwnProperty(key)) {
        if (typeof result[key] === 'object' && result[key] && Object.prototype.toString.call(result[key]) !== '[object Array]') {
          if (typeof item[key] === 'object' && item[key] !== null) {
            result[key] = deep_merge_deepMerge({}, result[key], item[key]);
          } else {
            result[key] = item[key];
          }
        } else {
          result[key] = item[key];
        }
      }
    }
  }

  return result;
}
;// CONCATENATED MODULE: ./src/theme/stitches.config.ts





const getStitchesTheme = targetTheme => {
  return deepMerge(targetTheme, commonTheme.theme);
};
const stitches = q({ ...common,
  theme: { ...common.theme,
    shadows: { ...light_theme.shadows
    },
    colors: { ...common.theme.colors,
      ...light_theme.colors
    }
  }
});
const createThemeBase = stitches.createTheme;
const styled = stitches.styled;
const css = stitches.css;
const globalCss = stitches.globalCss;
const keyframes = stitches.keyframes;
const getCssText = stitches.getCssText;
const theme = stitches.theme;
const config = stitches.config;
const sharedFocus = css({
  WebkitTapHighlightColor: 'transparent',
  '&:focus:not(&:focus-visible)': {
    boxShadow: 'none'
  },
  '&:focus': {
    outline: 'none',
    boxShadow: '0 0 0 2px $colors$background, 0 0 0 4px $colors$primary'
  },
  '@safari': {
    WebkitTapHighlightColor: 'transparent',
    outline: 'none'
  }
});
const cssFocusVisible = css({
  variants: {
    isFocusVisible: {
      true: {
        outline: 'transparent  solid 2px',
        outlineOffset: '2px',
        boxShadow: '0 0 0 2px $colors$background, 0 0 0 4px $colors$primary'
      },
      false: {
        outline: 'none'
      }
    }
  }
});
const sharedVisuallyHidden = css({
  border: '0px',
  clip: 'rect(0px, 0px, 0px, 0px)',
  height: '1px',
  width: '1px',
  margin: '-1px',
  padding: '0px',
  overflow: 'hidden',
  whiteSpace: 'nowrap',
  position: 'absolute'
});
const createTheme = ({
  type,
  theme,
  className
}) => {
  if (!type) {
    throw new Error('Theme type is required');
  }

  return createThemeBase(className || `${type}-theme`, deep_merge_deepMerge(type === 'dark' ? dark_theme : light_theme, theme));
};
;// CONCATENATED MODULE: ./src/theme/theme-context.ts


const defaultContext = {
  isDark: false,
  theme: theme,
  type: 'light'
};
const ThemeContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(defaultContext);
/* harmony default export */ const theme_context = (ThemeContext);
;// CONCATENATED MODULE: ./src/use-theme/use-theme.ts



const useTheme = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(theme_context);

/* harmony default export */ const use_theme = (useTheme);
;// CONCATENATED MODULE: ./src/use-theme/index.ts

/* harmony default export */ const src_use_theme = (use_theme);
;// CONCATENATED MODULE: ./src/use-ssr/use-ssr.ts


const isBrowser = () => {
  return Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
};

const useSSR = () => {
  const [browser, setBrowser] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    setBrowser(isBrowser());
  }, []);
  return {
    isBrowser: browser,
    isServer: !browser
  };
};

/* harmony default export */ const use_ssr = (useSSR);
;// CONCATENATED MODULE: ./src/use-ssr/index.ts

/* harmony default export */ const src_use_ssr = (use_ssr);
;// CONCATENATED MODULE: ./src/utils/collections.ts

const getId = () => {
  return Math.random().toString(32).slice(2, 10);
};
const hasChild = (children, child) => {
  const types = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.map(children, item => {
    if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(item)) return null;
    return item.type;
  });
  return (types || []).includes(child);
};
const pick = (props, obj) => props.reduce((acc, prop) => {
  acc[prop] = obj[prop];
  return acc;
}, {});
const pickChild = (children, targetChild) => {
  let target = [];
  const withoutTargetChildren = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.map(children, item => {
    if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(item)) return item;

    if (item.type === targetChild) {
      target.push(item);
      return null;
    }

    return item;
  });
  const targetChildren = target.length >= 0 ? target : undefined;
  return [withoutTargetChildren, targetChildren];
};
const pickSingleChild = (children, targetChild) => {
  const [withoutTargetChildren, target] = pickChild(children, targetChild);
  let targetChildren = null;

  if (target && target.length >= 1) {
    targetChildren = target.length >= 0 ? target[0] : undefined;
  }

  return [withoutTargetChildren, targetChildren];
};
const isChildElement = (parent, child) => {
  if (!parent || !child) return false; // eslint-disable-next-line no-undef

  let node = child;

  while (node) {
    if (node === parent) return true;
    node = node.parentNode;
  }

  return false;
};
const collections_isBrowser = () => {
  return Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);
};
const isMac = () => {
  if (!collections_isBrowser()) return false;
  return navigator.platform.toUpperCase().indexOf('MAC') >= 0;
};
const setChildrenIndex = (children, targetComponents = []) => {
  if (external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.count(children) === 0) return [];
  const allowAll = targetComponents.length === 0;

  const clone = (child, props = {}) => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().cloneElement(child, props);

  let index = 0;
  return external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.map(children, item => {
    if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(item)) return item;
    index = index + 1;
    if (allowAll) return clone(item, {
      index
    });
    const isAllowed = targetComponents.find(child => child === item.type);
    if (isAllowed) return clone(item, {
      index
    });
    index = index - 1;
    return item;
  });
};
const flattenArray = arr => {
  return arr.reduce((acc, val) => acc.concat(Array.isArray(val) ? flattenArray(val) : val), []);
};
;// CONCATENATED MODULE: ./src/use-portal/use-portal.ts




const createElement = id => {
  const el = document.createElement('div');
  el.setAttribute('id', id);
  return el;
};

const usePortal = (selectId = getId(), getContainer) => {
  const id = `nextui-${selectId}`;
  const {
    isBrowser
  } = src_use_ssr();
  const [elSnapshot, setElSnapshot] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isBrowser ? createElement(id) : null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const customContainer = getContainer ? getContainer() : null;
    const parentElement = customContainer || document.body;
    const hasElement = parentElement.querySelector(`#${id}`);
    const el = hasElement || createElement(id);

    if (!hasElement) {
      parentElement.appendChild(el);
    }

    setElSnapshot(el);
  }, []);
  return elSnapshot;
};

/* harmony default export */ const use_portal = (usePortal);
;// CONCATENATED MODULE: ./src/use-portal/index.ts

/* harmony default export */ const src_use_portal = (use_portal);
;// CONCATENATED MODULE: ./src/use-body-scroll/use-body-scroll.ts

const defaultOptions = {
  scrollLayer: false
};
const elementStack = new Map();

const isIos = () => {
  /* istanbul ignore next */
  if (typeof window === 'undefined' || !window.navigator) return false;
  return /iP(ad|hone|od)/.test(window.navigator.platform);
};

const touchHandler = event => {
  if (event.touches && event.touches.length > 1) return true;
  event.preventDefault();
  return false;
};

const useBodyScroll = (elementRef, options) => {
  /* istanbul ignore next */
  if (typeof document === 'undefined') return [false, t => t];
  const elRef = elementRef || (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(document.body);
  const [hidden, setHidden] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const safeOptions = { ...defaultOptions,
    ...(options || {})
  }; // don't prevent touch event when layer contain scroll

  const isIosWithCustom = () => {
    if (safeOptions.scrollLayer) return false;
    return isIos();
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!elRef || !elRef.current) return;
    const lastOverflow = elRef.current.style.overflow;

    if (hidden) {
      if (elementStack.has(elRef.current)) return;

      if (!isIosWithCustom()) {
        elRef.current.style.overflow = 'hidden';
      } else {
        document.addEventListener('touchmove', touchHandler, {
          passive: false
        });
      }

      elementStack.set(elRef.current, {
        last: lastOverflow
      });
      return;
    } // reset element overflow


    if (!elementStack.has(elRef.current)) return;

    if (!isIosWithCustom()) {
      const store = elementStack.get(elRef.current);
      elRef.current.style.overflow = store.last;
    } else {
      document.removeEventListener('touchmove', touchHandler);
    }

    elementStack.delete(elRef.current);
  }, [hidden, elRef]);
  return [hidden, setHidden];
};

/* harmony default export */ const use_body_scroll = (useBodyScroll);
;// CONCATENATED MODULE: ./src/use-body-scroll/index.ts

/* harmony default export */ const src_use_body_scroll = (use_body_scroll);
;// CONCATENATED MODULE: ./src/use-click-away/use-click-away.ts


const useClickAway = (ref, handler) => {
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const callback = event => {
      const el = ref.current;
      if (!event || !el || el.contains(event.target)) return;
      handler(event);
    };

    document.addEventListener('click', callback);
    return () => document.removeEventListener('click', callback);
  }, [ref, handler]);
};

/* harmony default export */ const use_click_away = (useClickAway);
;// CONCATENATED MODULE: ./src/use-click-away/index.ts

/* harmony default export */ const src_use_click_away = (use_click_away);
;// CONCATENATED MODULE: ./src/use-warning/use-warning.ts
const warningStack = {};

const useWarning = (message, component) => {
  const tag = component ? ` [${component}]` : ' ';
  const log = `[Next UI]${tag}: ${message}`;
  if (typeof console === 'undefined') return;
  if (warningStack[log]) return;
  warningStack[log] = true;

  if (false) {}

  console.warn(log);
};

/* harmony default export */ const use_warning = (useWarning);
;// CONCATENATED MODULE: ./src/use-warning/index.ts

/* harmony default export */ const src_use_warning = (use_warning);
;// CONCATENATED MODULE: ./src/utils/assertion.ts
const __DEV__ = "production" !== 'production';
const __TEST__ = (/* unused pure expression or super */ null && ("production" === 'test'));
function isArray(value) {
  return Array.isArray(value);
}
function isEmptyArray(value) {
  return isArray(value) && value.length === 0;
}
function isObject(value) {
  const type = typeof value;
  return value != null && (type === 'object' || type === 'function') && !isArray(value);
}
function isEmptyObject(value) {
  return isObject(value) && Object.keys(value).length === 0;
} // Empty assertions

function isEmpty(value) {
  if (isArray(value)) return isEmptyArray(value);
  if (isObject(value)) return isEmptyObject(value);
  if (value == null || value === '') return true;
  return false;
}
;// CONCATENATED MODULE: ./src/use-clipboard/use-clipboard.ts




const use_clipboard_defaultOptions = {
  onError: () => __DEV__ && src_use_warning('Failed to copy.', 'use-clipboard')
};

const useClipboard = (options = use_clipboard_defaultOptions) => {
  const el = src_use_portal('clipboard');

  const copyText = (el, text) => {
    if (!el || !text) return;
    const selection = window.getSelection();
    if (!selection) return;
    el.style.whiteSpace = 'pre';
    el.textContent = text;
    const range = window.document.createRange();
    selection.removeAllRanges();
    range.selectNode(el);
    selection.addRange(range);

    try {
      window.document.execCommand('copy');
    } catch (e) {
      options.onError && options.onError();
    }

    selection.removeAllRanges();

    if (el) {
      el.textContent = '';
    }
  };

  const copy = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(text => {
    copyText(el, text);
  }, [el]);
  return {
    copy
  };
};

/* harmony default export */ const use_clipboard = (useClipboard);
;// CONCATENATED MODULE: ./src/use-clipboard/index.ts

/* harmony default export */ const src_use_clipboard = (use_clipboard);
;// CONCATENATED MODULE: ./src/use-click-anywhere/use-click-anywhere.ts


const useClickAnyWhere = handler => {
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const callback = event => handler(event);

    document.addEventListener('click', callback);
    return () => document.removeEventListener('click', callback);
  }, [handler]);
};

/* harmony default export */ const use_click_anywhere = (useClickAnyWhere);
;// CONCATENATED MODULE: ./src/use-click-anywhere/index.ts

/* harmony default export */ const src_use_click_anywhere = (use_click_anywhere);
;// CONCATENATED MODULE: ./src/use-input/use-input.ts


const useInput = initialValue => {
  const [value, setValue, currentRef] = src_use_current_state(initialValue);
  return {
    value,
    setValue,
    currentRef,
    reset: () => setValue(initialValue),
    bindings: {
      value,
      onChange: event => {
        if (typeof event === 'object' && event.target) {
          setValue(event.target.value);
        } else {
          setValue(event);
        }
      }
    }
  };
};

/* harmony default export */ const use_input = (useInput);
;// CONCATENATED MODULE: ./src/use-input/index.ts

/* harmony default export */ const src_use_input = (use_input);
;// CONCATENATED MODULE: ./src/use-keyboard/codes.ts
/**
 * KeyBinding Codes
 * The content of this file is based on the design of the open source project "microsoft/vscode",
 *   Copyright (c) Microsoft Corporation. All rights reserved.
 *
 * We inherit the KeyMod values from "microsoft/vscode",
 * but use the Browser's KeyboardEvent event implementation, and all values are used only as identification.
 */
const KeyCode = {
  Unknown: 0,
  Backspace: 8,
  Tab: 9,
  Enter: 13,
  Shift: 16,
  Ctrl: 17,
  Alt: 18,
  PauseBreak: 19,
  CapsLock: 20,
  Escape: 27,
  Space: 32,
  PageUp: 33,
  PageDown: 34,
  End: 35,
  Home: 36,
  LeftArrow: 37,
  UpArrow: 38,
  RightArrow: 39,
  DownArrow: 40,
  Insert: 45,
  Delete: 46,
  KEY_0: 48,
  KEY_1: 49,
  KEY_2: 50,
  KEY_3: 51,
  KEY_4: 52,
  KEY_5: 53,
  KEY_6: 54,
  KEY_7: 55,
  KEY_8: 56,
  KEY_9: 57,
  KEY_A: 65,
  KEY_B: 66,
  KEY_C: 67,
  KEY_D: 68,
  KEY_E: 69,
  KEY_F: 70,
  KEY_G: 71,
  KEY_H: 72,
  KEY_I: 73,
  KEY_J: 74,
  KEY_K: 75,
  KEY_L: 76,
  KEY_M: 77,
  KEY_N: 78,
  KEY_O: 79,
  KEY_P: 80,
  KEY_Q: 81,
  KEY_R: 82,
  KEY_S: 83,
  KEY_T: 84,
  KEY_U: 85,
  KEY_V: 86,
  KEY_W: 87,
  KEY_X: 88,
  KEY_Y: 89,
  KEY_Z: 90,
  Meta: 91,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  NumLock: 144,
  ScrollLock: 145,
  Equal: 187,
  Minus: 189,
  Backquote: 192,
  Backslash: 220
};
const KeyMod = {
  CtrlCmd: 1 << 11 >>> 0,
  Shift: 1 << 10 >>> 0,
  Alt: 1 << 9 >>> 0,
  WinCtrl: 1 << 8 >>> 0
};
;// CONCATENATED MODULE: ./src/utils/object.ts
const object_isObject = target => target && typeof target === 'object';
const renameProp = (oldProp, newProp, {
  [oldProp]: old,
  ...others
}) => ({
  [newProp]: old,
  ...others
}); // copy an object without reference

const copyObject = obj => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  return { ...obj
  };
}; // copy an object omit some keys

const omitObject = (obj, omitKeys) => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  const newObj = { ...obj
  };
  omitKeys.forEach(key => newObj[key] && delete newObj[key]);
  return newObj;
}; // clean undefined and null values

const cleanObject = obj => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  const newObj = { ...obj
  };
  Object.keys(newObj).forEach(key => {
    if (newObj[key] === undefined || newObj[key] === null) {
      delete newObj[key];
    }
  });
  return newObj;
};
const cleanObjectKeys = (obj, keys = []) => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  const newObj = { ...obj
  };
  keys.forEach(key => {
    if (newObj[key]) {
      delete newObj[key];
    }
  });
  return newObj;
};
const getKeyValue = (obj, key) => {
  if (!object_isObject(obj)) return obj;
  if (obj instanceof Array) return [...obj];
  return obj[key];
};
;// CONCATENATED MODULE: ./src/use-keyboard/helper.ts



/* istanbul ignore next */

const getCtrlKeysByPlatform = () => {
  return {
    CtrlCmd: isMac() ? 'metaKey' : 'ctrlKey',
    WinCtrl: isMac() ? 'ctrlKey' : 'metaKey'
  };
};
const getActiveModMap = bindings => {
  const modBindings = bindings.filter(item => !!getKeyValue(KeyMod, item));
  const activeModMap = {
    CtrlCmd: false,
    Shift: false,
    Alt: false,
    WinCtrl: false
  };
  modBindings.forEach(code => {
    const modKey = getKeyValue(KeyMod, code);
    activeModMap[modKey] = true;
  });
  return activeModMap;
};
;// CONCATENATED MODULE: ./src/use-keyboard/use-keyboard.ts





const useKeyboard = (handler, keyBindings, options = {}) => {
  const bindings = Array.isArray(keyBindings) ? keyBindings : [keyBindings];
  const {
    disableGlobalEvent = false,
    capture = false,
    stopPropagation = false,
    preventDefault = false,
    event = 'keydown'
  } = options;
  const activeModMap = getActiveModMap(bindings);
  const keyCodes = bindings.filter(item => !getKeyValue(KeyMod, item));
  const {
    CtrlCmd,
    WinCtrl
  } = getCtrlKeysByPlatform();

  const eventHandler = event => {
    if (activeModMap.Shift && !event.shiftKey) return;
    if (activeModMap.Alt && !event.altKey) return;
    if (activeModMap.CtrlCmd && !event[CtrlCmd]) return;
    if (activeModMap.WinCtrl && !event[WinCtrl]) return;
    if (keyCodes.length > 0 && !keyCodes.includes(event.keyCode)) return;

    if (stopPropagation) {
      event.stopPropagation();
    }

    if (preventDefault) {
      event.preventDefault();
    }

    handler && handler(event);
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!disableGlobalEvent) {
      document.addEventListener(event, eventHandler);
    }

    return () => {
      document.removeEventListener(event, eventHandler);
    };
  }, [disableGlobalEvent]);

  const elementBindingHandler = (elementEventType, isCapture = false) => {
    if (elementEventType !== event) return () => {};
    if (isCapture !== capture) return () => {};
    return e => eventHandler(e);
  };

  return {
    bindings: {
      onKeyDown: elementBindingHandler('keydown'),
      onKeyDownCapture: elementBindingHandler('keydown', true),
      onKeyPress: elementBindingHandler('keypress'),
      onKeyPressCapture: elementBindingHandler('keypress', true),
      onKeyUp: elementBindingHandler('keyup'),
      onKeyUpCapture: elementBindingHandler('keyup', true)
    }
  };
};

/* harmony default export */ const use_keyboard = (useKeyboard);
;// CONCATENATED MODULE: ./src/use-keyboard/index.ts



/* harmony default export */ const src_use_keyboard = (use_keyboard);
;// CONCATENATED MODULE: ./src/utils/numbers.ts
/**
 * Convert a value to percentage based on lower and upper bound values
 *
 * @param value the value in number
 * @param min the minimum value
 * @param max the maximum value
 */
function valueToPercent(value, min, max) {
  return (value - min) * 100 / (max - min);
}
function range(start, end) {
  const length = end - start + 1;
  return Array.from({
    length
  }, (_, index) => index + start);
}
;// CONCATENATED MODULE: ./src/use-pagination/index.ts


const DOTS = 'dots';

const usePagination = ({
  page,
  total,
  siblings = 1,
  boundaries = 1,
  initialPage = 1,
  onChange
}) => {
  const [activePage, setActivePage] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(page || initialPage);

  const onChangeActivePage = newPage => {
    setActivePage(newPage);
    onChange && onChange(newPage);
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (page && page !== activePage) {
      setActivePage(page);
    }
  }, [page]);
  const setPage = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(pageNumber => {
    if (pageNumber <= 0) {
      onChangeActivePage(1);
    } else if (pageNumber > total) {
      onChangeActivePage(total);
    } else {
      onChangeActivePage(pageNumber);
    }
  }, [total]);

  const next = () => setPage(activePage + 1);

  const previous = () => setPage(activePage - 1);

  const first = () => setPage(1);

  const last = () => setPage(total);

  const paginationRange = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const totalPageNumbers = siblings * 2 + 3 + boundaries * 2;

    if (totalPageNumbers >= total) {
      return range(1, total);
    }

    const leftSiblingIndex = Math.max(activePage - siblings, boundaries);
    const rightSiblingIndex = Math.min(activePage + siblings, total - boundaries);
    /*
     * We do not want to show dots if there is only one position left
     * after/before the left/right page count as that would lead to a change if our Pagination
     * component size which we do not want
     */

    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;
    const shouldShowRightDots = rightSiblingIndex < total - (boundaries + 1);

    if (!shouldShowLeftDots && shouldShowRightDots) {
      const leftItemCount = siblings * 2 + boundaries + 2;
      return [...range(1, leftItemCount), DOTS, ...range(total - (boundaries - 1), total)];
    }

    if (shouldShowLeftDots && !shouldShowRightDots) {
      const rightItemCount = boundaries + 1 + 2 * siblings;
      return [...range(1, boundaries), DOTS, ...range(total - rightItemCount, total)];
    }

    return [...range(1, boundaries), DOTS, ...range(leftSiblingIndex, rightSiblingIndex), DOTS, ...range(total - boundaries + 1, total)];
  }, [total, siblings, activePage]);
  return {
    range: paginationRange,
    active: activePage,
    setPage,
    next,
    previous,
    first,
    last
  };
};

/* harmony default export */ const use_pagination = (usePagination);
// EXTERNAL MODULE: ../../node_modules/react/jsx-dev-runtime.js
var jsx_dev_runtime = __webpack_require__(194);
;// CONCATENATED MODULE: ./src/css-baseline/css-baseline.tsx
var _jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/css-baseline/css-baseline.tsx";



const globalStyles = globalCss({
  '*, *:before, *:after': {
    boxSizing: 'border-box',
    textRendering: 'geometricPrecision',
    WebkitTapHighlightColor: 'transparent'
  },
  html: {
    fontSize: '$base'
  },
  body: {
    margin: 0,
    padding: 0,
    minHeight: '100%',
    position: 'relative',
    overflowX: 'hidden',
    WebkitFontSmoothing: 'antialiased',
    MozOsxFontSmoothing: 'grayscale',
    textRendering: 'optimizeLegibility',
    fontSize: '$base',
    lineHeight: '$md',
    fontFamily: '$sans'
  },
  'html, body': {
    backgroundColor: '$background',
    color: '$text'
  },
  'p, small': {
    color: 'inherit',
    letterSpacing: '$tighter',
    fontWeight: '$normal',
    fontFamily: '$sans'
  },
  p: {
    margin: '$md 0',
    fontSize: '$base',
    lineHeight: '$lg'
  },
  small: {
    margin: 0,
    lineHeight: '$md',
    fontSize: '$xs'
  },
  b: {
    fontWeight: '$semibold'
  },
  span: {
    fontSize: 'inherit',
    color: 'inherit',
    fontWeight: 'inherit'
  },
  img: {
    maxWidth: '100%'
  },
  a: {
    cursor: 'pointer',
    fontSize: 'inherit',
    WebkitTouchCallout: 'none',
    WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)',
    WebkitBoxAlign: 'center',
    alignItems: 'center',
    color: '$link',
    textDecoration: 'none'
  },
  'a:hover': {
    textDecoration: 'none'
  },
  'ul,ol': {
    padding: 0,
    listStyleType: 'none',
    margin: '$sm $sm $sm $lg',
    color: '$foreground'
  },
  ol: {
    listStyleType: 'decimal'
  },
  li: {
    marginBottom: '$5',
    fontSize: '$base',
    lineHeight: '$lg'
  },
  'h1,h2,h3,h4,h5,h6': {
    color: 'inherit',
    margin: '0 0 $5 0'
  },
  h1: {
    letterSpacing: '$tighter',
    lineHeight: '$md',
    fontSize: '$xl',
    fontWeight: '$bold'
  },
  h2: {
    letterSpacing: '$tighter',
    fontSize: '$lg',
    fontWeight: '$semibold'
  },
  h3: {
    letterSpacing: '$tighter',
    fontSize: '$md',
    fontWeight: '$semibold'
  },
  h4: {
    letterSpacing: '$tighter',
    fontSize: '$sm',
    fontWeight: '$semibold'
  },
  h5: {
    letterSpacing: '$tight',
    fontSize: '$base',
    fontWeight: '$semibold'
  },
  h6: {
    letterSpacing: '$tight',
    fontSize: '$xs',
    fontWeight: '$semibold'
  },
  'button, input, select,textarea': {
    fontFamily: 'inherit',
    fontSize: 'inherit',
    lineHeight: 'inherit',
    color: 'inherit',
    margin: 0
  },
  'button:focus, input:focus, select:focus,textarea:focus': {
    outline: 'none'
  },
  code: {
    color: '$code',
    padding: '$1 $2',
    borderRadius: '$xs',
    bg: '$codeLight',
    fontFamily: '$mono',
    fontSize: '$xs',
    whiteSpace: 'pre-wrap',
    transition: '$default'
  },
  'code:hover': {
    opacity: 0.8
  },
  pre: {
    overflow: 'auto',
    whiteSpace: 'pre',
    textAlign: 'left',
    fontSize: '$xs',
    borderRadius: '$lg',
    padding: '$md $lg',
    margin: '$lg 0 ',
    fontFamily: '$mono',
    lineHeight: '$md',
    webkitOverflowScrolling: 'touch'
  },
  'pre code': {
    color: '$foreground',
    fontSize: '$xs',
    lineHeight: '$sm',
    whiteSpace: 'pre'
  },
  'pre code:before,pre code:after': {
    display: 'none'
  },
  'pre p': {
    margin: 0
  },
  'pre::-webkit-scrollbar': {
    display: 'none',
    width: 0,
    height: 0,
    background: 'transparent'
  },
  hr: {
    borderColor: '$accents2'
  },
  details: {
    backgroundColor: '$accents1',
    border: 'none'
  },
  'details:focus, details:hover, details:active': {
    outline: 'none'
  },
  summary: {
    cursor: 'pointer',
    userSelect: 'none',
    listStyle: 'none',
    outline: 'none'
  },
  'summary::-webkit-details-marker, summary::before': {
    display: 'none'
  },
  'summary::-moz-list-bullet': {
    fontSize: 0
  },
  'summary:focus, summary:hover, summary:active': {
    outline: 'none',
    listStyle: 'none'
  },
  '::selection': {
    backgroundColor: '$selection'
  },
  blockquote: {
    padding: '$md $lg',
    color: '$accents5',
    backgroundColor: '$accents1',
    borderRadius: '$lg',
    margin: '$10 0'
  },
  'blockquote *:first-child': {
    marginTop: 0
  },
  'blockquote *:last-child': {
    marginBottom: 0
  }
});

const flushCSS = () => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("style", {
  id: "stitches",
  dangerouslySetInnerHTML: {
    __html: getCssText()
  }
}, void 0, false, {
  fileName: _jsxFileName,
  lineNumber: 217,
  columnNumber: 3
}, undefined);

const CssBaseline = ({
  children
}) => {
  globalStyles();
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)((external_root_React_commonjs2_react_commonjs_react_amd_react_default()).Fragment, {
    children: children
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 222,
    columnNumber: 10
  }, undefined);
};

const MemoCssBaseline = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(CssBaseline);
MemoCssBaseline.flush = flushCSS;
/* harmony default export */ const css_baseline = (MemoCssBaseline);
;// CONCATENATED MODULE: ../../node_modules/@react-stately/data/dist/module.js


function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $a3d5ea29a1945d34$exports = {};
$parcel$export($a3d5ea29a1945d34$exports, "useAsyncList", () => $a3d5ea29a1945d34$export$bc3384a35de93d66);

function $591e64c1b48762ea$export$762f73dccccd255d(options) {
  let {
    initialItems = [],
    initialSelectedKeys: initialSelectedKeys,
    getKey = item => item.id || item.key,
    filter: filter,
    initialFilterText = ''
  } = options; // Store both items and filteredItems in state so we can go back to the unfiltered list

  let [state, setState] = $kPu1K$useState({
    items: initialItems,
    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys || []),
    filterText: initialFilterText
  });
  let filteredItems = $kPu1K$useMemo(() => filter ? state.items.filter(item => filter(item, state.filterText)) : state.items, [state.items, state.filterText, filter]);
  return { ...state,
    items: filteredItems,
    ...$591e64c1b48762ea$export$79c0c687a5963b0a({
      getKey: getKey
    }, setState),

    getItem(key) {
      return state.items.find(item => getKey(item) === key);
    }

  };
}

function $591e64c1b48762ea$export$79c0c687a5963b0a(opts, dispatch) {
  let {
    cursor: cursor,
    getKey: getKey
  } = opts;
  return {
    setSelectedKeys(selectedKeys) {
      dispatch(state => ({ ...state,
        selectedKeys: selectedKeys
      }));
    },

    setFilterText(filterText) {
      dispatch(state => ({ ...state,
        filterText: filterText
      }));
    },

    insert(index, ...values) {
      dispatch(state => $591e64c1b48762ea$var$insert(state, index, ...values));
    },

    insertBefore(key, ...values) {
      dispatch(state => {
        let index = state.items.findIndex(item => getKey(item) === key);
        if (index === -1) return;
        return $591e64c1b48762ea$var$insert(state, index, ...values);
      });
    },

    insertAfter(key, ...values) {
      dispatch(state => {
        let index = state.items.findIndex(item => getKey(item) === key);
        if (index === -1) return;
        return $591e64c1b48762ea$var$insert(state, index + 1, ...values);
      });
    },

    prepend(...values) {
      dispatch(state => $591e64c1b48762ea$var$insert(state, 0, ...values));
    },

    append(...values) {
      dispatch(state => $591e64c1b48762ea$var$insert(state, state.items.length, ...values));
    },

    remove(...keys) {
      dispatch(state => {
        let keySet = new Set(keys);
        let items = state.items.filter(item => !keySet.has(getKey(item)));
        let selection = 'all';

        if (state.selectedKeys !== 'all') {
          selection = new Set(state.selectedKeys);

          for (let key of keys) selection.delete(key);
        }

        if (cursor == null && items.length === 0) selection = new Set();
        return { ...state,
          items: items,
          selectedKeys: selection
        };
      });
    },

    removeSelectedItems() {
      dispatch(state => {
        if (state.selectedKeys === 'all') return { ...state,
          items: [],
          selectedKeys: new Set()
        };
        let selectedKeys = state.selectedKeys;
        let items = state.items.filter(item => !selectedKeys.has(getKey(item)));
        return { ...state,
          items: items,
          selectedKeys: new Set()
        };
      });
    },

    move(key, toIndex) {
      dispatch(state => {
        let index = state.items.findIndex(item => getKey(item) === key);
        if (index === -1) return state;
        let copy = state.items.slice();
        let [item1] = copy.splice(index, 1);
        copy.splice(toIndex, 0, item1);
        return { ...state,
          items: copy
        };
      });
    },

    moveBefore(key1, keys) {
      dispatch(state => {
        let toIndex = state.items.findIndex(item => getKey(item) === key1);
        if (toIndex === -1) return state; // Find indices of keys to move. Sort them so that the order in the list is retained.

        let indices = keys.map(key => state.items.findIndex(item => getKey(item) === key)).sort();
        return $591e64c1b48762ea$var$move(state, indices, toIndex);
      });
    },

    moveAfter(key2, keys) {
      dispatch(state => {
        let toIndex = state.items.findIndex(item => getKey(item) === key2);
        if (toIndex === -1) return state;
        let indices = keys.map(key => state.items.findIndex(item => getKey(item) === key)).sort();
        return $591e64c1b48762ea$var$move(state, indices, toIndex + 1);
      });
    },

    update(key, newValue) {
      dispatch(state => {
        let index = state.items.findIndex(item => getKey(item) === key);
        if (index === -1) return state;
        return { ...state,
          items: [...state.items.slice(0, index), newValue, ...state.items.slice(index + 1)]
        };
      });
    }

  };
}

function $591e64c1b48762ea$var$insert(state, index, ...values) {
  return { ...state,
    items: [...state.items.slice(0, index), ...values, ...state.items.slice(index)]
  };
}

function $591e64c1b48762ea$var$move(state, indices, toIndex) {
  // Shift the target down by the number of items being moved from before the target
  for (let index of indices) if (index < toIndex) toIndex--;

  let moves = indices.map(from => ({
    from: from,
    to: toIndex++
  })); // Shift later from indices down if they have a larger index

  for (let i = 0; i < moves.length; i++) {
    let a = moves[i].from;

    for (let j = i; j < moves.length; j++) {
      let b = moves[j].from;
      if (b > a) moves[j].from--;
    }
  } // Interleave the moves so they can be applied one by one rather than all at once


  for (let i1 = 0; i1 < moves.length; i1++) {
    let a = moves[i1];

    for (let j = moves.length - 1; j > i1; j--) {
      let b = moves[j];
      if (b.from < a.to) a.to++;else b.from++;
    }
  }

  let copy = state.items.slice();

  for (let move of moves) {
    let [item] = copy.splice(move.from, 1);
    copy.splice(move.to, 0, item);
  }

  return { ...state,
    items: copy
  };
}

function $a3d5ea29a1945d34$var$reducer(data, action) {
  let selectedKeys;

  switch (data.state) {
    case 'idle':
    case 'error':
      switch (action.type) {
        case 'loading':
        case 'loadingMore':
        case 'sorting':
        case 'filtering':
          var _filterText, _sortDescriptor;

          return { ...data,
            filterText: (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText,
            state: action.type,
            // Reset items to an empty list if loading, but not when sorting.
            items: action.type === 'loading' ? [] : data.items,
            sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,
            abortController: action.abortController
          };

        case 'update':
          return { ...data,
            ...action.updater(data)
          };

        case 'success':
        case 'error':
          return data;

        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }

    case 'loading':
    case 'sorting':
    case 'filtering':
      switch (action.type) {
        case 'success':
          // Ignore if there is a newer abortcontroller in state.
          // This means that multiple requests were going at once.
          // We want to take only the latest result.
          if (action.abortController !== data.abortController) return data;

          var _selectedKeys;

          selectedKeys = (_selectedKeys = action.selectedKeys) !== null && _selectedKeys !== void 0 ? _selectedKeys : data.selectedKeys;

          var _filterText1, _sortDescriptor1;

          return { ...data,
            filterText: (_filterText1 = action.filterText) !== null && _filterText1 !== void 0 ? _filterText1 : data.filterText,
            state: 'idle',
            items: [...action.items],
            selectedKeys: selectedKeys === 'all' ? 'all' : new Set(selectedKeys),
            sortDescriptor: (_sortDescriptor1 = action.sortDescriptor) !== null && _sortDescriptor1 !== void 0 ? _sortDescriptor1 : data.sortDescriptor,
            abortController: null,
            cursor: action.cursor
          };

        case 'error':
          if (action.abortController !== data.abortController) return data;
          return { ...data,
            state: 'error',
            error: action.error,
            abortController: null
          };

        case 'loading':
        case 'loadingMore':
        case 'sorting':
        case 'filtering':
          // We're already loading, and another load was triggered at the same time.
          // We need to abort the previous load and start a new one.
          data.abortController.abort();

          var _filterText2;

          return { ...data,
            filterText: (_filterText2 = action.filterText) !== null && _filterText2 !== void 0 ? _filterText2 : data.filterText,
            state: action.type,
            // Reset items to an empty list if loading, but not when sorting.
            items: action.type === 'loading' ? [] : data.items,
            abortController: action.abortController
          };

        case 'update':
          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).
          // Update data but don't abort previous load.
          return { ...data,
            ...action.updater(data)
          };

        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }

    case 'loadingMore':
      switch (action.type) {
        case 'success':
          var _selectedKeys1;

          selectedKeys = data.selectedKeys === 'all' || action.selectedKeys === 'all' ? 'all' : new Set([...data.selectedKeys, ...((_selectedKeys1 = action.selectedKeys) !== null && _selectedKeys1 !== void 0 ? _selectedKeys1 : [])]);

          var _sortDescriptor2; // Append the new items


          return { ...data,
            state: 'idle',
            items: [...data.items, ...action.items],
            selectedKeys: selectedKeys,
            sortDescriptor: (_sortDescriptor2 = action.sortDescriptor) !== null && _sortDescriptor2 !== void 0 ? _sortDescriptor2 : data.sortDescriptor,
            abortController: null,
            cursor: action.cursor
          };

        case 'error':
          if (action.abortController !== data.abortController) return data;
          return { ...data,
            state: 'error',
            error: action.error
          };

        case 'loading':
        case 'sorting':
        case 'filtering':
          // We're already loading more, and another load was triggered at the same time.
          // We need to abort the previous load more and start a new one.
          data.abortController.abort();

          var _filterText3;

          return { ...data,
            filterText: (_filterText3 = action.filterText) !== null && _filterText3 !== void 0 ? _filterText3 : data.filterText,
            state: action.type,
            // Reset items to an empty list if loading, but not when sorting.
            items: action.type === 'loading' ? [] : data.items,
            abortController: action.abortController
          };

        case 'loadingMore':
          // If already loading more and another loading more is triggered, abort the new load more since
          // it is a duplicate request since the cursor hasn't been updated.
          // Do not overwrite the data.abortController
          action.abortController.abort();
          return data;

        case 'update':
          // We're already loading, and an update happened at the same time (e.g. selectedKey changed).
          // Update data but don't abort previous load.
          return { ...data,
            ...action.updater(data)
          };

        default:
          throw new Error(`Invalid action "${action.type}" in state "${data.state}"`);
      }

    default:
      throw new Error(`Invalid state "${data.state}"`);
  }
}

function $a3d5ea29a1945d34$export$bc3384a35de93d66(options) {
  const {
    load: load,
    sort: sort,
    initialSelectedKeys: initialSelectedKeys,
    initialSortDescriptor: initialSortDescriptor,
    getKey = item => item.id || item.key,
    initialFilterText = ''
  } = options;
  let [data, dispatch] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useReducer)($a3d5ea29a1945d34$var$reducer, {
    state: 'idle',
    error: null,
    items: [],
    selectedKeys: initialSelectedKeys === 'all' ? 'all' : new Set(initialSelectedKeys),
    sortDescriptor: initialSortDescriptor,
    filterText: initialFilterText
  });

  const dispatchFetch = async (action, fn) => {
    let abortController = new AbortController();

    try {
      dispatch({ ...action,
        abortController: abortController
      });

      var _filterText;

      let previousFilterText = (_filterText = action.filterText) !== null && _filterText !== void 0 ? _filterText : data.filterText;

      var _sortDescriptor;

      let response = await fn({
        items: data.items.slice(),
        selectedKeys: data.selectedKeys,
        sortDescriptor: (_sortDescriptor = action.sortDescriptor) !== null && _sortDescriptor !== void 0 ? _sortDescriptor : data.sortDescriptor,
        signal: abortController.signal,
        cursor: action.type === 'loadingMore' ? data.cursor : null,
        filterText: previousFilterText
      });

      var _filterText4;

      let filterText = (_filterText4 = response.filterText) !== null && _filterText4 !== void 0 ? _filterText4 : previousFilterText;
      dispatch({
        type: 'success',
        ...response,
        abortController: abortController
      }); // Fetch a new filtered list if filterText is updated via `load` response func rather than list.setFilterText
      // Only do this if not aborted (e.g. user triggers another filter action before load completes)

      if (filterText && filterText !== previousFilterText && !abortController.signal.aborted) dispatchFetch({
        type: 'filtering',
        filterText: filterText
      }, load);
    } catch (e) {
      dispatch({
        type: 'error',
        error: e,
        abortController: abortController
      });
    }
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    dispatchFetch({
      type: 'loading'
    }, load); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return {
    items: data.items,
    selectedKeys: data.selectedKeys,
    sortDescriptor: data.sortDescriptor,
    isLoading: data.state === 'loading' || data.state === 'loadingMore' || data.state === 'sorting' || data.state === 'filtering',
    loadingState: data.state,
    error: data.error,
    filterText: data.filterText,

    getItem(key) {
      return data.items.find(item => getKey(item) === key);
    },

    reload() {
      dispatchFetch({
        type: 'loading'
      }, load);
    },

    loadMore() {
      // Ignore if already loading more or if performing server side filtering.
      if (data.state === 'loadingMore' || data.state === 'filtering' || data.cursor == null) return;
      dispatchFetch({
        type: 'loadingMore'
      }, load);
    },

    sort(sortDescriptor) {
      dispatchFetch({
        type: 'sorting',
        sortDescriptor: sortDescriptor
      }, sort || load);
    },

    ...$591e64c1b48762ea$export$79c0c687a5963b0a({ ...options,
      getKey: getKey,
      cursor: data.cursor
    }, fn => {
      dispatch({
        type: 'update',
        updater: fn
      });
    }),

    setFilterText(filterText) {
      dispatchFetch({
        type: 'filtering',
        filterText: filterText
      }, load);
    }

  };
}

var $1a2469058070f762$exports = {};
$parcel$export($1a2469058070f762$exports, "useTreeData", () => $1a2469058070f762$export$d14e1352e21f4a16);

function $1a2469058070f762$export$d14e1352e21f4a16(options) {
  let {
    initialItems: initialItems1 = [],
    initialSelectedKeys: initialSelectedKeys,
    getKey = item => item.id || item.key,
    getChildren = item => item.children
  } = options;
  let map = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new Map(), []); // We only want to compute this on initial render.
  // eslint-disable-next-line react-hooks/exhaustive-deps

  let initialNodes = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => buildTree(initialItems1), []);
  let [items1, setItems] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialNodes);
  let [selectedKeys, setSelectedKeys] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(new Set(initialSelectedKeys || []));

  function buildTree(initialItems = [], parentKey) {
    return initialItems.map(item => {
      let node = {
        key: getKey(item),
        parentKey: parentKey,
        value: item,
        children: null
      };
      node.children = buildTree(getChildren(item), node.key);
      map.set(node.key, node);
      return node;
    });
  }

  function updateTree(items, key, update) {
    let node = map.get(key);
    if (!node) return items; // Create a new node. If null, then delete the node, otherwise replace.

    let newNode = update(node);
    if (newNode == null) deleteNode(node);else addNode(newNode); // Walk up the tree and update each parent to refer to the new chilren.

    while (node.parentKey) {
      let nextParent = map.get(node.parentKey);
      let copy = {
        key: nextParent.key,
        parentKey: nextParent.parentKey,
        value: nextParent.value,
        children: null
      };
      let children = nextParent.children;
      if (newNode == null) children = children.filter(c => c !== node);
      copy.children = children.map(child => {
        if (child === node) return newNode;
        return child;
      });
      map.set(copy.key, copy);
      newNode = copy;
      node = nextParent;
    }

    if (newNode == null) items = items.filter(c => c !== node);
    return items.map(item => {
      if (item === node) return newNode;
      return item;
    });
  }

  function addNode(node) {
    map.set(node.key, node);

    for (let child of node.children) addNode(child);
  }

  function deleteNode(node) {
    map.delete(node.key);

    for (let child of node.children) deleteNode(child);
  }

  return {
    items: items1,
    selectedKeys: selectedKeys,
    setSelectedKeys: setSelectedKeys,

    getItem(key) {
      return map.get(key);
    },

    insert(parentKey, index, ...values) {
      setItems(items => {
        let nodes = buildTree(values, parentKey); // If parentKey is null, insert into the root.

        if (parentKey == null) return [...items.slice(0, index), ...nodes, ...items.slice(index)]; // Otherwise, update the parent node and its ancestors.

        return updateTree(items, parentKey, parentNode => ({
          key: parentNode.key,
          parentKey: parentNode.parentKey,
          value: parentNode.value,
          children: [...parentNode.children.slice(0, index), ...nodes, ...parentNode.children.slice(index)]
        }));
      });
    },

    insertBefore(key, ...values) {
      let node = map.get(key);
      if (!node) return;
      let parentNode = map.get(node.parentKey);
      let nodes = parentNode ? parentNode.children : items1;
      let index = nodes.indexOf(node);
      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index, ...values);
    },

    insertAfter(key, ...values) {
      let node = map.get(key);
      if (!node) return;
      let parentNode = map.get(node.parentKey);
      let nodes = parentNode ? parentNode.children : items1;
      let index = nodes.indexOf(node);
      this.insert(parentNode === null || parentNode === void 0 ? void 0 : parentNode.key, index + 1, ...values);
    },

    prepend(parentKey, ...values) {
      this.insert(parentKey, 0, ...values);
    },

    append(parentKey, ...values) {
      if (parentKey == null) this.insert(null, items1.length, ...values);else {
        let parentNode = map.get(parentKey);
        if (!parentNode) return;
        this.insert(parentKey, parentNode.children.length, ...values);
      }
    },

    remove(...keys) {
      let newItems = items1;

      for (let key of keys) newItems = updateTree(newItems, key, () => null);

      setItems(newItems);
      let selection = new Set(selectedKeys);

      for (let key1 of selectedKeys) if (!map.has(key1)) selection.delete(key1);

      setSelectedKeys(selection);
    },

    removeSelectedItems() {
      this.remove(...selectedKeys);
    },

    move(key, toParentKey, index) {
      setItems(items => {
        let node = map.get(key);
        if (!node) return items;
        items = updateTree(items, key, () => null);
        const movedNode = { ...node,
          parentKey: toParentKey
        };
        return updateTree(items, toParentKey, parentNode => ({
          key: parentNode.key,
          parentKey: parentNode.parentKey,
          value: parentNode.value,
          children: [...parentNode.children.slice(0, index), movedNode, ...parentNode.children.slice(index)]
        }));
      });
    },

    update(oldKey, newValue) {
      setItems(items => updateTree(items, oldKey, oldNode => {
        let node = {
          key: oldNode.key,
          parentKey: oldNode.parentKey,
          value: newValue,
          children: null
        };
        node.children = buildTree(getChildren(newValue), node.key);
        return node;
      }));
    }

  };
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/ssr/dist/module.js


function module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $9d939cbc98267846$exports = {};
module_$parcel$export($9d939cbc98267846$exports, "SSRProvider", () => $9d939cbc98267846$export$9f8ac96af4b1b2ae);
module_$parcel$export($9d939cbc98267846$exports, "useSSRSafeId", () => $9d939cbc98267846$export$619500959fc48b26);
module_$parcel$export($9d939cbc98267846$exports, "useIsSSR", () => $9d939cbc98267846$export$535bd6ca7f90a273); // Default context value to use in case there is no SSRProvider. This is fine for
// client-only apps. In order to support multiple copies of React Aria potentially
// being on the page at once, the prefix is set to a random number. SSRProvider
// will reset this to zero for consistency between server and client, so in the
// SSR case multiple copies of React Aria is not supported.

const $9d939cbc98267846$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 10000000000)),
  current: 0
};
const $9d939cbc98267846$var$SSRContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext($9d939cbc98267846$var$defaultContext);

function $9d939cbc98267846$export$9f8ac96af4b1b2ae(props) {
  let cur = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($9d939cbc98267846$var$SSRContext);
  let value = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    // If this is the first SSRProvider, start with an empty string prefix, otherwise
    // append and increment the counter.
    prefix: cur === $9d939cbc98267846$var$defaultContext ? '' : `${cur.prefix}-${++cur.current}`,
    current: 0
  }), [cur]);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($9d939cbc98267846$var$SSRContext.Provider, {
    value: value
  }, props.children);
}

let $9d939cbc98267846$var$canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);

function $9d939cbc98267846$export$619500959fc48b26(defaultId) {
  let ctx = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($9d939cbc98267846$var$SSRContext); // If we are rendering in a non-DOM environment, and there's no SSRProvider,
  // provide a warning to hint to the developer to add one.

  if (ctx === $9d939cbc98267846$var$defaultContext && !$9d939cbc98267846$var$canUseDOM) console.warn('When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.');
  return (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [defaultId]);
}

function $9d939cbc98267846$export$535bd6ca7f90a273() {
  let cur = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($9d939cbc98267846$var$SSRContext);
  let isInSSRContext = cur !== $9d939cbc98267846$var$defaultContext;
  let [isSSR, setIsSSR] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isInSSRContext); // If on the client, and the component was initially server rendered,
  // then schedule a layout effect to update the component after hydration.

  if (typeof window !== 'undefined' && isInSSRContext) // This if statement technically breaks the rules of hooks, but is safe
    // because the condition never changes after mounting.
    // eslint-disable-next-line react-hooks/rules-of-hooks
    (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useLayoutEffect)(() => {
      setIsSSR(false);
    }, []);
  return isSSR;
}


;// CONCATENATED MODULE: ../../node_modules/tslib/tslib.es6.js
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
var __createBinding = Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function () {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
};
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}
/** @deprecated */

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
/** @deprecated */

function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}
;

var __setModuleDefault = Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

  __setModuleDefault(result, mod);

  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
;// CONCATENATED MODULE: ../../node_modules/@formatjs/icu-messageformat-parser/lib/error.js
var ErrorKind;

(function (ErrorKind) {
  /** Argument is unclosed (e.g. `{0`) */
  ErrorKind[ErrorKind["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
  /** Argument is empty (e.g. `{}`). */

  ErrorKind[ErrorKind["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
  /** Argument is malformed (e.g. `{foo!}``) */

  ErrorKind[ErrorKind["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
  /** Expect an argument type (e.g. `{foo,}`) */

  ErrorKind[ErrorKind["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
  /** Unsupported argument type (e.g. `{foo,foo}`) */

  ErrorKind[ErrorKind["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
  /** Expect an argument style (e.g. `{foo, number, }`) */

  ErrorKind[ErrorKind["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
  /** The number skeleton is invalid. */

  ErrorKind[ErrorKind["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
  /** The date time skeleton is invalid. */

  ErrorKind[ErrorKind["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
  /** Exepct a number skeleton following the `::` (e.g. `{foo, number, ::}`) */

  ErrorKind[ErrorKind["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
  /** Exepct a date time skeleton following the `::` (e.g. `{foo, date, ::}`) */

  ErrorKind[ErrorKind["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
  /** Unmatched apostrophes in the argument style (e.g. `{foo, number, 'test`) */

  ErrorKind[ErrorKind["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
  /** Missing select argument options (e.g. `{foo, select}`) */

  ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
  /** Expecting an offset value in `plural` or `selectordinal` argument (e.g `{foo, plural, offset}`) */

  ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
  /** Offset value in `plural` or `selectordinal` is invalid (e.g. `{foo, plural, offset: x}`) */

  ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
  /** Expecting a selector in `select` argument (e.g `{foo, select}`) */

  ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
  /** Expecting a selector in `plural` or `selectordinal` argument (e.g `{foo, plural}`) */

  ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
  /** Expecting a message fragment after the `select` selector (e.g. `{foo, select, apple}`) */

  ErrorKind[ErrorKind["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
  /**
   * Expecting a message fragment after the `plural` or `selectordinal` selector
   * (e.g. `{foo, plural, one}`)
   */

  ErrorKind[ErrorKind["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
  /** Selector in `plural` or `selectordinal` is malformed (e.g. `{foo, plural, =x {#}}`) */

  ErrorKind[ErrorKind["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
  /**
   * Duplicate selectors in `plural` or `selectordinal` argument.
   * (e.g. {foo, plural, one {#} one {#}})
   */

  ErrorKind[ErrorKind["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
  /** Duplicate selectors in `select` argument.
   * (e.g. {foo, select, apple {apple} apple {apple}})
   */

  ErrorKind[ErrorKind["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
  /** Plural or select argument option must have `other` clause. */

  ErrorKind[ErrorKind["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
  /** The tag is malformed. (e.g. `<bold!>foo</bold!>) */

  ErrorKind[ErrorKind["INVALID_TAG"] = 23] = "INVALID_TAG";
  /** The tag name is invalid. (e.g. `<123>foo</123>`) */

  ErrorKind[ErrorKind["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
  /** The closing tag does not match the opening tag. (e.g. `<bold>foo</italic>`) */

  ErrorKind[ErrorKind["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
  /** The opening tag has unmatched closing tag. (e.g. `<bold>foo`) */

  ErrorKind[ErrorKind["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
})(ErrorKind || (ErrorKind = {}));
;// CONCATENATED MODULE: ../../node_modules/@formatjs/icu-messageformat-parser/lib/types.js
var TYPE;

(function (TYPE) {
  /**
   * Raw text
   */
  TYPE[TYPE["literal"] = 0] = "literal";
  /**
   * Variable w/o any format, e.g `var` in `this is a {var}`
   */

  TYPE[TYPE["argument"] = 1] = "argument";
  /**
   * Variable w/ number format
   */

  TYPE[TYPE["number"] = 2] = "number";
  /**
   * Variable w/ date format
   */

  TYPE[TYPE["date"] = 3] = "date";
  /**
   * Variable w/ time format
   */

  TYPE[TYPE["time"] = 4] = "time";
  /**
   * Variable w/ select format
   */

  TYPE[TYPE["select"] = 5] = "select";
  /**
   * Variable w/ plural format
   */

  TYPE[TYPE["plural"] = 6] = "plural";
  /**
   * Only possible within plural argument.
   * This is the `#` symbol that will be substituted with the count.
   */

  TYPE[TYPE["pound"] = 7] = "pound";
  /**
   * XML-like tag
   */

  TYPE[TYPE["tag"] = 8] = "tag";
})(TYPE || (TYPE = {}));

var SKELETON_TYPE;

(function (SKELETON_TYPE) {
  SKELETON_TYPE[SKELETON_TYPE["number"] = 0] = "number";
  SKELETON_TYPE[SKELETON_TYPE["dateTime"] = 1] = "dateTime";
})(SKELETON_TYPE || (SKELETON_TYPE = {}));
/**
 * Type Guards
 */


function isLiteralElement(el) {
  return el.type === TYPE.literal;
}
function isArgumentElement(el) {
  return el.type === TYPE.argument;
}
function isNumberElement(el) {
  return el.type === TYPE.number;
}
function isDateElement(el) {
  return el.type === TYPE.date;
}
function isTimeElement(el) {
  return el.type === TYPE.time;
}
function isSelectElement(el) {
  return el.type === TYPE.select;
}
function isPluralElement(el) {
  return el.type === TYPE.plural;
}
function isPoundElement(el) {
  return el.type === TYPE.pound;
}
function isTagElement(el) {
  return el.type === TYPE.tag;
}
function isNumberSkeleton(el) {
  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.number);
}
function isDateTimeSkeleton(el) {
  return !!(el && typeof el === 'object' && el.type === SKELETON_TYPE.dateTime);
}
function createLiteralElement(value) {
  return {
    type: TYPE.literal,
    value: value
  };
}
function createNumberElement(value, style) {
  return {
    type: TYPE.number,
    value: value,
    style: style
  };
}
;// CONCATENATED MODULE: ../../node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js
// @generated from regex-gen.ts
var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;
var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/;
;// CONCATENATED MODULE: ../../node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js
/**
 * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
 * with some tweaks
 */
var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
/**
 * Parse Date time skeleton into Intl.DateTimeFormatOptions
 * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * @public
 * @param skeleton skeleton string
 */

function parseDateTimeSkeleton(skeleton) {
  var result = {};
  skeleton.replace(DATE_TIME_REGEX, function (match) {
    var len = match.length;

    switch (match[0]) {
      // Era
      case 'G':
        result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
        break;
      // Year

      case 'y':
        result.year = len === 2 ? '2-digit' : 'numeric';
        break;

      case 'Y':
      case 'u':
      case 'U':
      case 'r':
        throw new RangeError('`Y/u/U/r` (year) patterns are not supported, use `y` instead');
      // Quarter

      case 'q':
      case 'Q':
        throw new RangeError('`q/Q` (quarter) patterns are not supported');
      // Month

      case 'M':
      case 'L':
        result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
        break;
      // Week

      case 'w':
      case 'W':
        throw new RangeError('`w/W` (week) patterns are not supported');

      case 'd':
        result.day = ['numeric', '2-digit'][len - 1];
        break;

      case 'D':
      case 'F':
      case 'g':
        throw new RangeError('`D/F/g` (day) patterns are not supported, use `d` instead');
      // Weekday

      case 'E':
        result.weekday = len === 4 ? 'short' : len === 5 ? 'narrow' : 'short';
        break;

      case 'e':
        if (len < 4) {
          throw new RangeError('`e..eee` (weekday) patterns are not supported');
        }

        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
        break;

      case 'c':
        if (len < 4) {
          throw new RangeError('`c..ccc` (weekday) patterns are not supported');
        }

        result.weekday = ['short', 'long', 'narrow', 'short'][len - 4];
        break;
      // Period

      case 'a':
        // AM, PM
        result.hour12 = true;
        break;

      case 'b': // am, pm, noon, midnight

      case 'B':
        // flexible day periods
        throw new RangeError('`b/B` (period) patterns are not supported, use `a` instead');
      // Hour

      case 'h':
        result.hourCycle = 'h12';
        result.hour = ['numeric', '2-digit'][len - 1];
        break;

      case 'H':
        result.hourCycle = 'h23';
        result.hour = ['numeric', '2-digit'][len - 1];
        break;

      case 'K':
        result.hourCycle = 'h11';
        result.hour = ['numeric', '2-digit'][len - 1];
        break;

      case 'k':
        result.hourCycle = 'h24';
        result.hour = ['numeric', '2-digit'][len - 1];
        break;

      case 'j':
      case 'J':
      case 'C':
        throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
      // Minute

      case 'm':
        result.minute = ['numeric', '2-digit'][len - 1];
        break;
      // Second

      case 's':
        result.second = ['numeric', '2-digit'][len - 1];
        break;

      case 'S':
      case 'A':
        throw new RangeError('`S/A` (second) patterns are not supported, use `s` instead');
      // Zone

      case 'z':
        // 1..3, 4: specific non-location format
        result.timeZoneName = len < 4 ? 'short' : 'long';
        break;

      case 'Z': // 1..3, 4, 5: The ISO8601 varios formats

      case 'O': // 1, 4: miliseconds in day short, long

      case 'v': // 1, 4: generic non-location format

      case 'V': // 1, 2, 3, 4: time zone ID or city

      case 'X': // 1, 2, 3, 4: The ISO8601 varios formats

      case 'x':
        // 1, 2, 3, 4: The ISO8601 varios formats
        throw new RangeError('`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead');
    }

    return '';
  });
  return result;
}
;// CONCATENATED MODULE: ../../node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js
// @generated from regex-gen.ts
var regex_generated_WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;
;// CONCATENATED MODULE: ../../node_modules/@formatjs/icu-skeleton-parser/lib/number.js


function parseNumberSkeletonFromString(skeleton) {
  if (skeleton.length === 0) {
    throw new Error('Number skeleton cannot be empty');
  } // Parse the skeleton


  var stringTokens = skeleton.split(regex_generated_WHITE_SPACE_REGEX).filter(function (x) {
    return x.length > 0;
  });
  var tokens = [];

  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
    var stringToken = stringTokens_1[_i];
    var stemAndOptions = stringToken.split('/');

    if (stemAndOptions.length === 0) {
      throw new Error('Invalid number skeleton');
    }

    var stem = stemAndOptions[0],
        options = stemAndOptions.slice(1);

    for (var _a = 0, options_1 = options; _a < options_1.length; _a++) {
      var option = options_1[_a];

      if (option.length === 0) {
        throw new Error('Invalid number skeleton');
      }
    }

    tokens.push({
      stem: stem,
      options: options
    });
  }

  return tokens;
}

function icuUnitToEcma(unit) {
  return unit.replace(/^(.*?)-/, '');
}

var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;

function parseSignificantPrecision(str) {
  var result = {};

  if (str[str.length - 1] === 'r') {
    result.roundingPriority = 'morePrecision';
  } else if (str[str.length - 1] === 's') {
    result.roundingPriority = 'lessPrecision';
  }

  str.replace(SIGNIFICANT_PRECISION_REGEX, function (_, g1, g2) {
    // @@@ case
    if (typeof g2 !== 'string') {
      result.minimumSignificantDigits = g1.length;
      result.maximumSignificantDigits = g1.length;
    } // @@@+ case
    else if (g2 === '+') {
      result.minimumSignificantDigits = g1.length;
    } // .### case
    else if (g1[0] === '#') {
      result.maximumSignificantDigits = g1.length;
    } // .@@## or .@@@ case
    else {
      result.minimumSignificantDigits = g1.length;
      result.maximumSignificantDigits = g1.length + (typeof g2 === 'string' ? g2.length : 0);
    }

    return '';
  });
  return result;
}

function parseSign(str) {
  switch (str) {
    case 'sign-auto':
      return {
        signDisplay: 'auto'
      };

    case 'sign-accounting':
    case '()':
      return {
        currencySign: 'accounting'
      };

    case 'sign-always':
    case '+!':
      return {
        signDisplay: 'always'
      };

    case 'sign-accounting-always':
    case '()!':
      return {
        signDisplay: 'always',
        currencySign: 'accounting'
      };

    case 'sign-except-zero':
    case '+?':
      return {
        signDisplay: 'exceptZero'
      };

    case 'sign-accounting-except-zero':
    case '()?':
      return {
        signDisplay: 'exceptZero',
        currencySign: 'accounting'
      };

    case 'sign-never':
    case '+_':
      return {
        signDisplay: 'never'
      };
  }
}

function parseConciseScientificAndEngineeringStem(stem) {
  // Engineering
  var result;

  if (stem[0] === 'E' && stem[1] === 'E') {
    result = {
      notation: 'engineering'
    };
    stem = stem.slice(2);
  } else if (stem[0] === 'E') {
    result = {
      notation: 'scientific'
    };
    stem = stem.slice(1);
  }

  if (result) {
    var signDisplay = stem.slice(0, 2);

    if (signDisplay === '+!') {
      result.signDisplay = 'always';
      stem = stem.slice(2);
    } else if (signDisplay === '+?') {
      result.signDisplay = 'exceptZero';
      stem = stem.slice(2);
    }

    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
      throw new Error('Malformed concise eng/scientific notation');
    }

    result.minimumIntegerDigits = stem.length;
  }

  return result;
}

function parseNotationOptions(opt) {
  var result = {};
  var signOpts = parseSign(opt);

  if (signOpts) {
    return signOpts;
  }

  return result;
}
/**
 * https://github.com/unicode-org/icu/blob/master/docs/userguide/format_parse/numbers/skeletons.md#skeleton-stems-and-options
 */


function parseNumberSkeleton(tokens) {
  var result = {};

  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];

    switch (token.stem) {
      case 'percent':
      case '%':
        result.style = 'percent';
        continue;

      case '%x100':
        result.style = 'percent';
        result.scale = 100;
        continue;

      case 'currency':
        result.style = 'currency';
        result.currency = token.options[0];
        continue;

      case 'group-off':
      case ',_':
        result.useGrouping = false;
        continue;

      case 'precision-integer':
      case '.':
        result.maximumFractionDigits = 0;
        continue;

      case 'measure-unit':
      case 'unit':
        result.style = 'unit';
        result.unit = icuUnitToEcma(token.options[0]);
        continue;

      case 'compact-short':
      case 'K':
        result.notation = 'compact';
        result.compactDisplay = 'short';
        continue;

      case 'compact-long':
      case 'KK':
        result.notation = 'compact';
        result.compactDisplay = 'long';
        continue;

      case 'scientific':
        result = __assign(__assign(__assign({}, result), {
          notation: 'scientific'
        }), token.options.reduce(function (all, opt) {
          return __assign(__assign({}, all), parseNotationOptions(opt));
        }, {}));
        continue;

      case 'engineering':
        result = __assign(__assign(__assign({}, result), {
          notation: 'engineering'
        }), token.options.reduce(function (all, opt) {
          return __assign(__assign({}, all), parseNotationOptions(opt));
        }, {}));
        continue;

      case 'notation-simple':
        result.notation = 'standard';
        continue;
      // https://github.com/unicode-org/icu/blob/master/icu4c/source/i18n/unicode/unumberformatter.h

      case 'unit-width-narrow':
        result.currencyDisplay = 'narrowSymbol';
        result.unitDisplay = 'narrow';
        continue;

      case 'unit-width-short':
        result.currencyDisplay = 'code';
        result.unitDisplay = 'short';
        continue;

      case 'unit-width-full-name':
        result.currencyDisplay = 'name';
        result.unitDisplay = 'long';
        continue;

      case 'unit-width-iso-code':
        result.currencyDisplay = 'symbol';
        continue;

      case 'scale':
        result.scale = parseFloat(token.options[0]);
        continue;
      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width

      case 'integer-width':
        if (token.options.length > 1) {
          throw new RangeError('integer-width stems only accept a single optional option');
        }

        token.options[0].replace(INTEGER_WIDTH_REGEX, function (_, g1, g2, g3, g4, g5) {
          if (g1) {
            result.minimumIntegerDigits = g2.length;
          } else if (g3 && g4) {
            throw new Error('We currently do not support maximum integer digits');
          } else if (g5) {
            throw new Error('We currently do not support exact integer digits');
          }

          return '';
        });
        continue;
    } // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#integer-width


    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
      result.minimumIntegerDigits = token.stem.length;
      continue;
    }

    if (FRACTION_PRECISION_REGEX.test(token.stem)) {
      // Precision
      // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#fraction-precision
      // precision-integer case
      if (token.options.length > 1) {
        throw new RangeError('Fraction-precision stems only accept a single optional option');
      }

      token.stem.replace(FRACTION_PRECISION_REGEX, function (_, g1, g2, g3, g4, g5) {
        // .000* case (before ICU67 it was .000+)
        if (g2 === '*') {
          result.minimumFractionDigits = g1.length;
        } // .### case
        else if (g3 && g3[0] === '#') {
          result.maximumFractionDigits = g3.length;
        } // .00## case
        else if (g4 && g5) {
          result.minimumFractionDigits = g4.length;
          result.maximumFractionDigits = g4.length + g5.length;
        } else {
          result.minimumFractionDigits = g1.length;
          result.maximumFractionDigits = g1.length;
        }

        return '';
      });
      var opt = token.options[0]; // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#trailing-zero-display

      if (opt === 'w') {
        result = __assign(__assign({}, result), {
          trailingZeroDisplay: 'stripIfInteger'
        });
      } else if (opt) {
        result = __assign(__assign({}, result), parseSignificantPrecision(opt));
      }

      continue;
    } // https://unicode-org.github.io/icu/userguide/format_parse/numbers/skeletons.html#significant-digits-precision


    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
      result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));
      continue;
    }

    var signOpts = parseSign(token.stem);

    if (signOpts) {
      result = __assign(__assign({}, result), signOpts);
    }

    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);

    if (conciseScientificAndEngineeringOpts) {
      result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);
    }
  }

  return result;
}
;// CONCATENATED MODULE: ../../node_modules/@formatjs/icu-messageformat-parser/lib/parser.js
var _a;






var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));

function createLocation(start, end) {
  return {
    start: start,
    end: end
  };
} // #region Ponyfills
// Consolidate these variables up top for easier toggling during debugging


var hasNativeStartsWith = !!String.prototype.startsWith;
var hasNativeFromCodePoint = !!String.fromCodePoint;
var hasNativeFromEntries = !!Object.fromEntries;
var hasNativeCodePointAt = !!String.prototype.codePointAt;
var hasTrimStart = !!String.prototype.trimStart;
var hasTrimEnd = !!String.prototype.trimEnd;
var hasNativeIsSafeInteger = !!Number.isSafeInteger;
var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function (n) {
  return typeof n === 'number' && isFinite(n) && Math.floor(n) === n && Math.abs(n) <= 0x1fffffffffffff;
}; // IE11 does not support y and u.

var REGEX_SUPPORTS_U_AND_Y = true;

try {
  var parser_re = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');
  /**
   * legacy Edge or Xbox One browser
   * Unicode flag support: supported
   * Pattern_Syntax support: not supported
   * See https://github.com/formatjs/formatjs/issues/2822
   */

  REGEX_SUPPORTS_U_AND_Y = ((_a = parser_re.exec('a')) === null || _a === void 0 ? void 0 : _a[0]) === 'a';
} catch (_) {
  REGEX_SUPPORTS_U_AND_Y = false;
}

var startsWith = hasNativeStartsWith ? // Native
function startsWith(s, search, position) {
  return s.startsWith(search, position);
} : // For IE11
function startsWith(s, search, position) {
  return s.slice(position, position + search.length) === search;
};
var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : // IE11
function fromCodePoint() {
  var codePoints = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    codePoints[_i] = arguments[_i];
  }

  var elements = '';
  var length = codePoints.length;
  var i = 0;
  var code;

  while (length > i) {
    code = codePoints[i++];
    if (code > 0x10ffff) throw RangeError(code + ' is not a valid code point');
    elements += code < 0x10000 ? String.fromCharCode(code) : String.fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00);
  }

  return elements;
};
var fromEntries = // native
hasNativeFromEntries ? Object.fromEntries : // Ponyfill
function fromEntries(entries) {
  var obj = {};

  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
    var _a = entries_1[_i],
        k = _a[0],
        v = _a[1];
    obj[k] = v;
  }

  return obj;
};
var codePointAt = hasNativeCodePointAt ? // Native
function codePointAt(s, index) {
  return s.codePointAt(index);
} : // IE 11
function codePointAt(s, index) {
  var size = s.length;

  if (index < 0 || index >= size) {
    return undefined;
  }

  var first = s.charCodeAt(index);
  var second;
  return first < 0xd800 || first > 0xdbff || index + 1 === size || (second = s.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? first : (first - 0xd800 << 10) + (second - 0xdc00) + 0x10000;
};
var trimStart = hasTrimStart ? // Native
function trimStart(s) {
  return s.trimStart();
} : // Ponyfill
function trimStart(s) {
  return s.replace(SPACE_SEPARATOR_START_REGEX, '');
};
var trimEnd = hasTrimEnd ? // Native
function trimEnd(s) {
  return s.trimEnd();
} : // Ponyfill
function trimEnd(s) {
  return s.replace(SPACE_SEPARATOR_END_REGEX, '');
}; // Prevent minifier to translate new RegExp to literal form that might cause syntax error on IE11.

function RE(s, flag) {
  return new RegExp(s, flag);
} // #endregion


var matchIdentifierAtIndex;

if (REGEX_SUPPORTS_U_AND_Y) {
  // Native
  var IDENTIFIER_PREFIX_RE_1 = RE('([^\\p{White_Space}\\p{Pattern_Syntax}]*)', 'yu');

  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
    var _a;

    IDENTIFIER_PREFIX_RE_1.lastIndex = index;
    var match = IDENTIFIER_PREFIX_RE_1.exec(s);
    return (_a = match[1]) !== null && _a !== void 0 ? _a : '';
  };
} else {
  // IE11
  matchIdentifierAtIndex = function matchIdentifierAtIndex(s, index) {
    var match = [];

    while (true) {
      var c = codePointAt(s, index);

      if (c === undefined || _isWhiteSpace(c) || _isPatternSyntax(c)) {
        break;
      }

      match.push(c);
      index += c >= 0x10000 ? 2 : 1;
    }

    return fromCodePoint.apply(void 0, match);
  };
}

var Parser =
/** @class */
function () {
  function Parser(message, options) {
    if (options === void 0) {
      options = {};
    }

    this.message = message;
    this.position = {
      offset: 0,
      line: 1,
      column: 1
    };
    this.ignoreTag = !!options.ignoreTag;
    this.requiresOtherClause = !!options.requiresOtherClause;
    this.shouldParseSkeletons = !!options.shouldParseSkeletons;
  }

  Parser.prototype.parse = function () {
    if (this.offset() !== 0) {
      throw Error('parser can only be used once');
    }

    return this.parseMessage(0, '', false);
  };

  Parser.prototype.parseMessage = function (nestingLevel, parentArgType, expectingCloseTag) {
    var elements = [];

    while (!this.isEOF()) {
      var char = this.char();

      if (char === 123
      /* `{` */
      ) {
        var result = this.parseArgument(nestingLevel, expectingCloseTag);

        if (result.err) {
          return result;
        }

        elements.push(result.val);
      } else if (char === 125
      /* `}` */
      && nestingLevel > 0) {
        break;
      } else if (char === 35
      /* `#` */
      && (parentArgType === 'plural' || parentArgType === 'selectordinal')) {
        var position = this.clonePosition();
        this.bump();
        elements.push({
          type: TYPE.pound,
          location: createLocation(position, this.clonePosition())
        });
      } else if (char === 60
      /* `<` */
      && !this.ignoreTag && this.peek() === 47 // char code for '/'
      ) {
        if (expectingCloseTag) {
          break;
        } else {
          return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
        }
      } else if (char === 60
      /* `<` */
      && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
        var result = this.parseTag(nestingLevel, parentArgType);

        if (result.err) {
          return result;
        }

        elements.push(result.val);
      } else {
        var result = this.parseLiteral(nestingLevel, parentArgType);

        if (result.err) {
          return result;
        }

        elements.push(result.val);
      }
    }

    return {
      val: elements,
      err: null
    };
  };
  /**
   * A tag name must start with an ASCII lower/upper case letter. The grammar is based on the
   * [custom element name][] except that a dash is NOT always mandatory and uppercase letters
   * are accepted:
   *
   * ```
   * tag ::= "<" tagName (whitespace)* "/>" | "<" tagName (whitespace)* ">" message "</" tagName (whitespace)* ">"
   * tagName ::= [a-z] (PENChar)*
   * PENChar ::=
   *     "-" | "." | [0-9] | "_" | [a-z] | [A-Z] | #xB7 | [#xC0-#xD6] | [#xD8-#xF6] | [#xF8-#x37D] |
   *     [#x37F-#x1FFF] | [#x200C-#x200D] | [#x203F-#x2040] | [#x2070-#x218F] | [#x2C00-#x2FEF] |
   *     [#x3001-#xD7FF] | [#xF900-#xFDCF] | [#xFDF0-#xFFFD] | [#x10000-#xEFFFF]
   * ```
   *
   * [custom element name]: https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
   * NOTE: We're a bit more lax here since HTML technically does not allow uppercase HTML element but we do
   * since other tag-based engines like React allow it
   */


  Parser.prototype.parseTag = function (nestingLevel, parentArgType) {
    var startPosition = this.clonePosition();
    this.bump(); // `<`

    var tagName = this.parseTagName();
    this.bumpSpace();

    if (this.bumpIf('/>')) {
      // Self closing tag
      return {
        val: {
          type: TYPE.literal,
          value: "<".concat(tagName, "/>"),
          location: createLocation(startPosition, this.clonePosition())
        },
        err: null
      };
    } else if (this.bumpIf('>')) {
      var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);

      if (childrenResult.err) {
        return childrenResult;
      }

      var children = childrenResult.val; // Expecting a close tag

      var endTagStartPosition = this.clonePosition();

      if (this.bumpIf('</')) {
        if (this.isEOF() || !_isAlpha(this.char())) {
          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
        }

        var closingTagNameStartPosition = this.clonePosition();
        var closingTagName = this.parseTagName();

        if (tagName !== closingTagName) {
          return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
        }

        this.bumpSpace();

        if (!this.bumpIf('>')) {
          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
        }

        return {
          val: {
            type: TYPE.tag,
            value: tagName,
            children: children,
            location: createLocation(startPosition, this.clonePosition())
          },
          err: null
        };
      } else {
        return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
      }
    } else {
      return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
    }
  };
  /**
   * This method assumes that the caller has peeked ahead for the first tag character.
   */


  Parser.prototype.parseTagName = function () {
    var startOffset = this.offset();
    this.bump(); // the first tag name character

    while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
      this.bump();
    }

    return this.message.slice(startOffset, this.offset());
  };

  Parser.prototype.parseLiteral = function (nestingLevel, parentArgType) {
    var start = this.clonePosition();
    var value = '';

    while (true) {
      var parseQuoteResult = this.tryParseQuote(parentArgType);

      if (parseQuoteResult) {
        value += parseQuoteResult;
        continue;
      }

      var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);

      if (parseUnquotedResult) {
        value += parseUnquotedResult;
        continue;
      }

      var parseLeftAngleResult = this.tryParseLeftAngleBracket();

      if (parseLeftAngleResult) {
        value += parseLeftAngleResult;
        continue;
      }

      break;
    }

    var location = createLocation(start, this.clonePosition());
    return {
      val: {
        type: TYPE.literal,
        value: value,
        location: location
      },
      err: null
    };
  };

  Parser.prototype.tryParseLeftAngleBracket = function () {
    if (!this.isEOF() && this.char() === 60
    /* `<` */
    && (this.ignoreTag || // If at the opening tag or closing tag position, bail.
    !_isAlphaOrSlash(this.peek() || 0))) {
      this.bump(); // `<`

      return '<';
    }

    return null;
  };
  /**
   * Starting with ICU 4.8, an ASCII apostrophe only starts quoted text if it immediately precedes
   * a character that requires quoting (that is, "only where needed"), and works the same in
   * nested messages as on the top level of the pattern. The new behavior is otherwise compatible.
   */


  Parser.prototype.tryParseQuote = function (parentArgType) {
    if (this.isEOF() || this.char() !== 39
    /* `'` */
    ) {
      return null;
    } // Parse escaped char following the apostrophe, or early return if there is no escaped char.
    // Check if is valid escaped character


    switch (this.peek()) {
      case 39
      /* `'` */
      :
        // double quote, should return as a single quote.
        this.bump();
        this.bump();
        return "'";
      // '{', '<', '>', '}'

      case 123:
      case 60:
      case 62:
      case 125:
        break;

      case 35:
        // '#'
        if (parentArgType === 'plural' || parentArgType === 'selectordinal') {
          break;
        }

        return null;

      default:
        return null;
    }

    this.bump(); // apostrophe

    var codePoints = [this.char()]; // escaped char

    this.bump(); // read chars until the optional closing apostrophe is found

    while (!this.isEOF()) {
      var ch = this.char();

      if (ch === 39
      /* `'` */
      ) {
        if (this.peek() === 39
        /* `'` */
        ) {
          codePoints.push(39); // Bump one more time because we need to skip 2 characters.

          this.bump();
        } else {
          // Optional closing apostrophe.
          this.bump();
          break;
        }
      } else {
        codePoints.push(ch);
      }

      this.bump();
    }

    return fromCodePoint.apply(void 0, codePoints);
  };

  Parser.prototype.tryParseUnquoted = function (nestingLevel, parentArgType) {
    if (this.isEOF()) {
      return null;
    }

    var ch = this.char();

    if (ch === 60
    /* `<` */
    || ch === 123
    /* `{` */
    || ch === 35
    /* `#` */
    && (parentArgType === 'plural' || parentArgType === 'selectordinal') || ch === 125
    /* `}` */
    && nestingLevel > 0) {
      return null;
    } else {
      this.bump();
      return fromCodePoint(ch);
    }
  };

  Parser.prototype.parseArgument = function (nestingLevel, expectingCloseTag) {
    var openingBracePosition = this.clonePosition();
    this.bump(); // `{`

    this.bumpSpace();

    if (this.isEOF()) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }

    if (this.char() === 125
    /* `}` */
    ) {
      this.bump();
      return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    } // argument name


    var value = this.parseIdentifierIfPossible().value;

    if (!value) {
      return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }

    this.bumpSpace();

    if (this.isEOF()) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }

    switch (this.char()) {
      // Simple argument: `{name}`
      case 125
      /* `}` */
      :
        {
          this.bump(); // `}`

          return {
            val: {
              type: TYPE.argument,
              // value does not include the opening and closing braces.
              value: value,
              location: createLocation(openingBracePosition, this.clonePosition())
            },
            err: null
          };
        }
      // Argument with options: `{name, format, ...}`

      case 44
      /* `,` */
      :
        {
          this.bump(); // `,`

          this.bumpSpace();

          if (this.isEOF()) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
          }

          return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
        }

      default:
        return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
  };
  /**
   * Advance the parser until the end of the identifier, if it is currently on
   * an identifier character. Return an empty string otherwise.
   */


  Parser.prototype.parseIdentifierIfPossible = function () {
    var startingPosition = this.clonePosition();
    var startOffset = this.offset();
    var value = matchIdentifierAtIndex(this.message, startOffset);
    var endOffset = startOffset + value.length;
    this.bumpTo(endOffset);
    var endPosition = this.clonePosition();
    var location = createLocation(startingPosition, endPosition);
    return {
      value: value,
      location: location
    };
  };

  Parser.prototype.parseArgumentOptions = function (nestingLevel, expectingCloseTag, value, openingBracePosition) {
    var _a; // Parse this range:
    // {name, type, style}
    //        ^---^


    var typeStartPosition = this.clonePosition();
    var argType = this.parseIdentifierIfPossible().value;
    var typeEndPosition = this.clonePosition();

    switch (argType) {
      case '':
        // Expecting a style string number, date, time, plural, selectordinal, or select.
        return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));

      case 'number':
      case 'date':
      case 'time':
        {
          // Parse this range:
          // {name, number, style}
          //              ^-------^
          this.bumpSpace();
          var styleAndLocation = null;

          if (this.bumpIf(',')) {
            this.bumpSpace();
            var styleStartPosition = this.clonePosition();
            var result = this.parseSimpleArgStyleIfPossible();

            if (result.err) {
              return result;
            }

            var style = trimEnd(result.val);

            if (style.length === 0) {
              return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
            }

            var styleLocation = createLocation(styleStartPosition, this.clonePosition());
            styleAndLocation = {
              style: style,
              styleLocation: styleLocation
            };
          }

          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);

          if (argCloseResult.err) {
            return argCloseResult;
          }

          var location_1 = createLocation(openingBracePosition, this.clonePosition()); // Extract style or skeleton

          if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, '::', 0)) {
            // Skeleton starts with `::`.
            var skeleton = trimStart(styleAndLocation.style.slice(2));

            if (argType === 'number') {
              var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);

              if (result.err) {
                return result;
              }

              return {
                val: {
                  type: TYPE.number,
                  value: value,
                  location: location_1,
                  style: result.val
                },
                err: null
              };
            } else {
              if (skeleton.length === 0) {
                return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
              }

              var style = {
                type: SKELETON_TYPE.dateTime,
                pattern: skeleton,
                location: styleAndLocation.styleLocation,
                parsedOptions: this.shouldParseSkeletons ? parseDateTimeSkeleton(skeleton) : {}
              };
              var type = argType === 'date' ? TYPE.date : TYPE.time;
              return {
                val: {
                  type: type,
                  value: value,
                  location: location_1,
                  style: style
                },
                err: null
              };
            }
          } // Regular style or no style.


          return {
            val: {
              type: argType === 'number' ? TYPE.number : argType === 'date' ? TYPE.date : TYPE.time,
              value: value,
              location: location_1,
              style: (_a = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a !== void 0 ? _a : null
            },
            err: null
          };
        }

      case 'plural':
      case 'selectordinal':
      case 'select':
        {
          // Parse this range:
          // {name, plural, options}
          //              ^---------^
          var typeEndPosition_1 = this.clonePosition();
          this.bumpSpace();

          if (!this.bumpIf(',')) {
            return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));
          }

          this.bumpSpace(); // Parse offset:
          // {name, plural, offset:1, options}
          //                ^-----^
          //
          // or the first option:
          //
          // {name, plural, one {...} other {...}}
          //                ^--^

          var identifierAndLocation = this.parseIdentifierIfPossible();
          var pluralOffset = 0;

          if (argType !== 'select' && identifierAndLocation.value === 'offset') {
            if (!this.bumpIf(':')) {
              return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
            }

            this.bumpSpace();
            var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);

            if (result.err) {
              return result;
            } // Parse another identifier for option parsing


            this.bumpSpace();
            identifierAndLocation = this.parseIdentifierIfPossible();
            pluralOffset = result.val;
          }

          var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);

          if (optionsResult.err) {
            return optionsResult;
          }

          var argCloseResult = this.tryParseArgumentClose(openingBracePosition);

          if (argCloseResult.err) {
            return argCloseResult;
          }

          var location_2 = createLocation(openingBracePosition, this.clonePosition());

          if (argType === 'select') {
            return {
              val: {
                type: TYPE.select,
                value: value,
                options: fromEntries(optionsResult.val),
                location: location_2
              },
              err: null
            };
          } else {
            return {
              val: {
                type: TYPE.plural,
                value: value,
                options: fromEntries(optionsResult.val),
                offset: pluralOffset,
                pluralType: argType === 'plural' ? 'cardinal' : 'ordinal',
                location: location_2
              },
              err: null
            };
          }
        }

      default:
        return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
    }
  };

  Parser.prototype.tryParseArgumentClose = function (openingBracePosition) {
    // Parse: {value, number, ::currency/GBP }
    //
    if (this.isEOF() || this.char() !== 125
    /* `}` */
    ) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }

    this.bump(); // `}`

    return {
      val: true,
      err: null
    };
  };
  /**
   * See: https://github.com/unicode-org/icu/blob/af7ed1f6d2298013dc303628438ec4abe1f16479/icu4c/source/common/messagepattern.cpp#L659
   */


  Parser.prototype.parseSimpleArgStyleIfPossible = function () {
    var nestedBraces = 0;
    var startPosition = this.clonePosition();

    while (!this.isEOF()) {
      var ch = this.char();

      switch (ch) {
        case 39
        /* `'` */
        :
          {
            // Treat apostrophe as quoting but include it in the style part.
            // Find the end of the quoted literal text.
            this.bump();
            var apostrophePosition = this.clonePosition();

            if (!this.bumpUntil("'")) {
              return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
            }

            this.bump();
            break;
          }

        case 123
        /* `{` */
        :
          {
            nestedBraces += 1;
            this.bump();
            break;
          }

        case 125
        /* `}` */
        :
          {
            if (nestedBraces > 0) {
              nestedBraces -= 1;
            } else {
              return {
                val: this.message.slice(startPosition.offset, this.offset()),
                err: null
              };
            }

            break;
          }

        default:
          this.bump();
          break;
      }
    }

    return {
      val: this.message.slice(startPosition.offset, this.offset()),
      err: null
    };
  };

  Parser.prototype.parseNumberSkeletonFromString = function (skeleton, location) {
    var tokens = [];

    try {
      tokens = parseNumberSkeletonFromString(skeleton);
    } catch (e) {
      return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location);
    }

    return {
      val: {
        type: SKELETON_TYPE.number,
        tokens: tokens,
        location: location,
        parsedOptions: this.shouldParseSkeletons ? parseNumberSkeleton(tokens) : {}
      },
      err: null
    };
  };
  /**
   * @param nesting_level The current nesting level of messages.
   *     This can be positive when parsing message fragment in select or plural argument options.
   * @param parent_arg_type The parent argument's type.
   * @param parsed_first_identifier If provided, this is the first identifier-like selector of
   *     the argument. It is a by-product of a previous parsing attempt.
   * @param expecting_close_tag If true, this message is directly or indirectly nested inside
   *     between a pair of opening and closing tags. The nested message will not parse beyond
   *     the closing tag boundary.
   */


  Parser.prototype.tryParsePluralOrSelectOptions = function (nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
    var _a;

    var hasOtherClause = false;
    var options = [];
    var parsedSelectors = new Set();
    var selector = parsedFirstIdentifier.value,
        selectorLocation = parsedFirstIdentifier.location; // Parse:
    // one {one apple}
    // ^--^

    while (true) {
      if (selector.length === 0) {
        var startPosition = this.clonePosition();

        if (parentArgType !== 'select' && this.bumpIf('=')) {
          // Try parse `={number}` selector
          var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);

          if (result.err) {
            return result;
          }

          selectorLocation = createLocation(startPosition, this.clonePosition());
          selector = this.message.slice(startPosition.offset, this.offset());
        } else {
          break;
        }
      } // Duplicate selector clauses


      if (parsedSelectors.has(selector)) {
        return this.error(parentArgType === 'select' ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
      }

      if (selector === 'other') {
        hasOtherClause = true;
      } // Parse:
      // one {one apple}
      //     ^----------^


      this.bumpSpace();
      var openingBracePosition = this.clonePosition();

      if (!this.bumpIf('{')) {
        return this.error(parentArgType === 'select' ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
      }

      var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);

      if (fragmentResult.err) {
        return fragmentResult;
      }

      var argCloseResult = this.tryParseArgumentClose(openingBracePosition);

      if (argCloseResult.err) {
        return argCloseResult;
      }

      options.push([selector, {
        value: fragmentResult.val,
        location: createLocation(openingBracePosition, this.clonePosition())
      }]); // Keep track of the existing selectors

      parsedSelectors.add(selector); // Prep next selector clause.

      this.bumpSpace();
      _a = this.parseIdentifierIfPossible(), selector = _a.value, selectorLocation = _a.location;
    }

    if (options.length === 0) {
      return this.error(parentArgType === 'select' ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
    }

    if (this.requiresOtherClause && !hasOtherClause) {
      return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
    }

    return {
      val: options,
      err: null
    };
  };

  Parser.prototype.tryParseDecimalInteger = function (expectNumberError, invalidNumberError) {
    var sign = 1;
    var startingPosition = this.clonePosition();

    if (this.bumpIf('+')) {} else if (this.bumpIf('-')) {
      sign = -1;
    }

    var hasDigits = false;
    var decimal = 0;

    while (!this.isEOF()) {
      var ch = this.char();

      if (ch >= 48
      /* `0` */
      && ch <= 57
      /* `9` */
      ) {
        hasDigits = true;
        decimal = decimal * 10 + (ch - 48);
        this.bump();
      } else {
        break;
      }
    }

    var location = createLocation(startingPosition, this.clonePosition());

    if (!hasDigits) {
      return this.error(expectNumberError, location);
    }

    decimal *= sign;

    if (!isSafeInteger(decimal)) {
      return this.error(invalidNumberError, location);
    }

    return {
      val: decimal,
      err: null
    };
  };

  Parser.prototype.offset = function () {
    return this.position.offset;
  };

  Parser.prototype.isEOF = function () {
    return this.offset() === this.message.length;
  };

  Parser.prototype.clonePosition = function () {
    // This is much faster than `Object.assign` or spread.
    return {
      offset: this.position.offset,
      line: this.position.line,
      column: this.position.column
    };
  };
  /**
   * Return the code point at the current position of the parser.
   * Throws if the index is out of bound.
   */


  Parser.prototype.char = function () {
    var offset = this.position.offset;

    if (offset >= this.message.length) {
      throw Error('out of bound');
    }

    var code = codePointAt(this.message, offset);

    if (code === undefined) {
      throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
    }

    return code;
  };

  Parser.prototype.error = function (kind, location) {
    return {
      val: null,
      err: {
        kind: kind,
        message: this.message,
        location: location
      }
    };
  };
  /** Bump the parser to the next UTF-16 code unit. */


  Parser.prototype.bump = function () {
    if (this.isEOF()) {
      return;
    }

    var code = this.char();

    if (code === 10
    /* '\n' */
    ) {
      this.position.line += 1;
      this.position.column = 1;
      this.position.offset += 1;
    } else {
      this.position.column += 1; // 0 ~ 0x10000 -> unicode BMP, otherwise skip the surrogate pair.

      this.position.offset += code < 0x10000 ? 1 : 2;
    }
  };
  /**
   * If the substring starting at the current position of the parser has
   * the given prefix, then bump the parser to the character immediately
   * following the prefix and return true. Otherwise, don't bump the parser
   * and return false.
   */


  Parser.prototype.bumpIf = function (prefix) {
    if (startsWith(this.message, prefix, this.offset())) {
      for (var i = 0; i < prefix.length; i++) {
        this.bump();
      }

      return true;
    }

    return false;
  };
  /**
   * Bump the parser until the pattern character is found and return `true`.
   * Otherwise bump to the end of the file and return `false`.
   */


  Parser.prototype.bumpUntil = function (pattern) {
    var currentOffset = this.offset();
    var index = this.message.indexOf(pattern, currentOffset);

    if (index >= 0) {
      this.bumpTo(index);
      return true;
    } else {
      this.bumpTo(this.message.length);
      return false;
    }
  };
  /**
   * Bump the parser to the target offset.
   * If target offset is beyond the end of the input, bump the parser to the end of the input.
   */


  Parser.prototype.bumpTo = function (targetOffset) {
    if (this.offset() > targetOffset) {
      throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
    }

    targetOffset = Math.min(targetOffset, this.message.length);

    while (true) {
      var offset = this.offset();

      if (offset === targetOffset) {
        break;
      }

      if (offset > targetOffset) {
        throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
      }

      this.bump();

      if (this.isEOF()) {
        break;
      }
    }
  };
  /** advance the parser through all whitespace to the next non-whitespace code unit. */


  Parser.prototype.bumpSpace = function () {
    while (!this.isEOF() && _isWhiteSpace(this.char())) {
      this.bump();
    }
  };
  /**
   * Peek at the *next* Unicode codepoint in the input without advancing the parser.
   * If the input has been exhausted, then this returns null.
   */


  Parser.prototype.peek = function () {
    if (this.isEOF()) {
      return null;
    }

    var code = this.char();
    var offset = this.offset();
    var nextCode = this.message.charCodeAt(offset + (code >= 0x10000 ? 2 : 1));
    return nextCode !== null && nextCode !== void 0 ? nextCode : null;
  };

  return Parser;
}();


/**
 * This check if codepoint is alphabet (lower & uppercase)
 * @param codepoint
 * @returns
 */

function _isAlpha(codepoint) {
  return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
}

function _isAlphaOrSlash(codepoint) {
  return _isAlpha(codepoint) || codepoint === 47;
  /* '/' */
}
/** See `parseTag` function docs. */


function _isPotentialElementNameChar(c) {
  return c === 45
  /* '-' */
  || c === 46
  /* '.' */
  || c >= 48 && c <= 57
  /* 0..9 */
  || c === 95
  /* '_' */
  || c >= 97 && c <= 122
  /** a..z */
  || c >= 65 && c <= 90
  /* A..Z */
  || c == 0xb7 || c >= 0xc0 && c <= 0xd6 || c >= 0xd8 && c <= 0xf6 || c >= 0xf8 && c <= 0x37d || c >= 0x37f && c <= 0x1fff || c >= 0x200c && c <= 0x200d || c >= 0x203f && c <= 0x2040 || c >= 0x2070 && c <= 0x218f || c >= 0x2c00 && c <= 0x2fef || c >= 0x3001 && c <= 0xd7ff || c >= 0xf900 && c <= 0xfdcf || c >= 0xfdf0 && c <= 0xfffd || c >= 0x10000 && c <= 0xeffff;
}
/**
 * Code point equivalent of regex `\p{White_Space}`.
 * From: https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
 */


function _isWhiteSpace(c) {
  return c >= 0x0009 && c <= 0x000d || c === 0x0020 || c === 0x0085 || c >= 0x200e && c <= 0x200f || c === 0x2028 || c === 0x2029;
}
/**
 * Code point equivalent of regex `\p{Pattern_Syntax}`.
 * See https://www.unicode.org/Public/UCD/latest/ucd/PropList.txt
 */


function _isPatternSyntax(c) {
  return c >= 0x0021 && c <= 0x0023 || c === 0x0024 || c >= 0x0025 && c <= 0x0027 || c === 0x0028 || c === 0x0029 || c === 0x002a || c === 0x002b || c === 0x002c || c === 0x002d || c >= 0x002e && c <= 0x002f || c >= 0x003a && c <= 0x003b || c >= 0x003c && c <= 0x003e || c >= 0x003f && c <= 0x0040 || c === 0x005b || c === 0x005c || c === 0x005d || c === 0x005e || c === 0x0060 || c === 0x007b || c === 0x007c || c === 0x007d || c === 0x007e || c === 0x00a1 || c >= 0x00a2 && c <= 0x00a5 || c === 0x00a6 || c === 0x00a7 || c === 0x00a9 || c === 0x00ab || c === 0x00ac || c === 0x00ae || c === 0x00b0 || c === 0x00b1 || c === 0x00b6 || c === 0x00bb || c === 0x00bf || c === 0x00d7 || c === 0x00f7 || c >= 0x2010 && c <= 0x2015 || c >= 0x2016 && c <= 0x2017 || c === 0x2018 || c === 0x2019 || c === 0x201a || c >= 0x201b && c <= 0x201c || c === 0x201d || c === 0x201e || c === 0x201f || c >= 0x2020 && c <= 0x2027 || c >= 0x2030 && c <= 0x2038 || c === 0x2039 || c === 0x203a || c >= 0x203b && c <= 0x203e || c >= 0x2041 && c <= 0x2043 || c === 0x2044 || c === 0x2045 || c === 0x2046 || c >= 0x2047 && c <= 0x2051 || c === 0x2052 || c === 0x2053 || c >= 0x2055 && c <= 0x205e || c >= 0x2190 && c <= 0x2194 || c >= 0x2195 && c <= 0x2199 || c >= 0x219a && c <= 0x219b || c >= 0x219c && c <= 0x219f || c === 0x21a0 || c >= 0x21a1 && c <= 0x21a2 || c === 0x21a3 || c >= 0x21a4 && c <= 0x21a5 || c === 0x21a6 || c >= 0x21a7 && c <= 0x21ad || c === 0x21ae || c >= 0x21af && c <= 0x21cd || c >= 0x21ce && c <= 0x21cf || c >= 0x21d0 && c <= 0x21d1 || c === 0x21d2 || c === 0x21d3 || c === 0x21d4 || c >= 0x21d5 && c <= 0x21f3 || c >= 0x21f4 && c <= 0x22ff || c >= 0x2300 && c <= 0x2307 || c === 0x2308 || c === 0x2309 || c === 0x230a || c === 0x230b || c >= 0x230c && c <= 0x231f || c >= 0x2320 && c <= 0x2321 || c >= 0x2322 && c <= 0x2328 || c === 0x2329 || c === 0x232a || c >= 0x232b && c <= 0x237b || c === 0x237c || c >= 0x237d && c <= 0x239a || c >= 0x239b && c <= 0x23b3 || c >= 0x23b4 && c <= 0x23db || c >= 0x23dc && c <= 0x23e1 || c >= 0x23e2 && c <= 0x2426 || c >= 0x2427 && c <= 0x243f || c >= 0x2440 && c <= 0x244a || c >= 0x244b && c <= 0x245f || c >= 0x2500 && c <= 0x25b6 || c === 0x25b7 || c >= 0x25b8 && c <= 0x25c0 || c === 0x25c1 || c >= 0x25c2 && c <= 0x25f7 || c >= 0x25f8 && c <= 0x25ff || c >= 0x2600 && c <= 0x266e || c === 0x266f || c >= 0x2670 && c <= 0x2767 || c === 0x2768 || c === 0x2769 || c === 0x276a || c === 0x276b || c === 0x276c || c === 0x276d || c === 0x276e || c === 0x276f || c === 0x2770 || c === 0x2771 || c === 0x2772 || c === 0x2773 || c === 0x2774 || c === 0x2775 || c >= 0x2794 && c <= 0x27bf || c >= 0x27c0 && c <= 0x27c4 || c === 0x27c5 || c === 0x27c6 || c >= 0x27c7 && c <= 0x27e5 || c === 0x27e6 || c === 0x27e7 || c === 0x27e8 || c === 0x27e9 || c === 0x27ea || c === 0x27eb || c === 0x27ec || c === 0x27ed || c === 0x27ee || c === 0x27ef || c >= 0x27f0 && c <= 0x27ff || c >= 0x2800 && c <= 0x28ff || c >= 0x2900 && c <= 0x2982 || c === 0x2983 || c === 0x2984 || c === 0x2985 || c === 0x2986 || c === 0x2987 || c === 0x2988 || c === 0x2989 || c === 0x298a || c === 0x298b || c === 0x298c || c === 0x298d || c === 0x298e || c === 0x298f || c === 0x2990 || c === 0x2991 || c === 0x2992 || c === 0x2993 || c === 0x2994 || c === 0x2995 || c === 0x2996 || c === 0x2997 || c === 0x2998 || c >= 0x2999 && c <= 0x29d7 || c === 0x29d8 || c === 0x29d9 || c === 0x29da || c === 0x29db || c >= 0x29dc && c <= 0x29fb || c === 0x29fc || c === 0x29fd || c >= 0x29fe && c <= 0x2aff || c >= 0x2b00 && c <= 0x2b2f || c >= 0x2b30 && c <= 0x2b44 || c >= 0x2b45 && c <= 0x2b46 || c >= 0x2b47 && c <= 0x2b4c || c >= 0x2b4d && c <= 0x2b73 || c >= 0x2b74 && c <= 0x2b75 || c >= 0x2b76 && c <= 0x2b95 || c === 0x2b96 || c >= 0x2b97 && c <= 0x2bff || c >= 0x2e00 && c <= 0x2e01 || c === 0x2e02 || c === 0x2e03 || c === 0x2e04 || c === 0x2e05 || c >= 0x2e06 && c <= 0x2e08 || c === 0x2e09 || c === 0x2e0a || c === 0x2e0b || c === 0x2e0c || c === 0x2e0d || c >= 0x2e0e && c <= 0x2e16 || c === 0x2e17 || c >= 0x2e18 && c <= 0x2e19 || c === 0x2e1a || c === 0x2e1b || c === 0x2e1c || c === 0x2e1d || c >= 0x2e1e && c <= 0x2e1f || c === 0x2e20 || c === 0x2e21 || c === 0x2e22 || c === 0x2e23 || c === 0x2e24 || c === 0x2e25 || c === 0x2e26 || c === 0x2e27 || c === 0x2e28 || c === 0x2e29 || c >= 0x2e2a && c <= 0x2e2e || c === 0x2e2f || c >= 0x2e30 && c <= 0x2e39 || c >= 0x2e3a && c <= 0x2e3b || c >= 0x2e3c && c <= 0x2e3f || c === 0x2e40 || c === 0x2e41 || c === 0x2e42 || c >= 0x2e43 && c <= 0x2e4f || c >= 0x2e50 && c <= 0x2e51 || c === 0x2e52 || c >= 0x2e53 && c <= 0x2e7f || c >= 0x3001 && c <= 0x3003 || c === 0x3008 || c === 0x3009 || c === 0x300a || c === 0x300b || c === 0x300c || c === 0x300d || c === 0x300e || c === 0x300f || c === 0x3010 || c === 0x3011 || c >= 0x3012 && c <= 0x3013 || c === 0x3014 || c === 0x3015 || c === 0x3016 || c === 0x3017 || c === 0x3018 || c === 0x3019 || c === 0x301a || c === 0x301b || c === 0x301c || c === 0x301d || c >= 0x301e && c <= 0x301f || c === 0x3020 || c === 0x3030 || c === 0xfd3e || c === 0xfd3f || c >= 0xfe45 && c <= 0xfe46;
}
;// CONCATENATED MODULE: ../../node_modules/@formatjs/icu-messageformat-parser/lib/index.js





function pruneLocation(els) {
  els.forEach(function (el) {
    delete el.location;

    if (isSelectElement(el) || isPluralElement(el)) {
      for (var k in el.options) {
        delete el.options[k].location;
        pruneLocation(el.options[k].value);
      }
    } else if (isNumberElement(el) && isNumberSkeleton(el.style)) {
      delete el.style.location;
    } else if ((isDateElement(el) || isTimeElement(el)) && isDateTimeSkeleton(el.style)) {
      delete el.style.location;
    } else if (isTagElement(el)) {
      pruneLocation(el.children);
    }
  });
}

function parse(message, opts) {
  if (opts === void 0) {
    opts = {};
  }

  opts = __assign({
    shouldParseSkeletons: true,
    requiresOtherClause: true
  }, opts);
  var result = new Parser(message, opts).parse();

  if (result.err) {
    var error = SyntaxError(ErrorKind[result.err.kind]); // @ts-expect-error Assign to error object

    error.location = result.err.location; // @ts-expect-error Assign to error object

    error.originalMessage = result.err.message;
    throw error;
  }

  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
    pruneLocation(result.val);
  }

  return result.val;
}

;// CONCATENATED MODULE: ../../node_modules/@formatjs/fast-memoize/lib/index.js
//
// Main
//
function memoize(fn, options) {
  var cache = options && options.cache ? options.cache : cacheDefault;
  var serializer = options && options.serializer ? options.serializer : serializerDefault;
  var strategy = options && options.strategy ? options.strategy : strategyDefault;
  return strategy(fn, {
    cache: cache,
    serializer: serializer
  });
} //
// Strategy
//

function isPrimitive(value) {
  return value == null || typeof value === 'number' || typeof value === 'boolean'; // || typeof value === "string" 'unsafe' primitive for our needs
}

function monadic(fn, cache, serializer, arg) {
  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
  var computedValue = cache.get(cacheKey);

  if (typeof computedValue === 'undefined') {
    computedValue = fn.call(this, arg);
    cache.set(cacheKey, computedValue);
  }

  return computedValue;
}

function variadic(fn, cache, serializer) {
  var args = Array.prototype.slice.call(arguments, 3);
  var cacheKey = serializer(args);
  var computedValue = cache.get(cacheKey);

  if (typeof computedValue === 'undefined') {
    computedValue = fn.apply(this, args);
    cache.set(cacheKey, computedValue);
  }

  return computedValue;
}

function assemble(fn, context, strategy, cache, serialize) {
  return strategy.bind(context, fn, cache, serialize);
}

function strategyDefault(fn, options) {
  var strategy = fn.length === 1 ? monadic : variadic;
  return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}

function strategyVariadic(fn, options) {
  return assemble(fn, this, variadic, options.cache.create(), options.serializer);
}

function strategyMonadic(fn, options) {
  return assemble(fn, this, monadic, options.cache.create(), options.serializer);
} //
// Serializer
//


var serializerDefault = function () {
  return JSON.stringify(arguments);
}; //
// Cache
//


function ObjectWithoutPrototypeCache() {
  this.cache = Object.create(null);
}

ObjectWithoutPrototypeCache.prototype.get = function (key) {
  return this.cache[key];
};

ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
  this.cache[key] = value;
};

var cacheDefault = {
  create: function create() {
    // @ts-ignore
    return new ObjectWithoutPrototypeCache();
  }
};
var strategies = {
  variadic: strategyVariadic,
  monadic: strategyMonadic
};
;// CONCATENATED MODULE: ../../node_modules/intl-messageformat/lib/src/error.js

var ErrorCode;

(function (ErrorCode) {
  // When we have a placeholder but no value to format
  ErrorCode["MISSING_VALUE"] = "MISSING_VALUE"; // When value supplied is invalid

  ErrorCode["INVALID_VALUE"] = "INVALID_VALUE"; // When we need specific Intl API but it's not available

  ErrorCode["MISSING_INTL_API"] = "MISSING_INTL_API";
})(ErrorCode || (ErrorCode = {}));

var FormatError =
/** @class */
function (_super) {
  __extends(FormatError, _super);

  function FormatError(msg, code, originalMessage) {
    var _this = _super.call(this, msg) || this;

    _this.code = code;
    _this.originalMessage = originalMessage;
    return _this;
  }

  FormatError.prototype.toString = function () {
    return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
  };

  return FormatError;
}(Error);



var InvalidValueError =
/** @class */
function (_super) {
  __extends(InvalidValueError, _super);

  function InvalidValueError(variableId, value, options, originalMessage) {
    return _super.call(this, "Invalid values for \"".concat(variableId, "\": \"").concat(value, "\". Options are \"").concat(Object.keys(options).join('", "'), "\""), ErrorCode.INVALID_VALUE, originalMessage) || this;
  }

  return InvalidValueError;
}(FormatError);



var InvalidValueTypeError =
/** @class */
function (_super) {
  __extends(InvalidValueTypeError, _super);

  function InvalidValueTypeError(value, type, originalMessage) {
    return _super.call(this, "Value for \"".concat(value, "\" must be of type ").concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
  }

  return InvalidValueTypeError;
}(FormatError);



var MissingValueError =
/** @class */
function (_super) {
  __extends(MissingValueError, _super);

  function MissingValueError(variableId, originalMessage) {
    return _super.call(this, "The intl string context variable \"".concat(variableId, "\" was not provided to the string \"").concat(originalMessage, "\""), ErrorCode.MISSING_VALUE, originalMessage) || this;
  }

  return MissingValueError;
}(FormatError);


;// CONCATENATED MODULE: ../../node_modules/intl-messageformat/lib/src/formatters.js


var PART_TYPE;

(function (PART_TYPE) {
  PART_TYPE[PART_TYPE["literal"] = 0] = "literal";
  PART_TYPE[PART_TYPE["object"] = 1] = "object";
})(PART_TYPE || (PART_TYPE = {}));

function mergeLiteral(parts) {
  if (parts.length < 2) {
    return parts;
  }

  return parts.reduce(function (all, part) {
    var lastPart = all[all.length - 1];

    if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
      all.push(part);
    } else {
      lastPart.value += part.value;
    }

    return all;
  }, []);
}

function isFormatXMLElementFn(el) {
  return typeof el === 'function';
} // TODO(skeleton): add skeleton support

function formatToParts(els, locales, formatters, formats, values, currentPluralValue, // For debugging
originalMessage) {
  // Hot path for straight simple msg translations
  if (els.length === 1 && isLiteralElement(els[0])) {
    return [{
      type: PART_TYPE.literal,
      value: els[0].value
    }];
  }

  var result = [];

  for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
    var el = els_1[_i]; // Exit early for string parts.

    if (isLiteralElement(el)) {
      result.push({
        type: PART_TYPE.literal,
        value: el.value
      });
      continue;
    } // TODO: should this part be literal type?
    // Replace `#` in plural rules with the actual numeric value.


    if (isPoundElement(el)) {
      if (typeof currentPluralValue === 'number') {
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getNumberFormat(locales).format(currentPluralValue)
        });
      }

      continue;
    }

    var varName = el.value; // Enforce that all required values are provided by the caller.

    if (!(values && varName in values)) {
      throw new MissingValueError(varName, originalMessage);
    }

    var value = values[varName];

    if (isArgumentElement(el)) {
      if (!value || typeof value === 'string' || typeof value === 'number') {
        value = typeof value === 'string' || typeof value === 'number' ? String(value) : '';
      }

      result.push({
        type: typeof value === 'string' ? PART_TYPE.literal : PART_TYPE.object,
        value: value
      });
      continue;
    } // Recursively format plural and select parts' option — which can be a
    // nested pattern structure. The choosing of the option to use is
    // abstracted-by and delegated-to the part helper object.


    if (isDateElement(el)) {
      var style = typeof el.style === 'string' ? formats.date[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : undefined;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }

    if (isTimeElement(el)) {
      var style = typeof el.style === 'string' ? formats.time[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : undefined;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }

    if (isNumberElement(el)) {
      var style = typeof el.style === 'string' ? formats.number[el.style] : isNumberSkeleton(el.style) ? el.style.parsedOptions : undefined;

      if (style && style.scale) {
        value = value * (style.scale || 1);
      }

      result.push({
        type: PART_TYPE.literal,
        value: formatters.getNumberFormat(locales, style).format(value)
      });
      continue;
    }

    if (isTagElement(el)) {
      var children = el.children,
          value_1 = el.value;
      var formatFn = values[value_1];

      if (!isFormatXMLElementFn(formatFn)) {
        throw new InvalidValueTypeError(value_1, 'function', originalMessage);
      }

      var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
      var chunks = formatFn(parts.map(function (p) {
        return p.value;
      }));

      if (!Array.isArray(chunks)) {
        chunks = [chunks];
      }

      result.push.apply(result, chunks.map(function (c) {
        return {
          type: typeof c === 'string' ? PART_TYPE.literal : PART_TYPE.object,
          value: c
        };
      }));
    }

    if (isSelectElement(el)) {
      var opt = el.options[value] || el.options.other;

      if (!opt) {
        throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
      }

      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
      continue;
    }

    if (isPluralElement(el)) {
      var opt = el.options["=".concat(value)];

      if (!opt) {
        if (!Intl.PluralRules) {
          throw new FormatError("Intl.PluralRules is not available in this environment.\nTry polyfilling it using \"@formatjs/intl-pluralrules\"\n", ErrorCode.MISSING_INTL_API, originalMessage);
        }

        var rule = formatters.getPluralRules(locales, {
          type: el.pluralType
        }).select(value - (el.offset || 0));
        opt = el.options[rule] || el.options.other;
      }

      if (!opt) {
        throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
      }

      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
      continue;
    }
  }

  return mergeLiteral(result);
}
;// CONCATENATED MODULE: ../../node_modules/intl-messageformat/lib/src/core.js
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/



 // -- MessageFormat --------------------------------------------------------

function mergeConfig(c1, c2) {
  if (!c2) {
    return c1;
  }

  return __assign(__assign(__assign({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function (all, k) {
    all[k] = __assign(__assign({}, c1[k]), c2[k] || {});
    return all;
  }, {}));
}

function mergeConfigs(defaultConfig, configs) {
  if (!configs) {
    return defaultConfig;
  }

  return Object.keys(defaultConfig).reduce(function (all, k) {
    all[k] = mergeConfig(defaultConfig[k], configs[k]);
    return all;
  }, __assign({}, defaultConfig));
}

function createFastMemoizeCache(store) {
  return {
    create: function () {
      return {
        get: function (key) {
          return store[key];
        },
        set: function (key, value) {
          store[key] = value;
        }
      };
    }
  };
}

function createDefaultFormatters(cache) {
  if (cache === void 0) {
    cache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };
  }

  return {
    getNumberFormat: memoize(function () {
      var _a;

      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.number),
      strategy: strategies.variadic
    }),
    getDateTimeFormat: memoize(function () {
      var _a;

      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.dateTime),
      strategy: strategies.variadic
    }),
    getPluralRules: memoize(function () {
      var _a;

      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.pluralRules),
      strategy: strategies.variadic
    })
  };
}

var IntlMessageFormat =
/** @class */
function () {
  function IntlMessageFormat(message, locales, overrideFormats, opts) {
    var _this = this;

    if (locales === void 0) {
      locales = IntlMessageFormat.defaultLocale;
    }

    this.formatterCache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };

    this.format = function (values) {
      var parts = _this.formatToParts(values); // Hot path for straight simple msg translations


      if (parts.length === 1) {
        return parts[0].value;
      }

      var result = parts.reduce(function (all, part) {
        if (!all.length || part.type !== PART_TYPE.literal || typeof all[all.length - 1] !== 'string') {
          all.push(part.value);
        } else {
          all[all.length - 1] += part.value;
        }

        return all;
      }, []);

      if (result.length <= 1) {
        return result[0] || '';
      }

      return result;
    };

    this.formatToParts = function (values) {
      return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, undefined, _this.message);
    };

    this.resolvedOptions = function () {
      return {
        locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
      };
    };

    this.getAst = function () {
      return _this.ast;
    };

    if (typeof message === 'string') {
      this.message = message;

      if (!IntlMessageFormat.__parse) {
        throw new TypeError('IntlMessageFormat.__parse must be set to process `message` of type `string`');
      } // Parse string messages into an AST.


      this.ast = IntlMessageFormat.__parse(message, {
        ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag
      });
    } else {
      this.ast = message;
    }

    if (!Array.isArray(this.ast)) {
      throw new TypeError('A message must be provided as a String or AST.');
    } // Creates a new object with the specified `formats` merged with the default
    // formats.


    this.formats = mergeConfigs(IntlMessageFormat.formats, overrideFormats); // Defined first because it's used to build the format pattern.

    this.locales = locales;
    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
  }

  Object.defineProperty(IntlMessageFormat, "defaultLocale", {
    get: function () {
      if (!IntlMessageFormat.memoizedDefaultLocale) {
        IntlMessageFormat.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
      }

      return IntlMessageFormat.memoizedDefaultLocale;
    },
    enumerable: false,
    configurable: true
  });
  IntlMessageFormat.memoizedDefaultLocale = null;
  IntlMessageFormat.__parse = parse; // Default format options used as the prototype of the `formats` provided to the
  // constructor. These are used when constructing the internal Intl.NumberFormat
  // and Intl.DateTimeFormat instances.

  IntlMessageFormat.formats = {
    number: {
      integer: {
        maximumFractionDigits: 0
      },
      currency: {
        style: 'currency'
      },
      percent: {
        style: 'percent'
      }
    },
    date: {
      short: {
        month: 'numeric',
        day: 'numeric',
        year: '2-digit'
      },
      medium: {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      },
      long: {
        month: 'long',
        day: 'numeric',
        year: 'numeric'
      },
      full: {
        weekday: 'long',
        month: 'long',
        day: 'numeric',
        year: 'numeric'
      }
    },
    time: {
      short: {
        hour: 'numeric',
        minute: 'numeric'
      },
      medium: {
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric'
      },
      long: {
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric',
        timeZoneName: 'short'
      },
      full: {
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric',
        timeZoneName: 'short'
      }
    }
  };
  return IntlMessageFormat;
}();


;// CONCATENATED MODULE: ../../node_modules/intl-messageformat/lib/index.js
/*
Copyright (c) 2014, Yahoo! Inc. All rights reserved.
Copyrights licensed under the New BSD License.
See the accompanying LICENSE file for terms.
*/




/* harmony default export */ const lib = (IntlMessageFormat);
;// CONCATENATED MODULE: ../../node_modules/@internationalized/message/dist/module.js


function dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $70eee6030fd7c1a1$exports = {};
dist_module_$parcel$export($70eee6030fd7c1a1$exports, "MessageDictionary", () => $70eee6030fd7c1a1$export$64839e615120df17);

class $70eee6030fd7c1a1$export$64839e615120df17 {
  getStringForLocale(key, locale) {
    let strings = this.messages[locale];

    if (!strings) {
      strings = $70eee6030fd7c1a1$var$getStringsForLocale(locale, this.messages, this.defaultLocale);
      this.messages[locale] = strings;
    }

    let string = strings[key];
    if (!string) throw new Error(`Could not find intl message ${key} in ${locale} locale`);
    return string;
  }

  constructor(messages, defaultLocale = 'en-US') {
    // Clone messages so we don't modify the original object.
    this.messages = { ...messages
    };
    this.defaultLocale = defaultLocale;
  }

}

function $70eee6030fd7c1a1$var$getStringsForLocale(locale, strings, defaultLocale = 'en-US') {
  // If there is an exact match, use it.
  if (strings[locale]) return strings[locale]; // Attempt to find the closest match by language.
  // For example, if the locale is fr-CA (French Canadian), but there is only
  // an fr-FR (France) set of strings, use that.
  // This could be replaced with Intl.LocaleMatcher once it is supported.
  // https://github.com/tc39/proposal-intl-localematcher

  let language = $70eee6030fd7c1a1$var$getLanguage(locale);

  for (let key in strings) {
    if (key.startsWith(language + '-')) return strings[key];
  } // Nothing close, use english.


  return strings[defaultLocale];
}

function $70eee6030fd7c1a1$var$getLanguage(locale) {
  // @ts-ignore
  if (Intl.Locale) // @ts-ignore
    return new Intl.Locale(locale).language;
  return locale.split('-')[0];
}

var $a96338b8d4eb3cb0$exports = {};
dist_module_$parcel$export($a96338b8d4eb3cb0$exports, "MessageFormatter", () => $a96338b8d4eb3cb0$export$526ebc05ff964723);

class $a96338b8d4eb3cb0$export$526ebc05ff964723 {
  format(key, variables) {
    let message = this.cache[key];

    if (!message) {
      let msg = this.messages.getStringForLocale(key, this.locale);
      if (!msg) throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);
      message = new lib(msg, this.locale);
      this.cache[key] = message;
    }

    let varCopy;
    if (variables) varCopy = Object.keys(variables).reduce((acc, key) => {
      acc[key] = variables[key] == null ? false : variables[key];
      return acc;
    }, {});
    return message.format(varCopy);
  }

  constructor(locale, messages) {
    this.locale = locale;
    this.messages = messages;
    this.cache = {};
  }

}


;// CONCATENATED MODULE: ./node_modules/@internationalized/date/dist/module.js
function date_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $418a5bbf7b2f3448$exports = {};
date_dist_module_$parcel$export($418a5bbf7b2f3448$exports, "CalendarDate", () => $418a5bbf7b2f3448$export$99faa760c7908e4f);
date_dist_module_$parcel$export($418a5bbf7b2f3448$exports, "Time", () => $418a5bbf7b2f3448$export$680ea196effce5f);
date_dist_module_$parcel$export($418a5bbf7b2f3448$exports, "CalendarDateTime", () => $418a5bbf7b2f3448$export$ca871e8dbb80966f);
date_dist_module_$parcel$export($418a5bbf7b2f3448$exports, "ZonedDateTime", () => $418a5bbf7b2f3448$export$d3b7288e7994edea);
var $9ab2a87bc84c0bfa$exports = {};
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "epochFromDate", () => $9ab2a87bc84c0bfa$export$bd4fb2bc8bb06fb);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "toCalendar", () => $9ab2a87bc84c0bfa$export$b4a036af3fc0b032);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "getTimeZoneOffset", () => $9ab2a87bc84c0bfa$export$59c99f3515d3493f);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "possibleAbsolutes", () => $9ab2a87bc84c0bfa$export$136f38efe7caf549);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "toAbsolute", () => $9ab2a87bc84c0bfa$export$5107c82f94518f5c);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "toCalendarDateTime", () => $9ab2a87bc84c0bfa$export$b21e0b124e224484);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "toDate", () => $9ab2a87bc84c0bfa$export$e67a095c620b86fe);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "fromAbsolute", () => $9ab2a87bc84c0bfa$export$1b96692a1ba042ac);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "fromDate", () => $9ab2a87bc84c0bfa$export$e57ff100d91bd4b9);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "fromDateToLocal", () => $9ab2a87bc84c0bfa$export$d7f92bcd3596b086);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "toCalendarDate", () => $9ab2a87bc84c0bfa$export$93522d1a439f3617);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "toDateFields", () => $9ab2a87bc84c0bfa$export$6f4d78149f3f53ac);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "toTimeFields", () => $9ab2a87bc84c0bfa$export$4d0393e732857be5);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "toTime", () => $9ab2a87bc84c0bfa$export$d33f79e3ffc3dc83);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "toZoned", () => $9ab2a87bc84c0bfa$export$84c95a83c799e074);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "toTimeZone", () => $9ab2a87bc84c0bfa$export$538b00033cc11c75);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "zonedToDate", () => $9ab2a87bc84c0bfa$export$83aac07b4c37b25);
date_dist_module_$parcel$export($9ab2a87bc84c0bfa$exports, "toLocalTimeZone", () => $9ab2a87bc84c0bfa$export$d9b67bc93c097491);
var $571ccebef3ef72f1$exports = {};
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "isSameDay", () => $571ccebef3ef72f1$export$ea39ec197993aef0);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "isSameMonth", () => $571ccebef3ef72f1$export$a18c89cbd24170ff);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "startOfMonth", () => $571ccebef3ef72f1$export$a5a3b454ada2268e);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "isSameYear", () => $571ccebef3ef72f1$export$5841f9eb9773f25f);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "startOfYear", () => $571ccebef3ef72f1$export$f91e89d3d0406102);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "isEqualDay", () => $571ccebef3ef72f1$export$91b62ebf2ba703ee);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "isEqualMonth", () => $571ccebef3ef72f1$export$5a8da0c44a3afdf2);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "isEqualYear", () => $571ccebef3ef72f1$export$ea840f5a6dda8147);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "isToday", () => $571ccebef3ef72f1$export$629b0a497aa65267);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "today", () => $571ccebef3ef72f1$export$d0bdf45af03a6ea3);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "getDayOfWeek", () => $571ccebef3ef72f1$export$2061056d06d7cdf7);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "now", () => $571ccebef3ef72f1$export$461939dd4422153);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "compareDate", () => $571ccebef3ef72f1$export$68781ddf31c0090f);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "compareTime", () => $571ccebef3ef72f1$export$c19a80a9721b80f6);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "getHoursInDay", () => $571ccebef3ef72f1$export$126c91c941de7e);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "getLocalTimeZone", () => $571ccebef3ef72f1$export$aa8b41735afcabd2);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "endOfMonth", () => $571ccebef3ef72f1$export$a2258d9c4118825c);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "endOfYear", () => $571ccebef3ef72f1$export$8b7aa55c66d5569e);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "getMinimumMonthInYear", () => $571ccebef3ef72f1$export$5412ac11713b72ad);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "getMinimumDayInMonth", () => $571ccebef3ef72f1$export$b2f4953d301981d5);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "startOfWeek", () => $571ccebef3ef72f1$export$42c81a444fbfb5d4);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "endOfWeek", () => $571ccebef3ef72f1$export$ef8b6d9133084f4e);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "getWeeksInMonth", () => $571ccebef3ef72f1$export$ccc1b2479e7dd654);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "minDate", () => $571ccebef3ef72f1$export$5c333a116e949cdd);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "maxDate", () => $571ccebef3ef72f1$export$a75f2bff57811055);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "isWeekend", () => $571ccebef3ef72f1$export$618d60ea299da42);
date_dist_module_$parcel$export($571ccebef3ef72f1$exports, "isWeekday", () => $571ccebef3ef72f1$export$ee9d87258e1d19ed);
const $7470da919d0ed06d$export$7a5acbd77d414bd9 = {
  '001': 1,
  AD: 1,
  AE: 6,
  AF: 6,
  AI: 1,
  AL: 1,
  AM: 1,
  AN: 1,
  AT: 1,
  AX: 1,
  AZ: 1,
  BA: 1,
  BE: 1,
  BG: 1,
  BH: 6,
  BM: 1,
  BN: 1,
  BY: 1,
  CH: 1,
  CL: 1,
  CM: 1,
  CR: 1,
  CY: 1,
  CZ: 1,
  DE: 1,
  DJ: 6,
  DK: 1,
  DZ: 6,
  EC: 1,
  EE: 1,
  EG: 6,
  ES: 1,
  FI: 1,
  FJ: 1,
  FO: 1,
  FR: 1,
  GB: 1,
  GE: 1,
  GF: 1,
  GP: 1,
  GR: 1,
  HR: 1,
  HU: 1,
  IE: 1,
  IQ: 6,
  IR: 6,
  IS: 1,
  IT: 1,
  JO: 6,
  KG: 1,
  KW: 6,
  KZ: 1,
  LB: 1,
  LI: 1,
  LK: 1,
  LT: 1,
  LU: 1,
  LV: 1,
  LY: 6,
  MC: 1,
  MD: 1,
  ME: 1,
  MK: 1,
  MN: 1,
  MQ: 1,
  MV: 5,
  MY: 1,
  NL: 1,
  NO: 1,
  NZ: 1,
  OM: 6,
  PL: 1,
  QA: 6,
  RE: 1,
  RO: 1,
  RS: 1,
  RU: 1,
  SD: 6,
  SE: 1,
  SI: 1,
  SK: 1,
  SM: 1,
  SY: 6,
  TJ: 1,
  TM: 1,
  TR: 1,
  UA: 1,
  UY: 1,
  UZ: 1,
  VA: 1,
  VN: 1,
  XK: 1
};

function $571ccebef3ef72f1$export$ea39ec197993aef0(a, b) {
  b = $9ab2a87bc84c0bfa$export$b4a036af3fc0b032(b, a.calendar);
  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
}

function $571ccebef3ef72f1$export$a18c89cbd24170ff(a, b) {
  b = $9ab2a87bc84c0bfa$export$b4a036af3fc0b032(b, a.calendar); // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.

  a = $571ccebef3ef72f1$export$a5a3b454ada2268e(a);
  b = $571ccebef3ef72f1$export$a5a3b454ada2268e(b);
  return a.era === b.era && a.year === b.year && a.month === b.month;
}

function $571ccebef3ef72f1$export$5841f9eb9773f25f(a, b) {
  b = $9ab2a87bc84c0bfa$export$b4a036af3fc0b032(b, a.calendar);
  a = $571ccebef3ef72f1$export$f91e89d3d0406102(a);
  b = $571ccebef3ef72f1$export$f91e89d3d0406102(b);
  return a.era === b.era && a.year === b.year;
}

function $571ccebef3ef72f1$export$91b62ebf2ba703ee(a, b) {
  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
}

function $571ccebef3ef72f1$export$5a8da0c44a3afdf2(a, b) {
  a = $571ccebef3ef72f1$export$a5a3b454ada2268e(a);
  b = $571ccebef3ef72f1$export$a5a3b454ada2268e(b);
  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;
}

function $571ccebef3ef72f1$export$ea840f5a6dda8147(a, b) {
  a = $571ccebef3ef72f1$export$f91e89d3d0406102(a);
  b = $571ccebef3ef72f1$export$f91e89d3d0406102(b);
  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;
}

function $571ccebef3ef72f1$export$629b0a497aa65267(date, timeZone) {
  return $571ccebef3ef72f1$export$ea39ec197993aef0(date, $571ccebef3ef72f1$export$d0bdf45af03a6ea3(timeZone));
}

function $571ccebef3ef72f1$export$2061056d06d7cdf7(date, locale) {
  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust
  // accordingly.  Julian day 0 is Monday.

  let dayOfWeek = Math.ceil(julian + 1 - $571ccebef3ef72f1$var$getWeekStart(locale)) % 7;
  if (dayOfWeek < 0) dayOfWeek += 7;
  return dayOfWeek;
}

function $571ccebef3ef72f1$export$461939dd4422153(timeZone) {
  return $9ab2a87bc84c0bfa$export$1b96692a1ba042ac(Date.now(), timeZone);
}

function $571ccebef3ef72f1$export$d0bdf45af03a6ea3(timeZone) {
  return $9ab2a87bc84c0bfa$export$93522d1a439f3617($571ccebef3ef72f1$export$461939dd4422153(timeZone));
}

function $571ccebef3ef72f1$export$68781ddf31c0090f(a, b) {
  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);
}

function $571ccebef3ef72f1$export$c19a80a9721b80f6(a, b) {
  return $571ccebef3ef72f1$var$timeToMs(a) - $571ccebef3ef72f1$var$timeToMs(b);
}

function $571ccebef3ef72f1$var$timeToMs(a) {
  return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;
}

function $571ccebef3ef72f1$export$126c91c941de7e(a, timeZone) {
  let ms = $9ab2a87bc84c0bfa$export$5107c82f94518f5c(a, timeZone);
  let tomorrow = a.add({
    days: 1
  });
  let tomorrowMs = $9ab2a87bc84c0bfa$export$5107c82f94518f5c(tomorrow, timeZone);
  return (tomorrowMs - ms) / 3600000;
}

let $571ccebef3ef72f1$var$localTimeZone = null;

function $571ccebef3ef72f1$export$aa8b41735afcabd2() {
  // TODO: invalidate this somehow?
  if ($571ccebef3ef72f1$var$localTimeZone == null) $571ccebef3ef72f1$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;
  return $571ccebef3ef72f1$var$localTimeZone;
}

function $571ccebef3ef72f1$export$a5a3b454ada2268e(date) {
  // Use `subtract` instead of `set` so we don't get constrained in an era.
  return date.subtract({
    days: date.day - 1
  });
}

function $571ccebef3ef72f1$export$a2258d9c4118825c(date) {
  return date.add({
    days: date.calendar.getDaysInMonth(date) - date.day
  });
}

function $571ccebef3ef72f1$export$f91e89d3d0406102(date) {
  return $571ccebef3ef72f1$export$a5a3b454ada2268e(date.subtract({
    months: date.month - 1
  }));
}

function $571ccebef3ef72f1$export$8b7aa55c66d5569e(date) {
  return $571ccebef3ef72f1$export$a2258d9c4118825c(date.add({
    months: date.calendar.getMonthsInYear(date) - date.month
  }));
}

function $571ccebef3ef72f1$export$5412ac11713b72ad(date) {
  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);
  return 1;
}

function $571ccebef3ef72f1$export$b2f4953d301981d5(date) {
  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);
  return 1;
}

function $571ccebef3ef72f1$export$42c81a444fbfb5d4(date, locale) {
  let dayOfWeek = $571ccebef3ef72f1$export$2061056d06d7cdf7(date, locale);
  return date.subtract({
    days: dayOfWeek
  });
}

function $571ccebef3ef72f1$export$ef8b6d9133084f4e(date, locale) {
  return $571ccebef3ef72f1$export$42c81a444fbfb5d4(date, locale).add({
    days: 6
  });
}

const $571ccebef3ef72f1$var$cachedRegions = new Map();

function $571ccebef3ef72f1$var$getRegion(locale) {
  // If the Intl.Locale API is available, use it to get the region for the locale.
  // @ts-ignore
  if (Intl.Locale) {
    // Constructing an Intl.Locale is expensive, so cache the result.
    let region = $571ccebef3ef72f1$var$cachedRegions.get(locale);

    if (!region) {
      // @ts-ignore
      region = new Intl.Locale(locale).maximize().region;
      $571ccebef3ef72f1$var$cachedRegions.set(locale, region);
    }

    return region;
  } // If not, just try splitting the string.
  // If the second part of the locale string is 'u',
  // then this is a unicode extension, so ignore it.
  // Otherwise, it should be the region.


  let part = locale.split('-')[1];
  return part === 'u' ? null : part;
}

function $571ccebef3ef72f1$var$getWeekStart(locale) {
  // TODO: use Intl.Locale for this once browsers support the weekInfo property
  // https://github.com/tc39/proposal-intl-locale-info
  let region = $571ccebef3ef72f1$var$getRegion(locale);
  return $7470da919d0ed06d$export$7a5acbd77d414bd9[region] || 0;
}

function $571ccebef3ef72f1$export$ccc1b2479e7dd654(date, locale) {
  let days = date.calendar.getDaysInMonth(date);
  return Math.ceil(($571ccebef3ef72f1$export$2061056d06d7cdf7($571ccebef3ef72f1$export$a5a3b454ada2268e(date), locale) + days) / 7);
}

function $571ccebef3ef72f1$export$5c333a116e949cdd(a, b) {
  return a.compare(b) <= 0 ? a : b;
}

function $571ccebef3ef72f1$export$a75f2bff57811055(a, b) {
  return a.compare(b) >= 0 ? a : b;
}

const $571ccebef3ef72f1$var$WEEKEND_DATA = {
  AF: [4, 5],
  AE: [5, 6],
  BH: [5, 6],
  DZ: [5, 6],
  EG: [5, 6],
  IL: [5, 6],
  IQ: [5, 6],
  IR: [5, 5],
  JO: [5, 6],
  KW: [5, 6],
  LY: [5, 6],
  OM: [5, 6],
  QA: [5, 6],
  SA: [5, 6],
  SD: [5, 6],
  SY: [5, 6],
  YE: [5, 6]
};

function $571ccebef3ef72f1$export$618d60ea299da42(date, locale) {
  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust
  // accordingly.  Julian day 0 is Monday.

  let dayOfWeek = Math.ceil(julian + 1) % 7;
  if (dayOfWeek < 0) dayOfWeek += 7;
  let region = $571ccebef3ef72f1$var$getRegion(locale); // Use Intl.Locale for this once weekInfo is supported.
  // https://github.com/tc39/proposal-intl-locale-info

  let [start, end] = $571ccebef3ef72f1$var$WEEKEND_DATA[region] || [6, 0];
  return dayOfWeek === start || dayOfWeek === end;
}

function $571ccebef3ef72f1$export$ee9d87258e1d19ed(date, locale) {
  return !$571ccebef3ef72f1$export$618d60ea299da42(date, locale);
}

function $6a413dc772e69324$export$842a2cf37af977e1(amount, numerator) {
  return amount - numerator * Math.floor(amount / numerator);
}

function $6a413dc772e69324$export$784d13d8ee351f07(date) {
  if (date.era) return new $418a5bbf7b2f3448$export$99faa760c7908e4f(date.calendar, date.era, date.year, date.month, date.day);else return new $418a5bbf7b2f3448$export$99faa760c7908e4f(date.calendar, date.year, date.month, date.day);
}

function $6a413dc772e69324$export$27fa0172ae2644b3(date) {
  if (date.era) return new $418a5bbf7b2f3448$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);else return new $418a5bbf7b2f3448$export$ca871e8dbb80966f(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);
}

const $22a507fc519bfd45$var$EPOCH = 1721426; // 001/01/03 Julian C.E.

function $22a507fc519bfd45$export$f297eb839006d339(year, month, day) {
  let y1 = year - 1;
  let monthOffset = -2;
  if (month <= 2) monthOffset = 0;else if ($22a507fc519bfd45$export$553d7fa8e3805fc0(year)) monthOffset = -1;
  return $22a507fc519bfd45$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);
}

function $22a507fc519bfd45$export$553d7fa8e3805fc0(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

const $22a507fc519bfd45$var$daysInMonth = {
  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
};

class $22a507fc519bfd45$export$80ee6245ec4f29ec {
  fromJulianDay(jd) {
    let jd0 = jd;
    let depoch = jd0 - $22a507fc519bfd45$var$EPOCH;
    let quadricent = Math.floor(depoch / 146097);
    let dqc = $6a413dc772e69324$export$842a2cf37af977e1(depoch, 146097);
    let cent = Math.floor(dqc / 36524);
    let dcent = $6a413dc772e69324$export$842a2cf37af977e1(dqc, 36524);
    let quad = Math.floor(dcent / 1461);
    let dquad = $6a413dc772e69324$export$842a2cf37af977e1(dcent, 1461);
    let yindex = Math.floor(dquad / 365);
    let year = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);
    let yearDay = jd0 - $22a507fc519bfd45$export$f297eb839006d339(year, 1, 1);
    let leapAdj = 2;
    if (jd0 < $22a507fc519bfd45$export$f297eb839006d339(year, 3, 1)) leapAdj = 0;else if ($22a507fc519bfd45$export$553d7fa8e3805fc0(year)) leapAdj = 1;
    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);
    let day = jd0 - $22a507fc519bfd45$export$f297eb839006d339(year, month, 1) + 1;
    return new $418a5bbf7b2f3448$export$99faa760c7908e4f(this, year, month, day);
  }

  toJulianDay(date) {
    return $22a507fc519bfd45$export$f297eb839006d339(date.year, date.month, date.day);
  }

  getDaysInMonth(date) {
    return $22a507fc519bfd45$var$daysInMonth[$22a507fc519bfd45$export$553d7fa8e3805fc0(date.year) ? 'leapyear' : 'standard'][date.month - 1];
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  getMonthsInYear(date) {
    return 12;
  }

  getDaysInYear(date) {
    return $22a507fc519bfd45$export$553d7fa8e3805fc0(date.year) ? 366 : 365;
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  getYearsInEra(date) {
    return 9999;
  }

  getEras() {
    return ['BC', 'AD'];
  }

  getYearsToAdd(date, years) {
    return date.era === 'BC' ? -years : years;
  }

  balanceDate(date) {
    if (date.year <= 0) {
      date.era = date.era === 'BC' ? 'AD' : 'BC';
      date.year = 1 - date.year;
    }
  }

  constructor() {
    this.identifier = 'gregory';
  }

}

function $9ab2a87bc84c0bfa$export$bd4fb2bc8bb06fb(date) {
  date = $9ab2a87bc84c0bfa$export$b4a036af3fc0b032(date, new $22a507fc519bfd45$export$80ee6245ec4f29ec());
  return $9ab2a87bc84c0bfa$var$epochFromParts(date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);
}

function $9ab2a87bc84c0bfa$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {
  // Note: Date.UTC() interprets one and two-digit years as being in the
  // 20th century, so don't use it
  let date = new Date();
  date.setUTCHours(hour, minute, second, millisecond);
  date.setUTCFullYear(year, month - 1, day);
  return date.getTime();
}

function $9ab2a87bc84c0bfa$export$59c99f3515d3493f(ms, timeZone) {
  // Fast path: for local timezone, use native Date.
  if (timeZone === $571ccebef3ef72f1$export$aa8b41735afcabd2()) return new Date(ms).getTimezoneOffset() * -60000;
  let {
    year: year,
    month: month,
    day: day,
    hour: hour,
    minute: minute,
    second: second
  } = $9ab2a87bc84c0bfa$var$getTimeZoneParts(ms, timeZone);
  let utc = $9ab2a87bc84c0bfa$var$epochFromParts(year, month, day, hour, minute, second, 0);
  return utc - Math.floor(ms / 1000) * 1000;
}

const $9ab2a87bc84c0bfa$var$formattersByTimeZone = new Map();

function $9ab2a87bc84c0bfa$var$getTimeZoneParts(ms, timeZone) {
  let formatter = $9ab2a87bc84c0bfa$var$formattersByTimeZone.get(timeZone);

  if (!formatter) {
    formatter = new Intl.DateTimeFormat('en-US', {
      timeZone: timeZone,
      hour12: false,
      era: 'short',
      year: 'numeric',
      month: 'numeric',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric'
    });
    $9ab2a87bc84c0bfa$var$formattersByTimeZone.set(timeZone, formatter);
  }

  let parts = formatter.formatToParts(new Date(ms));
  let namedParts = {};

  for (let part of parts) if (part.type !== 'literal') namedParts[part.type] = part.value;

  return {
    year: namedParts.era === 'BC' ? -namedParts.year + 1 : +namedParts.year,
    month: +namedParts.month,
    day: +namedParts.day,
    hour: namedParts.hour === '24' ? 0 : +namedParts.hour,
    minute: +namedParts.minute,
    second: +namedParts.second
  };
}

const $9ab2a87bc84c0bfa$var$DAYMILLIS = 86400000;

function $9ab2a87bc84c0bfa$export$136f38efe7caf549(date, timeZone) {
  let ms = $9ab2a87bc84c0bfa$export$bd4fb2bc8bb06fb(date);
  let earlier = ms - $9ab2a87bc84c0bfa$export$59c99f3515d3493f(ms - $9ab2a87bc84c0bfa$var$DAYMILLIS, timeZone);
  let later = ms - $9ab2a87bc84c0bfa$export$59c99f3515d3493f(ms + $9ab2a87bc84c0bfa$var$DAYMILLIS, timeZone);
  return $9ab2a87bc84c0bfa$var$getValidWallTimes(date, timeZone, earlier, later);
}

function $9ab2a87bc84c0bfa$var$getValidWallTimes(date, timeZone, earlier, later) {
  let found = earlier === later ? [earlier] : [earlier, later];
  return found.filter(absolute => $9ab2a87bc84c0bfa$var$isValidWallTime(date, timeZone, absolute));
}

function $9ab2a87bc84c0bfa$var$isValidWallTime(date, timeZone, absolute) {
  let parts = $9ab2a87bc84c0bfa$var$getTimeZoneParts(absolute, timeZone);
  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;
}

function $9ab2a87bc84c0bfa$export$5107c82f94518f5c(date, timeZone, disambiguation = 'compatible') {
  let dateTime = $9ab2a87bc84c0bfa$export$b21e0b124e224484(date); // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.

  if (timeZone === $571ccebef3ef72f1$export$aa8b41735afcabd2() && disambiguation === 'compatible') {
    dateTime = $9ab2a87bc84c0bfa$export$b4a036af3fc0b032(dateTime, new $22a507fc519bfd45$export$80ee6245ec4f29ec()); // Don't use Date constructor here because two-digit years are interpreted in the 20th century.

    let date = new Date();
    date.setFullYear(dateTime.year, dateTime.month - 1, dateTime.day);
    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
    return date.getTime();
  }

  let ms = $9ab2a87bc84c0bfa$export$bd4fb2bc8bb06fb(dateTime);
  let offsetBefore = $9ab2a87bc84c0bfa$export$59c99f3515d3493f(ms - $9ab2a87bc84c0bfa$var$DAYMILLIS, timeZone);
  let offsetAfter = $9ab2a87bc84c0bfa$export$59c99f3515d3493f(ms + $9ab2a87bc84c0bfa$var$DAYMILLIS, timeZone);
  let valid = $9ab2a87bc84c0bfa$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);
  if (valid.length === 1) return valid[0];
  if (valid.length > 1) switch (disambiguation) {
    // 'compatible' means 'earlier' for "fall back" transitions
    case 'compatible':
    case 'earlier':
      return valid[0];

    case 'later':
      return valid[valid.length - 1];

    case 'reject':
      throw new RangeError('Multiple possible absolute times found');
  }

  switch (disambiguation) {
    case 'earlier':
      return Math.min(ms - offsetBefore, ms - offsetAfter);
    // 'compatible' means 'later' for "spring forward" transitions

    case 'compatible':
    case 'later':
      return Math.max(ms - offsetBefore, ms - offsetAfter);

    case 'reject':
      throw new RangeError('No such absolute time found');
  }
}

function $9ab2a87bc84c0bfa$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = 'compatible') {
  return new Date($9ab2a87bc84c0bfa$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));
}

function $9ab2a87bc84c0bfa$export$1b96692a1ba042ac(ms, timeZone) {
  let offset = $9ab2a87bc84c0bfa$export$59c99f3515d3493f(ms, timeZone);
  let date = new Date(ms + offset);
  let year = date.getUTCFullYear();
  let month = date.getUTCMonth() + 1;
  let day = date.getUTCDate();
  let hour = date.getUTCHours();
  let minute = date.getUTCMinutes();
  let second = date.getUTCSeconds();
  let millisecond = date.getUTCMilliseconds();
  return new $418a5bbf7b2f3448$export$d3b7288e7994edea(year, month, day, timeZone, offset, hour, minute, second, millisecond);
}

function $9ab2a87bc84c0bfa$export$e57ff100d91bd4b9(date, timeZone) {
  return $9ab2a87bc84c0bfa$export$1b96692a1ba042ac(date.getTime(), timeZone);
}

function $9ab2a87bc84c0bfa$export$d7f92bcd3596b086(date) {
  return $9ab2a87bc84c0bfa$export$e57ff100d91bd4b9(date, $571ccebef3ef72f1$export$aa8b41735afcabd2());
}

function $9ab2a87bc84c0bfa$export$93522d1a439f3617(dateTime) {
  return new $418a5bbf7b2f3448$export$99faa760c7908e4f(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);
}

function $9ab2a87bc84c0bfa$export$6f4d78149f3f53ac(date) {
  return {
    era: date.era,
    year: date.year,
    month: date.month,
    day: date.day
  };
}

function $9ab2a87bc84c0bfa$export$4d0393e732857be5(date) {
  return {
    hour: date.hour,
    minute: date.minute,
    second: date.second,
    millisecond: date.millisecond
  };
}

function $9ab2a87bc84c0bfa$export$b21e0b124e224484(date, time) {
  let hour = 0,
      minute = 0,
      second = 0,
      millisecond = 0;
  if ('timeZone' in date) ({
    hour: hour,
    minute: minute,
    second: second,
    millisecond: millisecond
  } = date);else if ('hour' in date && !time) return date;
  if (time) ({
    hour: hour,
    minute: minute,
    second: second,
    millisecond: millisecond
  } = time);
  return new $418a5bbf7b2f3448$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);
}

function $9ab2a87bc84c0bfa$export$d33f79e3ffc3dc83(dateTime) {
  return new $418a5bbf7b2f3448$export$680ea196effce5f(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
}

function $9ab2a87bc84c0bfa$export$b4a036af3fc0b032(date, calendar) {
  if (date.calendar.identifier === calendar.identifier) return date;
  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));
  let copy = date.copy();
  copy.calendar = calendar;
  copy.era = calendarDate.era;
  copy.year = calendarDate.year;
  copy.month = calendarDate.month;
  copy.day = calendarDate.day;
  return copy;
}

function $9ab2a87bc84c0bfa$export$84c95a83c799e074(date, timeZone, disambiguation) {
  if (date instanceof $418a5bbf7b2f3448$export$d3b7288e7994edea) {
    if (date.timeZone === timeZone) return date;
    return $9ab2a87bc84c0bfa$export$538b00033cc11c75(date, timeZone);
  }

  let ms = $9ab2a87bc84c0bfa$export$5107c82f94518f5c(date, timeZone, disambiguation);
  return $9ab2a87bc84c0bfa$export$1b96692a1ba042ac(ms, timeZone);
}

function $9ab2a87bc84c0bfa$export$83aac07b4c37b25(date) {
  let ms = $9ab2a87bc84c0bfa$export$bd4fb2bc8bb06fb(date) - date.offset;
  return new Date(ms);
}

function $9ab2a87bc84c0bfa$export$538b00033cc11c75(date, timeZone) {
  let ms = $9ab2a87bc84c0bfa$export$bd4fb2bc8bb06fb(date) - date.offset;
  return $9ab2a87bc84c0bfa$export$b4a036af3fc0b032($9ab2a87bc84c0bfa$export$1b96692a1ba042ac(ms, timeZone), date.calendar);
}

function $9ab2a87bc84c0bfa$export$d9b67bc93c097491(date) {
  return $9ab2a87bc84c0bfa$export$538b00033cc11c75(date, $571ccebef3ef72f1$export$aa8b41735afcabd2());
}

const $1e1f3157d0513e0f$var$ONE_HOUR = 3600000;

function $1e1f3157d0513e0f$export$e16d8520af44a096(date, duration) {
  let mutableDate = date.copy();
  let days = 'hour' in date ? $1e1f3157d0513e0f$var$addTimeFields(date, duration) : 0;
  $1e1f3157d0513e0f$var$addYears(mutableDate, duration.years || 0);
  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);
  mutableDate.month += duration.months || 0;
  $1e1f3157d0513e0f$var$balanceYearMonth(mutableDate);
  $1e1f3157d0513e0f$var$constrainMonthDay(mutableDate);
  mutableDate.day += (duration.weeks || 0) * 7;
  mutableDate.day += duration.days || 0;
  mutableDate.day += days;
  $1e1f3157d0513e0f$var$balanceDay(mutableDate);
  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);
  return mutableDate;
}

function $1e1f3157d0513e0f$var$addYears(date, years) {
  if (date.calendar.getYearsToAdd) years = date.calendar.getYearsToAdd(date, years);
  date.year += years;
}

function $1e1f3157d0513e0f$var$balanceYearMonth(date) {
  while (date.month < 1) {
    $1e1f3157d0513e0f$var$addYears(date, -1);
    date.month += date.calendar.getMonthsInYear(date);
  }

  let monthsInYear = 0;

  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {
    date.month -= monthsInYear;
    $1e1f3157d0513e0f$var$addYears(date, 1);
  }
}

function $1e1f3157d0513e0f$var$balanceDay(date) {
  while (date.day < 1) {
    date.month--;
    $1e1f3157d0513e0f$var$balanceYearMonth(date);
    date.day += date.calendar.getDaysInMonth(date);
  }

  while (date.day > date.calendar.getDaysInMonth(date)) {
    date.day -= date.calendar.getDaysInMonth(date);
    date.month++;
    $1e1f3157d0513e0f$var$balanceYearMonth(date);
  }
}

function $1e1f3157d0513e0f$var$constrainMonthDay(date) {
  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));
  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));
}

function $1e1f3157d0513e0f$export$c4e2ecac49351ef2(date) {
  if (date.calendar.constrainDate) date.calendar.constrainDate(date);
  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));
  $1e1f3157d0513e0f$var$constrainMonthDay(date);
}

function $1e1f3157d0513e0f$export$3e2544e88a25bff8(duration) {
  let inverseDuration = {};

  for (let key in duration) if (typeof duration[key] === 'number') inverseDuration[key] = -duration[key];

  return inverseDuration;
}

function $1e1f3157d0513e0f$export$4e2d2ead65e5f7e3(date, duration) {
  return $1e1f3157d0513e0f$export$e16d8520af44a096(date, $1e1f3157d0513e0f$export$3e2544e88a25bff8(duration));
}

function $1e1f3157d0513e0f$export$adaa4cf7ef1b65be(date, fields) {
  let mutableDate = date.copy();
  if (fields.era != null) mutableDate.era = fields.era;
  if (fields.year != null) mutableDate.year = fields.year;
  if (fields.month != null) mutableDate.month = fields.month;
  if (fields.day != null) mutableDate.day = fields.day;
  $1e1f3157d0513e0f$export$c4e2ecac49351ef2(mutableDate);
  return mutableDate;
}

function $1e1f3157d0513e0f$export$e5d5e1c1822b6e56(value, fields) {
  let mutableValue = value.copy();
  if (fields.hour != null) mutableValue.hour = fields.hour;
  if (fields.minute != null) mutableValue.minute = fields.minute;
  if (fields.second != null) mutableValue.second = fields.second;
  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;
  $1e1f3157d0513e0f$export$7555de1e070510cb(mutableValue);
  return mutableValue;
}

function $1e1f3157d0513e0f$var$balanceTime(time) {
  time.second += Math.floor(time.millisecond / 1000);
  time.millisecond = $1e1f3157d0513e0f$var$nonNegativeMod(time.millisecond, 1000);
  time.minute += Math.floor(time.second / 60);
  time.second = $1e1f3157d0513e0f$var$nonNegativeMod(time.second, 60);
  time.hour += Math.floor(time.minute / 60);
  time.minute = $1e1f3157d0513e0f$var$nonNegativeMod(time.minute, 60);
  let days = Math.floor(time.hour / 24);
  time.hour = $1e1f3157d0513e0f$var$nonNegativeMod(time.hour, 24);
  return days;
}

function $1e1f3157d0513e0f$export$7555de1e070510cb(time) {
  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));
  time.second = Math.max(0, Math.min(time.second, 59));
  time.minute = Math.max(0, Math.min(time.minute, 59));
  time.hour = Math.max(0, Math.min(time.hour, 23));
}

function $1e1f3157d0513e0f$var$nonNegativeMod(a, b) {
  let result = a % b;
  if (result < 0) result += b;
  return result;
}

function $1e1f3157d0513e0f$var$addTimeFields(time, duration) {
  time.hour += duration.hours || 0;
  time.minute += duration.minutes || 0;
  time.second += duration.seconds || 0;
  time.millisecond += duration.milliseconds || 0;
  return $1e1f3157d0513e0f$var$balanceTime(time);
}

function $1e1f3157d0513e0f$export$7ed87b6bc2506470(time, duration) {
  let res = time.copy();
  $1e1f3157d0513e0f$var$addTimeFields(res, duration);
  return res;
}

function $1e1f3157d0513e0f$export$fe34d3a381cd7501(time, duration) {
  return $1e1f3157d0513e0f$export$7ed87b6bc2506470(time, $1e1f3157d0513e0f$export$3e2544e88a25bff8(duration));
}

function $1e1f3157d0513e0f$export$d52ced6badfb9a4c(value, field, amount, options) {
  let mutable = value.copy();

  switch (field) {
    case 'era':
      {
        let eras = value.calendar.getEras();
        let eraIndex = eras.indexOf(value.era);
        if (eraIndex < 0) throw new Error('Invalid era: ' + value.era);
        eraIndex = $1e1f3157d0513e0f$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);
        mutable.era = eras[eraIndex]; // Constrain the year and other fields within the era, so the era doesn't change when we balance below.

        $1e1f3157d0513e0f$export$c4e2ecac49351ef2(mutable);
        break;
      }

    case 'year':
      if (mutable.calendar.getYearsToAdd) amount = mutable.calendar.getYearsToAdd(mutable, amount); // The year field should not cycle within the era as that can cause weird behavior affecting other fields.
      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back
      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.

      mutable.year = $1e1f3157d0513e0f$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);
      if (mutable.year === -Infinity) mutable.year = 1;
      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);
      break;

    case 'month':
      mutable.month = $1e1f3157d0513e0f$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);
      break;

    case 'day':
      mutable.day = $1e1f3157d0513e0f$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);
      break;

    default:
      throw new Error('Unsupported field ' + field);
  }

  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);
  $1e1f3157d0513e0f$export$c4e2ecac49351ef2(mutable);
  return mutable;
}

function $1e1f3157d0513e0f$export$dd02b3e0007dfe28(value, field, amount, options) {
  let mutable = value.copy();

  switch (field) {
    case 'hour':
      {
        let hours = value.hour;
        let min = 0;
        let max = 23;

        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
          let isPM = hours >= 12;
          min = isPM ? 12 : 0;
          max = isPM ? 23 : 11;
        }

        mutable.hour = $1e1f3157d0513e0f$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);
        break;
      }

    case 'minute':
      mutable.minute = $1e1f3157d0513e0f$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
      break;

    case 'second':
      mutable.second = $1e1f3157d0513e0f$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
      break;

    case 'millisecond':
      mutable.millisecond = $1e1f3157d0513e0f$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);
      break;

    default:
      throw new Error('Unsupported field ' + field);
  }

  return mutable;
}

function $1e1f3157d0513e0f$var$cycleValue(value, amount, min, max, round = false) {
  if (round) {
    value += Math.sign(amount);
    if (value < min) value = max;
    let div = Math.abs(amount);
    if (amount > 0) value = Math.ceil(value / div) * div;else value = Math.floor(value / div) * div;
    if (value > max) value = min;
  } else {
    value += amount;
    if (value < min) value = max - (min - value - 1);else if (value > max) value = min + (value - max - 1);
  }

  return value;
}

function $1e1f3157d0513e0f$export$96b1d28349274637(dateTime, duration) {
  let ms;

  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.days != null && duration.days !== 0) {
    let res = $1e1f3157d0513e0f$export$e16d8520af44a096($9ab2a87bc84c0bfa$export$b21e0b124e224484(dateTime), {
      years: duration.years,
      months: duration.months,
      days: duration.days
    }); // Changing the date may change the timezone offset, so we need to recompute
    // using the 'compatible' disambiguation.

    ms = $9ab2a87bc84c0bfa$export$5107c82f94518f5c(res, dateTime.timeZone);
  } else // Otherwise, preserve the offset of the original date.
    ms = $9ab2a87bc84c0bfa$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset; // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.
  // For example, adding one hour during a DST transition may result in the hour field staying the same or
  // skipping an hour. This results in the offset field changing value instead of the specified field.


  ms += duration.milliseconds || 0;
  ms += (duration.seconds || 0) * 1000;
  ms += (duration.minutes || 0) * 60000;
  ms += (duration.hours || 0) * 3600000;
  let res = $9ab2a87bc84c0bfa$export$1b96692a1ba042ac(ms, dateTime.timeZone);
  return $9ab2a87bc84c0bfa$export$b4a036af3fc0b032(res, dateTime.calendar);
}

function $1e1f3157d0513e0f$export$6814caac34ca03c7(dateTime, duration) {
  return $1e1f3157d0513e0f$export$96b1d28349274637(dateTime, $1e1f3157d0513e0f$export$3e2544e88a25bff8(duration));
}

function $1e1f3157d0513e0f$export$9a297d111fc86b79(dateTime, field, amount, options) {
  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.
  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC
  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.
  switch (field) {
    case 'hour':
      {
        let min = 0;
        let max = 23;

        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
          let isPM = dateTime.hour >= 12;
          min = isPM ? 12 : 0;
          max = isPM ? 23 : 11;
        } // The minimum and maximum hour may be affected by daylight saving time.
        // For example, it might jump forward at midnight, and skip 1am.
        // Or it might end at midnight and repeat the 11pm hour. To handle this, we get
        // the possible absolute times for the min and max, and find the maximum range
        // that is within the current day.


        let plainDateTime = $9ab2a87bc84c0bfa$export$b21e0b124e224484(dateTime);
        let minDate = $9ab2a87bc84c0bfa$export$b4a036af3fc0b032($1e1f3157d0513e0f$export$e5d5e1c1822b6e56(plainDateTime, {
          hour: min
        }), new $22a507fc519bfd45$export$80ee6245ec4f29ec());
        let minAbsolute = [$9ab2a87bc84c0bfa$export$5107c82f94518f5c(minDate, dateTime.timeZone, 'earlier'), $9ab2a87bc84c0bfa$export$5107c82f94518f5c(minDate, dateTime.timeZone, 'later')].filter(ms => $9ab2a87bc84c0bfa$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === minDate.day)[0];
        let maxDate = $9ab2a87bc84c0bfa$export$b4a036af3fc0b032($1e1f3157d0513e0f$export$e5d5e1c1822b6e56(plainDateTime, {
          hour: max
        }), new $22a507fc519bfd45$export$80ee6245ec4f29ec());
        let maxAbsolute = [$9ab2a87bc84c0bfa$export$5107c82f94518f5c(maxDate, dateTime.timeZone, 'earlier'), $9ab2a87bc84c0bfa$export$5107c82f94518f5c(maxDate, dateTime.timeZone, 'later')].filter(ms => $9ab2a87bc84c0bfa$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === maxDate.day).pop(); // Since hours may repeat, we need to operate on the absolute time in milliseconds.
        // This is done in hours from the Unix epoch so that cycleValue works correctly,
        // and then converted back to milliseconds.

        let ms1 = $9ab2a87bc84c0bfa$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;
        let hours = Math.floor(ms1 / $1e1f3157d0513e0f$var$ONE_HOUR);
        let remainder = ms1 % $1e1f3157d0513e0f$var$ONE_HOUR;
        ms1 = $1e1f3157d0513e0f$var$cycleValue(hours, amount, Math.floor(minAbsolute / $1e1f3157d0513e0f$var$ONE_HOUR), Math.floor(maxAbsolute / $1e1f3157d0513e0f$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $1e1f3157d0513e0f$var$ONE_HOUR + remainder; // Now compute the new timezone offset, and convert the absolute time back to local time.

        return $9ab2a87bc84c0bfa$export$b4a036af3fc0b032($9ab2a87bc84c0bfa$export$1b96692a1ba042ac(ms1, dateTime.timeZone), dateTime.calendar);
      }

    case 'minute':
    case 'second':
    case 'millisecond':
      // @ts-ignore
      return $1e1f3157d0513e0f$export$dd02b3e0007dfe28(dateTime, field, amount, options);

    case 'era':
    case 'year':
    case 'month':
    case 'day':
      {
        let res = $1e1f3157d0513e0f$export$d52ced6badfb9a4c($9ab2a87bc84c0bfa$export$b21e0b124e224484(dateTime), field, amount, options);
        let ms = $9ab2a87bc84c0bfa$export$5107c82f94518f5c(res, dateTime.timeZone);
        return $9ab2a87bc84c0bfa$export$b4a036af3fc0b032($9ab2a87bc84c0bfa$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
      }

    default:
      throw new Error('Unsupported field ' + field);
  }
}

function $1e1f3157d0513e0f$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {
  // Set the date/time fields, and recompute the UTC offset to account for DST changes.
  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.
  let plainDateTime = $9ab2a87bc84c0bfa$export$b21e0b124e224484(dateTime);
  let res = $1e1f3157d0513e0f$export$e5d5e1c1822b6e56($1e1f3157d0513e0f$export$adaa4cf7ef1b65be(plainDateTime, fields), fields); // If the resulting plain date time values are equal, return the original time.
  // We don't want to change the offset when setting the time to the same value.

  if (res.compare(plainDateTime) === 0) return dateTime;
  let ms = $9ab2a87bc84c0bfa$export$5107c82f94518f5c(res, dateTime.timeZone, disambiguation);
  return $9ab2a87bc84c0bfa$export$b4a036af3fc0b032($9ab2a87bc84c0bfa$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
}

var $78b7d46219519df2$exports = {};
date_dist_module_$parcel$export($78b7d46219519df2$exports, "parseTime", () => $78b7d46219519df2$export$c9698ec7f05a07e1);
date_dist_module_$parcel$export($78b7d46219519df2$exports, "parseDate", () => $78b7d46219519df2$export$6b862160d295c8e);
date_dist_module_$parcel$export($78b7d46219519df2$exports, "parseDateTime", () => $78b7d46219519df2$export$588937bcd60ade55);
date_dist_module_$parcel$export($78b7d46219519df2$exports, "parseZonedDateTime", () => $78b7d46219519df2$export$fd7893f06e92a6a4);
date_dist_module_$parcel$export($78b7d46219519df2$exports, "dateTimeToString", () => $78b7d46219519df2$export$4223de14708adc63);
date_dist_module_$parcel$export($78b7d46219519df2$exports, "parseAbsolute", () => $78b7d46219519df2$export$5adfdab05168c219);
date_dist_module_$parcel$export($78b7d46219519df2$exports, "parseAbsoluteToLocal", () => $78b7d46219519df2$export$8e384432362ed0f0);
date_dist_module_$parcel$export($78b7d46219519df2$exports, "timeToString", () => $78b7d46219519df2$export$f59dee82248f5ad4);
date_dist_module_$parcel$export($78b7d46219519df2$exports, "dateToString", () => $78b7d46219519df2$export$60dfd74aa96791bd);
date_dist_module_$parcel$export($78b7d46219519df2$exports, "zonedDateTimeToString", () => $78b7d46219519df2$export$bf79f1ebf4b18792);
const $78b7d46219519df2$var$TIME_RE = /^(\d{2})(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?$/;
const $78b7d46219519df2$var$DATE_RE = /^(\d{4})-(\d{2})-(\d{2})$/;
const $78b7d46219519df2$var$DATE_TIME_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?$/;
const $78b7d46219519df2$var$ZONED_DATE_TIME_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?(?:([+-]\d{2})(?::(\d{2}))?)?\[(.*?)\]$/;
const $78b7d46219519df2$var$ABSOLUTE_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?(?:(?:([+-]\d{2})(?::(\d{2}))?)|Z)$/;

function $78b7d46219519df2$export$c9698ec7f05a07e1(value) {
  let m = value.match($78b7d46219519df2$var$TIME_RE);
  if (!m) throw new Error('Invalid ISO 8601 time string: ' + value);
  return new $418a5bbf7b2f3448$export$680ea196effce5f($78b7d46219519df2$var$parseNumber(m[1], 0, 23), m[2] ? $78b7d46219519df2$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $78b7d46219519df2$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $78b7d46219519df2$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);
}

function $78b7d46219519df2$export$6b862160d295c8e(value) {
  let m = value.match($78b7d46219519df2$var$DATE_RE);
  if (!m) throw new Error('Invalid ISO 8601 date string: ' + value);
  let date = new $418a5bbf7b2f3448$export$99faa760c7908e4f($78b7d46219519df2$var$parseNumber(m[1], 0, 9999), $78b7d46219519df2$var$parseNumber(m[2], 1, 12), 1);
  date.day = $78b7d46219519df2$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  return date;
}

function $78b7d46219519df2$export$588937bcd60ade55(value) {
  let m = value.match($78b7d46219519df2$var$DATE_TIME_RE);
  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);
  let date = new $418a5bbf7b2f3448$export$ca871e8dbb80966f($78b7d46219519df2$var$parseNumber(m[1], 1, 9999), $78b7d46219519df2$var$parseNumber(m[2], 1, 12), 1, m[4] ? $78b7d46219519df2$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $78b7d46219519df2$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $78b7d46219519df2$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $78b7d46219519df2$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);
  date.day = $78b7d46219519df2$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  return date;
}

function $78b7d46219519df2$export$fd7893f06e92a6a4(value, disambiguation) {
  let m = value.match($78b7d46219519df2$var$ZONED_DATE_TIME_RE);
  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);
  let date = new $418a5bbf7b2f3448$export$d3b7288e7994edea($78b7d46219519df2$var$parseNumber(m[1], 1, 9999), $78b7d46219519df2$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $78b7d46219519df2$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $78b7d46219519df2$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $78b7d46219519df2$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $78b7d46219519df2$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);
  date.day = $78b7d46219519df2$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  let plainDateTime = $9ab2a87bc84c0bfa$export$b21e0b124e224484(date);
  let ms;

  if (m[8]) {
    var ref;
    date.offset = $78b7d46219519df2$var$parseNumber(m[8], -23, 23) * 3600000 + $78b7d46219519df2$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : '0', 0, 59) * 60000;
    ms = $9ab2a87bc84c0bfa$export$bd4fb2bc8bb06fb(date) - date.offset; // Validate offset against parsed date.

    let absolutes = $9ab2a87bc84c0bfa$export$136f38efe7caf549(plainDateTime, date.timeZone);
    if (!absolutes.includes(ms)) throw new Error(`Offset ${$78b7d46219519df2$var$offsetToString(date.offset)} is invalid for ${$78b7d46219519df2$export$4223de14708adc63(date)} in ${date.timeZone}`);
  } else // Convert to absolute and back to fix invalid times due to DST.
    ms = $9ab2a87bc84c0bfa$export$5107c82f94518f5c($9ab2a87bc84c0bfa$export$b21e0b124e224484(plainDateTime), date.timeZone, disambiguation);

  return $9ab2a87bc84c0bfa$export$1b96692a1ba042ac(ms, date.timeZone);
}

function $78b7d46219519df2$export$5adfdab05168c219(value, timeZone) {
  let m = value.match($78b7d46219519df2$var$ABSOLUTE_RE);
  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);
  let date = new $418a5bbf7b2f3448$export$d3b7288e7994edea($78b7d46219519df2$var$parseNumber(m[1], 1, 9999), $78b7d46219519df2$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $78b7d46219519df2$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $78b7d46219519df2$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $78b7d46219519df2$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $78b7d46219519df2$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);
  date.day = $78b7d46219519df2$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  var ref;
  if (m[8]) date.offset = $78b7d46219519df2$var$parseNumber(m[8], -23, 23) * 3600000 + $78b7d46219519df2$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : '0', 0, 59) * 60000;
  return $9ab2a87bc84c0bfa$export$538b00033cc11c75(date, timeZone);
}

function $78b7d46219519df2$export$8e384432362ed0f0(value) {
  return $78b7d46219519df2$export$5adfdab05168c219(value, $571ccebef3ef72f1$export$aa8b41735afcabd2());
}

function $78b7d46219519df2$var$parseNumber(value, min, max) {
  let val = Number(value);
  if (val < min || val > max) throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);
  return val;
}

function $78b7d46219519df2$export$f59dee82248f5ad4(time) {
  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;
}

function $78b7d46219519df2$export$60dfd74aa96791bd(date) {
  let gregorianDate = $9ab2a87bc84c0bfa$export$b4a036af3fc0b032(date, new $22a507fc519bfd45$export$80ee6245ec4f29ec());
  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;
}

function $78b7d46219519df2$export$4223de14708adc63(date) {
  // @ts-ignore
  return `${$78b7d46219519df2$export$60dfd74aa96791bd(date)}T${$78b7d46219519df2$export$f59dee82248f5ad4(date)}`;
}

function $78b7d46219519df2$var$offsetToString(offset) {
  let sign = Math.sign(offset) < 0 ? '-' : '+';
  offset = Math.abs(offset);
  let offsetHours = Math.floor(offset / 3600000);
  let offsetMinutes = offset % 3600000 / 60000;
  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;
}

function $78b7d46219519df2$export$bf79f1ebf4b18792(date) {
  return `${$78b7d46219519df2$export$4223de14708adc63(date)}${$78b7d46219519df2$var$offsetToString(date.offset)}[${date.timeZone}]`;
}

function $418a5bbf7b2f3448$var$shiftArgs(args) {
  let calendar = typeof args[0] === 'object' ? args.shift() : new $22a507fc519bfd45$export$80ee6245ec4f29ec();
  let era;
  if (typeof args[0] === 'string') era = args.shift();else {
    let eras = calendar.getEras();
    era = eras[eras.length - 1];
  }
  let year = args.shift();
  let month = args.shift();
  let day = args.shift();
  return [calendar, era, year, month, day];
}

class $418a5bbf7b2f3448$export$99faa760c7908e4f {
  copy() {
    if (this.era) return new $418a5bbf7b2f3448$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);else return new $418a5bbf7b2f3448$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);
  }

  add(duration) {
    return $1e1f3157d0513e0f$export$e16d8520af44a096(this, duration);
  }

  subtract(duration) {
    return $1e1f3157d0513e0f$export$4e2d2ead65e5f7e3(this, duration);
  }

  set(fields) {
    return $1e1f3157d0513e0f$export$adaa4cf7ef1b65be(this, fields);
  }

  cycle(field, amount, options) {
    return $1e1f3157d0513e0f$export$d52ced6badfb9a4c(this, field, amount, options);
  }

  toDate(timeZone) {
    return $9ab2a87bc84c0bfa$export$e67a095c620b86fe(this, timeZone);
  }

  toString() {
    return $78b7d46219519df2$export$60dfd74aa96791bd(this);
  }

  compare(b) {
    return $571ccebef3ef72f1$export$68781ddf31c0090f(this, b);
  }

  constructor(...args) {
    // This prevents TypeScript from allowing other types with the same fields to match.
    // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.
    // If that behavior is desired, use the AnyCalendarDate interface instead.
    _type.set(this, {
      writable: true,
      value: void 0
    });

    let [calendar, era, year, month, day] = $418a5bbf7b2f3448$var$shiftArgs(args);
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    $1e1f3157d0513e0f$export$c4e2ecac49351ef2(this);
  }

}

var _type = new WeakMap();

class $418a5bbf7b2f3448$export$680ea196effce5f {
  copy() {
    return new $418a5bbf7b2f3448$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);
  }

  add(duration) {
    return $1e1f3157d0513e0f$export$7ed87b6bc2506470(this, duration);
  }

  subtract(duration) {
    return $1e1f3157d0513e0f$export$fe34d3a381cd7501(this, duration);
  }

  set(fields) {
    return $1e1f3157d0513e0f$export$e5d5e1c1822b6e56(this, fields);
  }

  cycle(field, amount, options) {
    return $1e1f3157d0513e0f$export$dd02b3e0007dfe28(this, field, amount, options);
  }

  toString() {
    return $78b7d46219519df2$export$f59dee82248f5ad4(this);
  }

  compare(b) {
    return $571ccebef3ef72f1$export$c19a80a9721b80f6(this, b);
  }

  constructor(hour = 0, minute = 0, second = 0, millisecond = 0) {
    // This prevents TypeScript from allowing other types with the same fields to match.
    _type1.set(this, {
      writable: true,
      value: void 0
    });

    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.millisecond = millisecond;
    $1e1f3157d0513e0f$export$7555de1e070510cb(this);
  }

}

var _type1 = new WeakMap();

class $418a5bbf7b2f3448$export$ca871e8dbb80966f {
  copy() {
    if (this.era) return new $418a5bbf7b2f3448$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);else return new $418a5bbf7b2f3448$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
  }

  add(duration) {
    return $1e1f3157d0513e0f$export$e16d8520af44a096(this, duration);
  }

  subtract(duration) {
    return $1e1f3157d0513e0f$export$4e2d2ead65e5f7e3(this, duration);
  }

  set(fields) {
    return $1e1f3157d0513e0f$export$adaa4cf7ef1b65be($1e1f3157d0513e0f$export$e5d5e1c1822b6e56(this, fields), fields);
  }

  cycle(field, amount, options) {
    switch (field) {
      case 'era':
      case 'year':
      case 'month':
      case 'day':
        return $1e1f3157d0513e0f$export$d52ced6badfb9a4c(this, field, amount, options);

      default:
        return $1e1f3157d0513e0f$export$dd02b3e0007dfe28(this, field, amount, options);
    }
  }

  toDate(timeZone) {
    return $9ab2a87bc84c0bfa$export$e67a095c620b86fe(this, timeZone);
  }

  toString() {
    return $78b7d46219519df2$export$4223de14708adc63(this);
  }

  compare(b) {
    let res = $571ccebef3ef72f1$export$68781ddf31c0090f(this, b);
    if (res === 0) return $571ccebef3ef72f1$export$c19a80a9721b80f6(this, $9ab2a87bc84c0bfa$export$b21e0b124e224484(b));
    return res;
  }

  constructor(...args) {
    // This prevents TypeScript from allowing other types with the same fields to match.
    _type2.set(this, {
      writable: true,
      value: void 0
    });

    let [calendar, era, year, month, day] = $418a5bbf7b2f3448$var$shiftArgs(args);
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = args.shift() || 0;
    this.minute = args.shift() || 0;
    this.second = args.shift() || 0;
    this.millisecond = args.shift() || 0;
    $1e1f3157d0513e0f$export$c4e2ecac49351ef2(this);
  }

}

var _type2 = new WeakMap();

class $418a5bbf7b2f3448$export$d3b7288e7994edea {
  copy() {
    if (this.era) return new $418a5bbf7b2f3448$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);else return new $418a5bbf7b2f3448$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
  }

  add(duration) {
    return $1e1f3157d0513e0f$export$96b1d28349274637(this, duration);
  }

  subtract(duration) {
    return $1e1f3157d0513e0f$export$6814caac34ca03c7(this, duration);
  }

  set(fields, disambiguation) {
    return $1e1f3157d0513e0f$export$31b5430eb18be4f8(this, fields, disambiguation);
  }

  cycle(field, amount, options) {
    return $1e1f3157d0513e0f$export$9a297d111fc86b79(this, field, amount, options);
  }

  toDate() {
    return $9ab2a87bc84c0bfa$export$83aac07b4c37b25(this);
  }

  toString() {
    return $78b7d46219519df2$export$bf79f1ebf4b18792(this);
  }

  toAbsoluteString() {
    return this.toDate().toISOString();
  }

  compare(b) {
    // TODO: Is this a bad idea??
    return this.toDate().getTime() - $9ab2a87bc84c0bfa$export$84c95a83c799e074(b, this.timeZone).toDate().getTime();
  }

  constructor(...args) {
    // This prevents TypeScript from allowing other types with the same fields to match.
    _type3.set(this, {
      writable: true,
      value: void 0
    });

    let [calendar, era, year, month, day] = $418a5bbf7b2f3448$var$shiftArgs(args);
    let timeZone = args.shift();
    let offset = args.shift();
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    this.timeZone = timeZone;
    this.offset = offset;
    this.hour = args.shift() || 0;
    this.minute = args.shift() || 0;
    this.second = args.shift() || 0;
    this.millisecond = args.shift() || 0;
    $1e1f3157d0513e0f$export$c4e2ecac49351ef2(this);
  }

}

var _type3 = new WeakMap();

const $e3160abf84b3082c$var$ERA_START_DATES = (/* unused pure expression or super */ null && ([[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]]));
const $e3160abf84b3082c$var$ERA_END_DATES = (/* unused pure expression or super */ null && ([[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]]));
const $e3160abf84b3082c$var$ERA_ADDENDS = (/* unused pure expression or super */ null && ([1867, 1911, 1925, 1988, 2018]));
const $e3160abf84b3082c$var$ERA_NAMES = (/* unused pure expression or super */ null && (['meiji', 'taisho', 'showa', 'heisei', 'reiwa']));

function $e3160abf84b3082c$var$findEraFromGregorianDate(date) {
  const idx = $e3160abf84b3082c$var$ERA_START_DATES.findIndex(([year, month, day]) => {
    if (date.year < year) return true;
    if (date.year === year && date.month < month) return true;
    if (date.year === year && date.month === month && date.day < day) return true;
    return false;
  });
  if (idx === -1) return $e3160abf84b3082c$var$ERA_START_DATES.length - 1;
  if (idx === 0) return 0;
  return idx - 1;
}

function $e3160abf84b3082c$var$toGregorian(date) {
  let eraAddend = $e3160abf84b3082c$var$ERA_ADDENDS[$e3160abf84b3082c$var$ERA_NAMES.indexOf(date.era)];
  if (!eraAddend) throw new Error('Unknown era: ' + date.era);
  return new $418a5bbf7b2f3448$export$99faa760c7908e4f(date.year + eraAddend, date.month, date.day);
}

class $e3160abf84b3082c$export$b746ab2b60cdffbf extends (/* unused pure expression or super */ null && ($22a507fc519bfd45$export$80ee6245ec4f29ec)) {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    let era = $e3160abf84b3082c$var$findEraFromGregorianDate(date);
    date.era = $e3160abf84b3082c$var$ERA_NAMES[era];
    date.year -= $e3160abf84b3082c$var$ERA_ADDENDS[era];
    return date;
  }

  toJulianDay(date) {
    return super.toJulianDay($e3160abf84b3082c$var$toGregorian(date));
  }

  balanceDate(date) {
    let gregorianDate = $e3160abf84b3082c$var$toGregorian(date);
    let era = $e3160abf84b3082c$var$findEraFromGregorianDate(gregorianDate);

    if ($e3160abf84b3082c$var$ERA_NAMES[era] !== date.era) {
      date.era = $e3160abf84b3082c$var$ERA_NAMES[era];
      date.year = gregorianDate.year - $e3160abf84b3082c$var$ERA_ADDENDS[era];
    }
  }

  constrainDate(date) {
    let idx = $e3160abf84b3082c$var$ERA_NAMES.indexOf(date.era);
    let end = $e3160abf84b3082c$var$ERA_END_DATES[idx];

    if (end != null) {
      let [endYear, endMonth, endDay] = end; // Constrain the year to the maximum possible value in the era.
      // Then constrain the month and day fields within that.

      let maxYear = endYear - $e3160abf84b3082c$var$ERA_ADDENDS[idx];
      date.year = Math.min(maxYear, date.year);

      if (date.year === maxYear) {
        date.month = Math.min(endMonth, date.month);
        if (date.month === endMonth) date.day = Math.min(endDay, date.day);
      }

      if (date.year === 1) {
        let [, startMonth, startDay] = $e3160abf84b3082c$var$ERA_START_DATES[idx];
        date.month = Math.max(startMonth, date.month);
        if (date.month === startMonth) date.day = Math.max(startDay, date.day);
      }
    }
  }

  getEras() {
    return $e3160abf84b3082c$var$ERA_NAMES;
  }

  getYearsInEra(date) {
    // Get the number of years in the era, taking into account the date's month and day fields.
    let era = $e3160abf84b3082c$var$ERA_NAMES.indexOf(date.era);
    let next = $e3160abf84b3082c$var$ERA_START_DATES[era + 1];
    if (next == null) return 9999;
    let cur = $e3160abf84b3082c$var$ERA_START_DATES[era];
    let years = next[0] - cur[0];
    if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;
    return years;
  }

  getMinimumMonthInYear(date) {
    let start = $e3160abf84b3082c$var$getMinimums(date);
    return start ? start[1] : 1;
  }

  getMinimumDayInMonth(date) {
    let start = $e3160abf84b3082c$var$getMinimums(date);
    return start && date.month === start[1] ? start[2] : 1;
  }

  constructor(...args) {
    super(...args);
    this.identifier = 'japanese';
  }

}

function $e3160abf84b3082c$var$getMinimums(date) {
  if (date.year === 1) {
    let idx = $e3160abf84b3082c$var$ERA_NAMES.indexOf(date.era);
    return $e3160abf84b3082c$var$ERA_START_DATES[idx];
  }
}

const $16ad4c0fc3e87561$var$BUDDHIST_ERA_START = (/* unused pure expression or super */ null && (-543));

class $16ad4c0fc3e87561$export$42d20a78301dee44 extends (/* unused pure expression or super */ null && ($22a507fc519bfd45$export$80ee6245ec4f29ec)) {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    date.year -= $16ad4c0fc3e87561$var$BUDDHIST_ERA_START;
    return date;
  }

  toJulianDay(date) {
    return super.toJulianDay(new $418a5bbf7b2f3448$export$99faa760c7908e4f(date.year + $16ad4c0fc3e87561$var$BUDDHIST_ERA_START, date.month, date.day));
  }

  getEras() {
    return ['BE'];
  }

  constructor(...args) {
    super(...args);
    this.identifier = 'buddhist';
  }

}

const $ff4a0e4b9bb267dc$var$TAIWAN_ERA_START = 1911;

function $ff4a0e4b9bb267dc$var$gregorianYear(date) {
  return date.era === 'minguo' ? date.year + $ff4a0e4b9bb267dc$var$TAIWAN_ERA_START : 1 - date.year + $ff4a0e4b9bb267dc$var$TAIWAN_ERA_START;
}

function $ff4a0e4b9bb267dc$var$gregorianToTaiwan(year, date) {
  let y = year - $ff4a0e4b9bb267dc$var$TAIWAN_ERA_START;

  if (y > 0) {
    date.era = 'minguo';
    date.year = y;
  } else {
    date.era = 'before_minguo';
    date.year = 1 - y;
  }
}

class $ff4a0e4b9bb267dc$export$65e01080afcb0799 extends (/* unused pure expression or super */ null && ($22a507fc519bfd45$export$80ee6245ec4f29ec)) {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    $ff4a0e4b9bb267dc$var$gregorianToTaiwan(date.year, date);
    return date;
  }

  toJulianDay(date) {
    return super.toJulianDay(new $418a5bbf7b2f3448$export$99faa760c7908e4f($ff4a0e4b9bb267dc$var$gregorianYear(date), date.month, date.day));
  }

  getEras() {
    return ['before_minguo', 'minguo'];
  }

  balanceDate(date) {
    $ff4a0e4b9bb267dc$var$gregorianToTaiwan($ff4a0e4b9bb267dc$var$gregorianYear(date), date);
  }

  getYearsToAdd(date, years) {
    return date.era === 'before_minguo' ? -years : years;
  }

  constructor(...args) {
    super(...args);
    this.identifier // Republic of China
    = 'roc';
  }

}

const $ba726df0f17122fc$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.

function $ba726df0f17122fc$var$isLeapYear(year) {
  let y0 = year > 0 ? year - 474 : year - 473;
  let y1 = $6a413dc772e69324$export$842a2cf37af977e1(y0, 2820) + 474;
  return $6a413dc772e69324$export$842a2cf37af977e1((y1 + 38) * 31, 128) < 31;
}

function $ba726df0f17122fc$var$persianToJulianDay(year, month, day) {
  let y0 = year > 0 ? year - 474 : year - 473;
  let y1 = $6a413dc772e69324$export$842a2cf37af977e1(y0, 2820) + 474;
  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;
  return $ba726df0f17122fc$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;
}

class $ba726df0f17122fc$export$37fccdbfd14c5939 {
  fromJulianDay(jd) {
    let d0 = jd - $ba726df0f17122fc$var$persianToJulianDay(475, 1, 1);
    let n2820 = Math.floor(d0 / 1029983);
    let d1 = $6a413dc772e69324$export$842a2cf37af977e1(d0, 1029983);
    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);
    let year = 474 + 2820 * n2820 + y2820;
    if (year <= 0) year--;
    let yDay = jd - $ba726df0f17122fc$var$persianToJulianDay(year, 1, 1) + 1;
    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);
    let day = jd - $ba726df0f17122fc$var$persianToJulianDay(year, month, 1) + 1;
    return new $418a5bbf7b2f3448$export$99faa760c7908e4f(this, year, month, day);
  }

  toJulianDay(date) {
    return $ba726df0f17122fc$var$persianToJulianDay(date.year, date.month, date.day);
  }

  getMonthsInYear() {
    return 12;
  }

  getDaysInMonth(date) {
    if (date.month <= 6) return 31;
    if (date.month <= 11) return 30;
    return $ba726df0f17122fc$var$isLeapYear(date.year) ? 30 : 29;
  }

  getEras() {
    return ['AP'];
  }

  getYearsInEra() {
    return 9999;
  }

  constructor() {
    this.identifier = 'persian';
  }

} // Starts in 78 AD,


const $3d9dab5cb67ed9b1$var$INDIAN_ERA_START = 78; // The Indian year starts 80 days later than the Gregorian year.

const $3d9dab5cb67ed9b1$var$INDIAN_YEAR_START = 80;

class $3d9dab5cb67ed9b1$export$39f31c639fa15726 extends (/* unused pure expression or super */ null && ($22a507fc519bfd45$export$80ee6245ec4f29ec)) {
  fromJulianDay(jd) {
    // Gregorian date for Julian day
    let date = super.fromJulianDay(jd); // Year in Saka era

    let indianYear = date.year - $3d9dab5cb67ed9b1$var$INDIAN_ERA_START; // Day number in Gregorian year (starting from 0)

    let yDay = jd - $22a507fc519bfd45$export$f297eb839006d339(date.year, 1, 1);
    let leapMonth;

    if (yDay < $3d9dab5cb67ed9b1$var$INDIAN_YEAR_START) {
      //  Day is at the end of the preceding Saka year
      indianYear--; // Days in leapMonth this year, previous Gregorian year

      leapMonth = $22a507fc519bfd45$export$553d7fa8e3805fc0(date.year - 1) ? 31 : 30;
      yDay += leapMonth + 155 + 90 + 10;
    } else {
      // Days in leapMonth this year
      leapMonth = $22a507fc519bfd45$export$553d7fa8e3805fc0(date.year) ? 31 : 30;
      yDay -= $3d9dab5cb67ed9b1$var$INDIAN_YEAR_START;
    }

    let indianMonth;
    let indianDay;

    if (yDay < leapMonth) {
      indianMonth = 1;
      indianDay = yDay + 1;
    } else {
      let mDay = yDay - leapMonth;

      if (mDay < 155) {
        indianMonth = Math.floor(mDay / 31) + 2;
        indianDay = mDay % 31 + 1;
      } else {
        mDay -= 155;
        indianMonth = Math.floor(mDay / 30) + 7;
        indianDay = mDay % 30 + 1;
      }
    }

    return new $418a5bbf7b2f3448$export$99faa760c7908e4f(this, indianYear, indianMonth, indianDay);
  }

  toJulianDay(date) {
    let year = date.year + $3d9dab5cb67ed9b1$var$INDIAN_ERA_START;
    let leapMonth;
    let jd;

    if ($22a507fc519bfd45$export$553d7fa8e3805fc0(year)) {
      leapMonth = 31;
      jd = $22a507fc519bfd45$export$f297eb839006d339(year, 3, 21);
    } else {
      leapMonth = 30;
      jd = $22a507fc519bfd45$export$f297eb839006d339(year, 3, 22);
    }

    if (date.month === 1) return jd + date.day - 1;
    jd += leapMonth + Math.min(date.month - 2, 5) * 31;
    if (date.month >= 8) jd += (date.month - 7) * 30;
    jd += date.day - 1;
    return jd;
  }

  getDaysInMonth(date) {
    if (date.month === 1 && $22a507fc519bfd45$export$553d7fa8e3805fc0(date.year + $3d9dab5cb67ed9b1$var$INDIAN_ERA_START)) return 31;
    if (date.month >= 2 && date.month <= 6) return 31;
    return 30;
  }

  getYearsInEra() {
    return 9999;
  }

  getEras() {
    return ['saka'];
  }

  constructor(...args) {
    super(...args);
    this.identifier = 'indian';
  }

}

const $082daba6c2a83229$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)

const $082daba6c2a83229$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)

const $082daba6c2a83229$var$UMALQURA_YEAR_START = 1300;
const $082daba6c2a83229$var$UMALQURA_YEAR_END = 1600;
const $082daba6c2a83229$var$UMALQURA_START_DAYS = 460322;

function $082daba6c2a83229$var$islamicToJulianDay(epoch, year, month, day) {
  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;
}

function $082daba6c2a83229$var$julianDayToIslamic(calendar, epoch, jd) {
  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);
  let month = Math.min(12, Math.ceil((jd - (29 + $082daba6c2a83229$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);
  let day = jd - $082daba6c2a83229$var$islamicToJulianDay(epoch, year, month, 1) + 1;
  return new $418a5bbf7b2f3448$export$99faa760c7908e4f(calendar, year, month, day);
}

function $082daba6c2a83229$var$isLeapYear(year) {
  return (14 + 11 * year) % 30 < 11;
}

class $082daba6c2a83229$export$2066795aadd37bfc {
  fromJulianDay(jd) {
    return $082daba6c2a83229$var$julianDayToIslamic(this, $082daba6c2a83229$var$CIVIL_EPOC, jd);
  }

  toJulianDay(date) {
    return $082daba6c2a83229$var$islamicToJulianDay($082daba6c2a83229$var$CIVIL_EPOC, date.year, date.month, date.day);
  }

  getDaysInMonth(date) {
    let length = 29 + date.month % 2;
    if (date.month === 12 && $082daba6c2a83229$var$isLeapYear(date.year)) length++;
    return length;
  }

  getMonthsInYear() {
    return 12;
  }

  getDaysInYear(date) {
    return $082daba6c2a83229$var$isLeapYear(date.year) ? 355 : 354;
  }

  getYearsInEra() {
    return 9999;
  }

  getEras() {
    return ['AH'];
  }

  constructor() {
    this.identifier = 'islamic-civil';
  }

}

class $082daba6c2a83229$export$37f0887f2f9d22f7 extends (/* unused pure expression or super */ null && ($082daba6c2a83229$export$2066795aadd37bfc)) {
  fromJulianDay(jd) {
    return $082daba6c2a83229$var$julianDayToIslamic(this, $082daba6c2a83229$var$ASTRONOMICAL_EPOC, jd);
  }

  toJulianDay(date) {
    return $082daba6c2a83229$var$islamicToJulianDay($082daba6c2a83229$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);
  }

  constructor(...args) {
    super(...args);
    this.identifier = 'islamic-tbla';
  }

} // Generated by scripts/generate-umalqura.js


const $082daba6c2a83229$var$UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';
let $082daba6c2a83229$var$UMALQURA_MONTHLENGTH;
let $082daba6c2a83229$var$UMALQURA_YEAR_START_TABLE;

function $082daba6c2a83229$var$umalquraYearStart(year) {
  return $082daba6c2a83229$var$UMALQURA_START_DAYS + $082daba6c2a83229$var$UMALQURA_YEAR_START_TABLE[year - $082daba6c2a83229$var$UMALQURA_YEAR_START];
}

function $082daba6c2a83229$var$umalquraMonthLength(year, month) {
  let idx = year - $082daba6c2a83229$var$UMALQURA_YEAR_START;
  let mask = 1 << 11 - (month - 1);
  if (($082daba6c2a83229$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;else return 30;
}

function $082daba6c2a83229$var$umalquraMonthStart(year, month) {
  let day = $082daba6c2a83229$var$umalquraYearStart(year);

  for (let i = 1; i < month; i++) day += $082daba6c2a83229$var$umalquraMonthLength(year, i);

  return day;
}

function $082daba6c2a83229$var$umalquraYearLength(year) {
  return $082daba6c2a83229$var$UMALQURA_YEAR_START_TABLE[year + 1 - $082daba6c2a83229$var$UMALQURA_YEAR_START] - $082daba6c2a83229$var$UMALQURA_YEAR_START_TABLE[year - $082daba6c2a83229$var$UMALQURA_YEAR_START];
}

class $082daba6c2a83229$export$5baab4758c231076 extends (/* unused pure expression or super */ null && ($082daba6c2a83229$export$2066795aadd37bfc)) {
  fromJulianDay(jd) {
    let days = jd - $082daba6c2a83229$var$CIVIL_EPOC;
    let startDays = $082daba6c2a83229$var$umalquraYearStart($082daba6c2a83229$var$UMALQURA_YEAR_START);
    let endDays = $082daba6c2a83229$var$umalquraYearStart($082daba6c2a83229$var$UMALQURA_YEAR_END);
    if (days < startDays || days > endDays) return super.fromJulianDay(jd);else {
      let y = $082daba6c2a83229$var$UMALQURA_YEAR_START - 1;
      let m = 1;
      let d = 1;

      while (d > 0) {
        y++;
        d = days - $082daba6c2a83229$var$umalquraYearStart(y) + 1;
        let yearLength = $082daba6c2a83229$var$umalquraYearLength(y);

        if (d === yearLength) {
          m = 12;
          break;
        } else if (d < yearLength) {
          let monthLength = $082daba6c2a83229$var$umalquraMonthLength(y, m);
          m = 1;

          while (d > monthLength) {
            d -= monthLength;
            m++;
            monthLength = $082daba6c2a83229$var$umalquraMonthLength(y, m);
          }

          break;
        }
      }

      return new $418a5bbf7b2f3448$export$99faa760c7908e4f(this, y, m, days - $082daba6c2a83229$var$umalquraMonthStart(y, m) + 1);
    }
  }

  toJulianDay(date) {
    if (date.year < $082daba6c2a83229$var$UMALQURA_YEAR_START || date.year > $082daba6c2a83229$var$UMALQURA_YEAR_END) return super.toJulianDay(date);
    return $082daba6c2a83229$var$CIVIL_EPOC + $082daba6c2a83229$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);
  }

  getDaysInMonth(date) {
    if (date.year < $082daba6c2a83229$var$UMALQURA_YEAR_START || date.year > $082daba6c2a83229$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);
    return $082daba6c2a83229$var$umalquraMonthLength(date.year, date.month);
  }

  getDaysInYear(date) {
    if (date.year < $082daba6c2a83229$var$UMALQURA_YEAR_START || date.year > $082daba6c2a83229$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);
    return $082daba6c2a83229$var$umalquraYearLength(date.year);
  }

  constructor() {
    super();
    this.identifier = 'islamic-umalqura';
    if (!$082daba6c2a83229$var$UMALQURA_MONTHLENGTH) $082daba6c2a83229$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($082daba6c2a83229$var$UMALQURA_DATA), c => c.charCodeAt(0)).buffer);

    if (!$082daba6c2a83229$var$UMALQURA_YEAR_START_TABLE) {
      $082daba6c2a83229$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($082daba6c2a83229$var$UMALQURA_YEAR_END - $082daba6c2a83229$var$UMALQURA_YEAR_START + 1);
      let yearStart = 0;

      for (let year = $082daba6c2a83229$var$UMALQURA_YEAR_START; year <= $082daba6c2a83229$var$UMALQURA_YEAR_END; year++) {
        $082daba6c2a83229$var$UMALQURA_YEAR_START_TABLE[year - $082daba6c2a83229$var$UMALQURA_YEAR_START] = yearStart;

        for (let i = 1; i <= 12; i++) yearStart += $082daba6c2a83229$var$umalquraMonthLength(year, i);
      }
    }
  }

}

const $e047ddb73bf46f97$var$HEBREW_EPOCH = 347997; // Hebrew date calculations are performed in terms of days, hours, and
// "parts" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.

const $e047ddb73bf46f97$var$HOUR_PARTS = 1080;
const $e047ddb73bf46f97$var$DAY_PARTS = 24 * $e047ddb73bf46f97$var$HOUR_PARTS; // An approximate value for the length of a lunar month.
// It is used to calculate the approximate year and month of a given
// absolute date.

const $e047ddb73bf46f97$var$MONTH_DAYS = 29;
const $e047ddb73bf46f97$var$MONTH_FRACT = 12 * $e047ddb73bf46f97$var$HOUR_PARTS + 793;
const $e047ddb73bf46f97$var$MONTH_PARTS = $e047ddb73bf46f97$var$MONTH_DAYS * $e047ddb73bf46f97$var$DAY_PARTS + $e047ddb73bf46f97$var$MONTH_FRACT;

function $e047ddb73bf46f97$var$isLeapYear(year) {
  return $6a413dc772e69324$export$842a2cf37af977e1(year * 7 + 1, 19) < 7;
} // Test for delay of start of new year and to avoid
// Sunday, Wednesday, and Friday as start of the new year.


function $e047ddb73bf46f97$var$hebrewDelay1(year) {
  let months = Math.floor((235 * year - 234) / 19);
  let parts = 12084 + 13753 * months;
  let day = months * 29 + Math.floor(parts / 25920);
  if ($6a413dc772e69324$export$842a2cf37af977e1(3 * (day + 1), 7) < 3) day += 1;
  return day;
} // Check for delay in start of new year due to length of adjacent years


function $e047ddb73bf46f97$var$hebrewDelay2(year) {
  let last = $e047ddb73bf46f97$var$hebrewDelay1(year - 1);
  let present = $e047ddb73bf46f97$var$hebrewDelay1(year);
  let next = $e047ddb73bf46f97$var$hebrewDelay1(year + 1);
  if (next - present === 356) return 2;
  if (present - last === 382) return 1;
  return 0;
}

function $e047ddb73bf46f97$var$startOfYear(year) {
  return $e047ddb73bf46f97$var$hebrewDelay1(year) + $e047ddb73bf46f97$var$hebrewDelay2(year);
}

function $e047ddb73bf46f97$var$getDaysInYear(year) {
  return $e047ddb73bf46f97$var$startOfYear(year + 1) - $e047ddb73bf46f97$var$startOfYear(year);
}

function $e047ddb73bf46f97$var$getYearType(year) {
  let yearLength = $e047ddb73bf46f97$var$getDaysInYear(year);
  if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.

  switch (yearLength) {
    case 353:
      return 0;
    // deficient

    case 354:
      return 1;
    // normal

    case 355:
      return 2;
    // complete
  }
}

function $e047ddb73bf46f97$var$getDaysInMonth(year, month) {
  // Normalize month numbers from 1 - 13, even on non-leap years
  if (month >= 6 && !$e047ddb73bf46f97$var$isLeapYear(year)) month++; // First of all, dispose of fixed-length 29 day months

  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;
  let yearType = $e047ddb73bf46f97$var$getYearType(year); // If it's Heshvan, days depend on length of year

  if (month === 2) return yearType === 2 ? 30 : 29; // Similarly, Kislev varies with the length of year

  if (month === 3) return yearType === 0 ? 29 : 30; // Adar I only exists in leap years

  if (month === 6) return $e047ddb73bf46f97$var$isLeapYear(year) ? 30 : 0;
  return 30;
}

class $e047ddb73bf46f97$export$ca405048b8fb5af {
  fromJulianDay(jd) {
    let d = jd - $e047ddb73bf46f97$var$HEBREW_EPOCH;
    let m = d * $e047ddb73bf46f97$var$DAY_PARTS / $e047ddb73bf46f97$var$MONTH_PARTS; // Months (approx)

    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)

    let ys = $e047ddb73bf46f97$var$startOfYear(year); // 1st day of year

    let dayOfYear = Math.floor(d - ys); // Because of the postponement rules, it's possible to guess wrong.  Fix it.

    while (dayOfYear < 1) {
      year--;
      ys = $e047ddb73bf46f97$var$startOfYear(year);
      dayOfYear = Math.floor(d - ys);
    } // Now figure out which month we're in, and the date within that month


    let month = 1;
    let monthStart = 0;

    while (monthStart < dayOfYear) {
      monthStart += $e047ddb73bf46f97$var$getDaysInMonth(year, month);
      month++;
    }

    month--;
    monthStart -= $e047ddb73bf46f97$var$getDaysInMonth(year, month);
    let day = dayOfYear - monthStart;
    return new $418a5bbf7b2f3448$export$99faa760c7908e4f(this, year, month, day);
  }

  toJulianDay(date) {
    let jd = $e047ddb73bf46f97$var$startOfYear(date.year);

    for (let month = 1; month < date.month; month++) jd += $e047ddb73bf46f97$var$getDaysInMonth(date.year, month);

    return jd + date.day + $e047ddb73bf46f97$var$HEBREW_EPOCH;
  }

  getDaysInMonth(date) {
    return $e047ddb73bf46f97$var$getDaysInMonth(date.year, date.month);
  }

  getMonthsInYear(date) {
    return $e047ddb73bf46f97$var$isLeapYear(date.year) ? 13 : 12;
  }

  getDaysInYear(date) {
    return $e047ddb73bf46f97$var$getDaysInYear(date.year);
  }

  getYearsInEra() {
    return 9999;
  }

  getEras() {
    return ['AM'];
  }

  balanceYearMonth(date, previousDate) {
    // Keep date in the same month when switching between leap years and non leap years
    if (previousDate.year !== date.year) {
      if ($e047ddb73bf46f97$var$isLeapYear(previousDate.year) && !$e047ddb73bf46f97$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;else if (!$e047ddb73bf46f97$var$isLeapYear(previousDate.year) && $e047ddb73bf46f97$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;
    }
  }

  constructor() {
    this.identifier = 'hebrew';
  }

}

const $aed9e24d29bfb310$var$ETHIOPIC_EPOCH = 1723856;
const $aed9e24d29bfb310$var$COPTIC_EPOCH = 1824665; // The delta between Amete Alem 1 and Amete Mihret 1
// AA 5501 = AM 1

const $aed9e24d29bfb310$var$AMETE_MIHRET_DELTA = 5500;

function $aed9e24d29bfb310$var$ceToJulianDay(epoch, year, month, day) {
  return epoch // difference from Julian epoch to 1,1,1
  + 365 * year // number of days from years
  + Math.floor(year / 4) // extra day of leap year
  + 30 * (month - 1) // number of days from months (1 based)
  + day - 1 // number of days for present month (1 based)
  ;
}

function $aed9e24d29bfb310$var$julianDayToCE(calendar, epoch, jd) {
  let year = Math.floor(4 * (jd - epoch) / 1461);
  let month = 1 + Math.floor((jd - $aed9e24d29bfb310$var$ceToJulianDay(epoch, year, 1, 1)) / 30);
  let day = jd + 1 - $aed9e24d29bfb310$var$ceToJulianDay(epoch, year, month, 1);
  return new $418a5bbf7b2f3448$export$99faa760c7908e4f(calendar, year, month, day);
}

function $aed9e24d29bfb310$var$getLeapDay(year) {
  return Math.floor(year % 4 / 3);
}

function $aed9e24d29bfb310$var$getDaysInMonth(year, month) {
  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and
  // an intercalary month at the end of the year of 5 or 6 days, depending whether
  // the year is a leap year or not. The Leap Year follows the same rules as the
  // Julian Calendar so that the extra month always has six days in the year before
  // a Julian Leap Year.
  if (month % 13 !== 0) // not intercalary month
    return 30;else // intercalary month 5 days + possible leap day
    return $aed9e24d29bfb310$var$getLeapDay(year) + 5;
}

class $aed9e24d29bfb310$export$26ba6eab5e20cd7d {
  fromJulianDay(jd) {
    let date = $aed9e24d29bfb310$var$julianDayToCE(this, $aed9e24d29bfb310$var$ETHIOPIC_EPOCH, jd);
    if (date.year > 0) date.era = 'AM';else {
      date.era = 'AA';
      date.year += $aed9e24d29bfb310$var$AMETE_MIHRET_DELTA;
    }
    return date;
  }

  toJulianDay(date) {
    let year = date.year;
    if (date.era === 'AA') year -= $aed9e24d29bfb310$var$AMETE_MIHRET_DELTA;
    return $aed9e24d29bfb310$var$ceToJulianDay($aed9e24d29bfb310$var$ETHIOPIC_EPOCH, year, date.month, date.day);
  }

  getDaysInMonth(date) {
    let year = date.year;
    if (date.era === 'AA') year -= $aed9e24d29bfb310$var$AMETE_MIHRET_DELTA;
    return $aed9e24d29bfb310$var$getDaysInMonth(year, date.month);
  }

  getMonthsInYear() {
    return 13;
  }

  getDaysInYear(date) {
    return 365 + $aed9e24d29bfb310$var$getLeapDay(date.year);
  }

  getYearsInEra() {
    return 9999;
  }

  getEras() {
    return ['AA', 'AM'];
  }

  constructor() {
    this.identifier = 'ethiopic';
  }

}

class $aed9e24d29bfb310$export$d72e0c37005a4914 extends (/* unused pure expression or super */ null && ($aed9e24d29bfb310$export$26ba6eab5e20cd7d)) {
  fromJulianDay(jd) {
    let date = $aed9e24d29bfb310$var$julianDayToCE(this, $aed9e24d29bfb310$var$ETHIOPIC_EPOCH, jd);
    date.era = 'AA';
    date.year += $aed9e24d29bfb310$var$AMETE_MIHRET_DELTA;
    return date;
  }

  getEras() {
    return ['AA'];
  }

  constructor(...args) {
    super(...args);
    this.identifier // also known as 'ethiopic-amete-alem' in ICU
    = 'ethioaa';
  }

}

class $aed9e24d29bfb310$export$fe6243cbe1a4b7c1 extends (/* unused pure expression or super */ null && ($aed9e24d29bfb310$export$26ba6eab5e20cd7d)) {
  fromJulianDay(jd) {
    let date = $aed9e24d29bfb310$var$julianDayToCE(this, $aed9e24d29bfb310$var$COPTIC_EPOCH, jd);

    if (date.year <= 0) {
      date.era = 'BCE';
      date.year = 1 - date.year;
    } else date.era = 'CE';

    return date;
  }

  toJulianDay(date) {
    let year = date.year;
    if (date.era === 'BCE') year = 1 - year;
    return $aed9e24d29bfb310$var$ceToJulianDay($aed9e24d29bfb310$var$COPTIC_EPOCH, year, date.month, date.day);
  }

  getDaysInMonth(date) {
    let year = date.year;
    if (date.era === 'BCE') year = 1 - year;
    return $aed9e24d29bfb310$var$getDaysInMonth(year, date.month);
  }

  getYearsToAdd(date, years) {
    return date.era === 'BCE' ? -years : years;
  }

  getEras() {
    return ['BCE', 'CE'];
  }

  constructor(...args) {
    super(...args);
    this.identifier = 'coptic';
  }

}

function $dfd4c35de264b327$export$dd0bbc9b26defe37(name) {
  switch (name) {
    case 'buddhist':
      return new $16ad4c0fc3e87561$export$42d20a78301dee44();

    case 'ethiopic':
      return new $aed9e24d29bfb310$export$26ba6eab5e20cd7d();

    case 'ethioaa':
      return new $aed9e24d29bfb310$export$d72e0c37005a4914();

    case 'coptic':
      return new $aed9e24d29bfb310$export$fe6243cbe1a4b7c1();

    case 'hebrew':
      return new $e047ddb73bf46f97$export$ca405048b8fb5af();

    case 'indian':
      return new $3d9dab5cb67ed9b1$export$39f31c639fa15726();

    case 'islamic-civil':
      return new $082daba6c2a83229$export$2066795aadd37bfc();

    case 'islamic-tbla':
      return new $082daba6c2a83229$export$37f0887f2f9d22f7();

    case 'islamic-umalqura':
      return new $082daba6c2a83229$export$5baab4758c231076();

    case 'japanese':
      return new $e3160abf84b3082c$export$b746ab2b60cdffbf();

    case 'persian':
      return new $ba726df0f17122fc$export$37fccdbfd14c5939();

    case 'roc':
      return new $ff4a0e4b9bb267dc$export$65e01080afcb0799();

    case 'gregory':
    default:
      return new $22a507fc519bfd45$export$80ee6245ec4f29ec();
  }
}

var $52d5895097fb3243$exports = {};
var $ea6cd4c800b471d1$exports = {};
date_dist_module_$parcel$export($ea6cd4c800b471d1$exports, "DateFormatter", () => $ea6cd4c800b471d1$export$ad991b66133851cf);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

let $ea6cd4c800b471d1$var$formatterCache = new Map();

class $ea6cd4c800b471d1$export$ad991b66133851cf {
  format(value) {
    return this.formatter.format(value);
  }

  formatToParts(value) {
    return this.formatter.formatToParts(value);
  }

  formatRange(start, end) {
    // @ts-ignore
    if (typeof this.formatter.formatRange === 'function') // @ts-ignore
      return this.formatter.formatRange(start, end);
    if (end < start) throw new RangeError('End date must be >= start date'); // Very basic fallback for old browsers.

    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;
  }

  formatRangeToParts(start, end) {
    // @ts-ignore
    if (typeof this.formatter.formatRangeToParts === 'function') // @ts-ignore
      return this.formatter.formatRangeToParts(start, end);
    if (end < start) throw new RangeError('End date must be >= start date');
    let startParts = this.formatter.formatToParts(start);
    let endParts = this.formatter.formatToParts(end);
    return [...startParts.map(p => ({ ...p,
      source: 'startRange'
    })), {
      type: 'literal',
      value: ' – ',
      source: 'shared'
    }, ...endParts.map(p => ({ ...p,
      source: 'endRange'
    }))];
  }

  resolvedOptions() {
    let resolvedOptions = this.formatter.resolvedOptions();

    if ($ea6cd4c800b471d1$var$hasBuggyResolvedHourCycle()) {
      if (!this.resolvedHourCycle) this.resolvedHourCycle = $ea6cd4c800b471d1$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
      resolvedOptions.hourCycle = this.resolvedHourCycle;
      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';
    }

    return resolvedOptions;
  }

  constructor(locale, options = {}) {
    this.formatter = $ea6cd4c800b471d1$var$getCachedDateFormatter(locale, options);
    this.options = options;
  }

} // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.
//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)
//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)
//     rather than h12 (12:00 - 11:59).
//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal
//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]
// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791
// [2] https://github.com/tc39/ecma402/issues/402
// [3] https://bugs.webkit.org/show_bug.cgi?id=229313
// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802


const $ea6cd4c800b471d1$var$hour12Preferences = {
  true: {
    // Only Japanese uses the h11 style for 12 hour time. All others use h12.
    ja: 'h11'
  },
  false: {}
};

function $ea6cd4c800b471d1$var$getCachedDateFormatter(locale, options = {}) {
  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.
  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.
  if (typeof options.hour12 === 'boolean' && $ea6cd4c800b471d1$var$hasBuggyHour12Behavior()) {
    options = { ...options
    };
    let pref = $ea6cd4c800b471d1$var$hour12Preferences[String(options.hour12)][locale.split('-')[0]];
    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';
    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
    delete options.hour12;
  }

  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');
  if ($ea6cd4c800b471d1$var$formatterCache.has(cacheKey)) return $ea6cd4c800b471d1$var$formatterCache.get(cacheKey);
  let numberFormatter = new Intl.DateTimeFormat(locale, options);
  $ea6cd4c800b471d1$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}

let $ea6cd4c800b471d1$var$_hasBuggyHour12Behavior = null;

function $ea6cd4c800b471d1$var$hasBuggyHour12Behavior() {
  if ($ea6cd4c800b471d1$var$_hasBuggyHour12Behavior == null) $ea6cd4c800b471d1$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {
    hour: 'numeric',
    hour12: false
  }).format(new Date(2020, 2, 3, 0)) === '24';
  return $ea6cd4c800b471d1$var$_hasBuggyHour12Behavior;
}

let $ea6cd4c800b471d1$var$_hasBuggyResolvedHourCycle = null;

function $ea6cd4c800b471d1$var$hasBuggyResolvedHourCycle() {
  if ($ea6cd4c800b471d1$var$_hasBuggyResolvedHourCycle == null) $ea6cd4c800b471d1$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat('fr', {
    hour: 'numeric',
    hour12: false
  }).resolvedOptions().hourCycle === 'h12';
  return $ea6cd4c800b471d1$var$_hasBuggyResolvedHourCycle;
}

function $ea6cd4c800b471d1$var$getResolvedHourCycle(locale, options) {
  if (!options.timeStyle && !options.hour) return undefined; // Work around buggy results in resolved hourCycle and hour12 options in WebKit.
  // Format the minimum possible hour and maximum possible hour in a day and parse the results.

  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');
  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';
  let formatter = $ea6cd4c800b471d1$var$getCachedDateFormatter(locale, { ...options,
    timeZone: undefined // use local timezone

  });
  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);
  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);
  if (min === 0 && max === 23) return 'h23';
  if (min === 24 && max === 23) return 'h24';
  if (min === 0 && max === 11) return 'h11';
  if (min === 12 && max === 11) return 'h12';
  throw new Error('Unexpected hour cycle result');
}


;// CONCATENATED MODULE: ../../node_modules/@internationalized/number/dist/module.js
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
let $488c6ddbf4ef74c2$var$formatterCache = new Map();
let $488c6ddbf4ef74c2$var$supportsSignDisplay = false;

try {
  // @ts-ignore
  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat('de-DE', {
    signDisplay: 'exceptZero'
  }).resolvedOptions().signDisplay === 'exceptZero'; // eslint-disable-next-line no-empty
} catch (e) {}

let $488c6ddbf4ef74c2$var$supportsUnit = false;

try {
  // @ts-ignore
  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat('de-DE', {
    style: 'unit',
    unit: 'degree'
  }).resolvedOptions().style === 'unit'; // eslint-disable-next-line no-empty
} catch (e1) {} // Polyfill for units since Safari doesn't support them yet. See https://bugs.webkit.org/show_bug.cgi?id=215438.
// Currently only polyfilling the unit degree in narrow format for ColorSlider in our supported locales.
// Values were determined by switching to each locale manually in Chrome.


const $488c6ddbf4ef74c2$var$UNITS = {
  degree: {
    narrow: {
      default: '°',
      'ja-JP': ' 度',
      'zh-TW': '度',
      'sl-SI': ' °'
    }
  }
};

class $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 {
  /** Formats a number value as a string, according to the locale and options provided to the constructor. */
  format(value) {
    let res = '';
    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);else res = this.numberFormatter.format(value);

    if (this.options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {
      var ref;
      let {
        unit: unit,
        unitDisplay = 'short',
        locale: locale
      } = this.resolvedOptions();
      let values = (ref = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay];
      res += values[locale] || values.default;
    }

    return res;
  }
  /** Formats a number to an array of parts such as separators, digits, punctuation, and more. */


  formatToParts(value) {
    // TODO: implement signDisplay for formatToParts
    // @ts-ignore
    return this.numberFormatter.formatToParts(value);
  }
  /** Returns the resolved formatting options based on the values passed to the constructor. */


  resolvedOptions() {
    let options = this.numberFormatter.resolvedOptions();
    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null) options = { ...options,
      signDisplay: this.options.signDisplay
    };
    if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === 'unit') options = { ...options,
      style: 'unit',
      unit: this.options.unit,
      unitDisplay: this.options.unitDisplay
    };
    return options;
  }

  constructor(locale, options = {}) {
    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);
    this.options = options;
  }

}

function $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options = {}) {
  let {
    numberingSystem: numberingSystem
  } = options;
  if (numberingSystem && locale.indexOf('-u-nu-') === -1) locale = `${locale}-u-nu-${numberingSystem}`;

  if (options.style === 'unit' && !$488c6ddbf4ef74c2$var$supportsUnit) {
    var ref;
    let {
      unit: unit,
      unitDisplay = 'short'
    } = options;
    if (!unit) throw new Error('unit option must be provided with style: "unit"');
    if (!((ref = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay])) throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);
    options = { ...options,
      style: 'decimal'
    };
  }

  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');
  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey)) return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);
  let numberFormatter = new Intl.NumberFormat(locale, options);
  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}

function $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {
  if (signDisplay === 'auto') return numberFormat.format(num);else if (signDisplay === 'never') return numberFormat.format(Math.abs(num));else {
    let needsPositiveSign = false;
    if (signDisplay === 'always') needsPositiveSign = num > 0 || Object.is(num, 0);else if (signDisplay === 'exceptZero') {
      if (Object.is(num, -0) || Object.is(num, 0)) num = Math.abs(num);else needsPositiveSign = num > 0;
    }

    if (needsPositiveSign) {
      let negative = numberFormat.format(-num);
      let noSign = numberFormat.format(num); // ignore RTL/LTR marker character

      let minus = negative.replace(noSign, '').replace(/\u200e|\u061C/, '');
      if ([...minus].length !== 1) console.warn('@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case');
      let positive = negative.replace(noSign, '!!!').replace(minus, '+').replace('!!!', noSign);
      return positive;
    } else return numberFormat.format(num);
  }
}

const $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = (/* unused pure expression or super */ null && (new RegExp('^.*\\(.*\\).*$')));
const $6c7bd7858deea686$var$NUMBERING_SYSTEMS = (/* unused pure expression or super */ null && (['latn', 'arab', 'hanidec']));

class $6c7bd7858deea686$export$cd11ab140839f11d {
  /**
  * Parses the given string to a number. Returns NaN if a valid number could not be parsed.
  */
  parse(value) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);
  }
  /**
  * Returns whether the given string could potentially be a valid number. This should be used to
  * validate user input as the user types. If a `minValue` or `maxValue` is provided, the validity
  * of the minus/plus sign characters can be checked.
  */


  isValidPartialNumber(value, minValue, maxValue) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);
  }
  /**
  * Returns a numbering system for which the given string is valid in the current locale.
  * If no numbering system could be detected, the default numbering system for the current
  * locale is returned.
  */


  getNumberingSystem(value) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;
  }

  constructor(locale, options = {}) {
    this.locale = locale;
    this.options = options;
  }

}

const $6c7bd7858deea686$var$numberParserCache = new Map();

function $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {
  // First try the default numbering system for the provided locale
  let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options); // If that doesn't match, and the locale doesn't include a hard coded numbering system,
  // try each of the other supported numbering systems until we find one that matches.

  if (!locale.includes('-nu-') && !defaultParser.isValidPartialNumber(value)) {
    for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS) if (numberingSystem !== defaultParser.options.numberingSystem) {
      let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes('-u-') ? '-nu-' : '-u-nu-') + numberingSystem, options);
      if (parser.isValidPartialNumber(value)) return parser;
    }
  }

  return defaultParser;
}

function $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');
  let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);

  if (!parser) {
    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);
    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);
  }

  return parser;
} // The actual number parser implementation. Instances of this class are cached
// based on the locale, options, and detected numbering system.


class $6c7bd7858deea686$var$NumberParserImpl {
  parse(value) {
    // to parse the number, we need to remove anything that isn't actually part of the number, for example we want '-10.40' not '-10.40 USD'
    let fullySanitizedValue = this.sanitize(value); // Remove group characters, and replace decimal points and numerals with ASCII values.

    fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, '').replace(this.symbols.decimal, '.').replace(this.symbols.minusSign, '-').replace(this.symbols.numeral, this.symbols.index);
    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;
    if (isNaN(newValue)) return NaN; // accounting will always be stripped to a positive number, so if it's accounting and has a () around everything, then we need to make it negative again

    if (this.options.currencySign === 'accounting' && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value)) newValue = -1 * newValue; // when reading the number, if it's a percent, then it should be interpreted as being divided by 100

    if (this.options.style === 'percent') {
      newValue /= 100;

      var _maximumFractionDigits; // after dividing to get the percent value, javascript may get .0210999999 instead of .0211, so fix the number of fraction digits


      newValue = +newValue.toFixed(((_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _maximumFractionDigits !== void 0 ? _maximumFractionDigits : 0) + 2);
    }

    return newValue;
  }

  sanitize(value) {
    // Remove literals and whitespace, which are allowed anywhere in the string
    value = value.replace(this.symbols.literals, ''); // Replace the ASCII minus sign with the minus sign used in the current locale
    // so that both are allowed in case the user's keyboard doesn't have the locale's minus sign.

    value = value.replace('-', this.symbols.minusSign); // In arab numeral system, their decimal character is 1643, but most keyboards don't type that
    // instead they use the , (44) character or apparently the (1548) character.

    if (this.options.numberingSystem === 'arab') {
      value = value.replace(',', this.symbols.decimal);
      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);
      value = $6c7bd7858deea686$var$replaceAll(value, '.', this.symbols.group);
    } // fr-FR group character is char code 8239, but that's not a key on the french keyboard,
    // so allow 'period' as a group char and replace it with a space


    if (this.options.locale === 'fr-FR') value = $6c7bd7858deea686$var$replaceAll(value, '.', String.fromCharCode(8239));
    return value;
  }

  isValidPartialNumber(value, minValue = -Infinity, maxValue = Infinity) {
    value = this.sanitize(value); // Remove minus or plus sign, which must be at the start of the string.

    if (value.startsWith(this.symbols.minusSign) && minValue < 0) value = value.slice(this.symbols.minusSign.length);else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0) value = value.slice(this.symbols.plusSign.length); // Numbers cannot start with a group separator

    if (value.startsWith(this.symbols.group)) return false; // Remove numerals, groups, and decimals

    value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, '').replace(this.symbols.numeral, '').replace(this.symbols.decimal, ''); // The number is valid if there are no remaining characters

    return value.length === 0;
  }

  constructor(locale, options = {}) {
    this.formatter = new Intl.NumberFormat(locale, options);
    this.options = this.formatter.resolvedOptions();
    this.symbols = $6c7bd7858deea686$var$getSymbols(this.formatter, this.options, options);
  }

}

const $6c7bd7858deea686$var$nonLiteralParts = new Set(['decimal', 'fraction', 'integer', 'minusSign', 'plusSign', 'group']);

function $6c7bd7858deea686$var$getSymbols(formatter, intlOptions, originalOptions) {
  var ref, ref1, ref2, ref3; // Note: some locale's don't add a group symbol until there is a ten thousands place

  let allParts = formatter.formatToParts(-10000.111);
  let posAllParts = formatter.formatToParts(10000.111);
  let singularParts = formatter.formatToParts(1);
  var ref4;
  let minusSign = (ref4 = (ref = allParts.find(p => p.type === 'minusSign')) === null || ref === void 0 ? void 0 : ref.value) !== null && ref4 !== void 0 ? ref4 : '-';
  let plusSign = (ref1 = posAllParts.find(p => p.type === 'plusSign')) === null || ref1 === void 0 ? void 0 : ref1.value; // Safari does not support the signDisplay option, but our number parser polyfills it.
  // If no plus sign was returned, but the original options contained signDisplay, default to the '+' character.
  // @ts-ignore

  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'exceptZero' || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === 'always')) plusSign = '+';
  let decimal = (ref2 = allParts.find(p => p.type === 'decimal')) === null || ref2 === void 0 ? void 0 : ref2.value;
  let group = (ref3 = allParts.find(p => p.type === 'group')) === null || ref3 === void 0 ? void 0 : ref3.value; // this set is also for a regex, it's all literals that might be in the string we want to eventually parse that
  // don't contribute to the numerical value

  let pluralLiterals = allParts.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value));
  let singularLiterals = singularParts.filter(p => !$6c7bd7858deea686$var$nonLiteralParts.has(p.type)).map(p => $6c7bd7858deea686$var$escapeRegex(p.value));
  let sortedLiterals = [...new Set([...singularLiterals, ...pluralLiterals])].sort((a, b) => b.length - a.length);
  let literals = new RegExp(`${sortedLiterals.join('|')}|[\\p{White_Space}]`, 'gu'); // These are for replacing non-latn characters with the latn equivalent

  let numerals = [...new Intl.NumberFormat(intlOptions.locale, {
    useGrouping: false
  }).format(9876543210)].reverse();
  let indexes = new Map(numerals.map((d, i) => [d, i]));
  let numeral = new RegExp(`[${numerals.join('')}]`, 'g');

  let index = d => String(indexes.get(d));

  return {
    minusSign: minusSign,
    plusSign: plusSign,
    decimal: decimal,
    group: group,
    literals: literals,
    numeral: numeral,
    index: index
  };
}

function $6c7bd7858deea686$var$replaceAll(str, find, replace) {
  // @ts-ignore
  if (str.replaceAll) // @ts-ignore
    return str.replaceAll(find, replace);
  return str.split(find).join(replace);
}

function $6c7bd7858deea686$var$escapeRegex(string) {
  return string.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
}


;// CONCATENATED MODULE: ./node_modules/@react-aria/i18n/dist/module.js






function i18n_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $21755e9e87423be2$exports = {};
i18n_dist_module_$parcel$export($21755e9e87423be2$exports, "I18nProvider", () => $21755e9e87423be2$export$a54013f0d02a8f82);
i18n_dist_module_$parcel$export($21755e9e87423be2$exports, "useLocale", () => $21755e9e87423be2$export$43bb16f9c6d9e3f7);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// https://en.wikipedia.org/wiki/Right-to-left

const $4cf919b2fb2672be$var$RTL_SCRIPTS = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);
const $4cf919b2fb2672be$var$RTL_LANGS = new Set(['ae', 'ar', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'glk', 'he', 'ku', 'mzn', 'nqo', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi']);

function $4cf919b2fb2672be$export$702d680b21cbd764(locale) {
  // If the Intl.Locale API is available, use it to get the script for the locale.
  // This is more accurate than guessing by language, since languages can be written in multiple scripts.
  // @ts-ignore
  if (Intl.Locale) {
    // @ts-ignore
    let script = new Intl.Locale(locale).maximize().script;
    return $4cf919b2fb2672be$var$RTL_SCRIPTS.has(script);
  } // If not, just guess by the language (first part of the locale)


  let lang = locale.split('-')[0];
  return $4cf919b2fb2672be$var$RTL_LANGS.has(lang);
}

function $916d1fd2754d3f8c$export$f09106e7c6677ec5() {
  // @ts-ignore
  let locale = typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';
  return {
    locale: locale,
    direction: $4cf919b2fb2672be$export$702d680b21cbd764(locale) ? 'rtl' : 'ltr'
  };
}

let $916d1fd2754d3f8c$var$currentLocale = $916d1fd2754d3f8c$export$f09106e7c6677ec5();
let $916d1fd2754d3f8c$var$listeners = new Set();

function $916d1fd2754d3f8c$var$updateLocale() {
  $916d1fd2754d3f8c$var$currentLocale = $916d1fd2754d3f8c$export$f09106e7c6677ec5();

  for (let listener of $916d1fd2754d3f8c$var$listeners) listener($916d1fd2754d3f8c$var$currentLocale);
}

function $916d1fd2754d3f8c$export$188ec29ebc2bdc3a() {
  let isSSR = $9d939cbc98267846$export$535bd6ca7f90a273();
  let [defaultLocale, setDefaultLocale] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)($916d1fd2754d3f8c$var$currentLocale);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if ($916d1fd2754d3f8c$var$listeners.size === 0) window.addEventListener('languagechange', $916d1fd2754d3f8c$var$updateLocale);
    $916d1fd2754d3f8c$var$listeners.add(setDefaultLocale);
    return () => {
      $916d1fd2754d3f8c$var$listeners.delete(setDefaultLocale);
      if ($916d1fd2754d3f8c$var$listeners.size === 0) window.removeEventListener('languagechange', $916d1fd2754d3f8c$var$updateLocale);
    };
  }, []); // We cannot determine the browser's language on the server, so default to
  // en-US. This will be updated after hydration on the client to the correct value.

  if (isSSR) return {
    locale: 'en-US',
    direction: 'ltr'
  };
  return defaultLocale;
}

const $21755e9e87423be2$var$I18nContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);

function $21755e9e87423be2$export$a54013f0d02a8f82(props) {
  let {
    locale: locale,
    children: children
  } = props;
  let defaultLocale = $916d1fd2754d3f8c$export$188ec29ebc2bdc3a();
  let value = locale ? {
    locale: locale,
    direction: $4cf919b2fb2672be$export$702d680b21cbd764(locale) ? 'rtl' : 'ltr'
  } : defaultLocale;
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($21755e9e87423be2$var$I18nContext.Provider, {
    value: value
  }, children);
}

function $21755e9e87423be2$export$43bb16f9c6d9e3f7() {
  let defaultLocale = $916d1fd2754d3f8c$export$188ec29ebc2bdc3a();
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($21755e9e87423be2$var$I18nContext);
  return context || defaultLocale;
}

var $aa99f94f0729b94d$exports = {};
i18n_dist_module_$parcel$export($aa99f94f0729b94d$exports, "useMessageFormatter", () => $aa99f94f0729b94d$export$ec23bf898b1eed85);
const $aa99f94f0729b94d$var$cache = new WeakMap();

function $aa99f94f0729b94d$var$getCachedDictionary(strings) {
  let dictionary = $aa99f94f0729b94d$var$cache.get(strings);

  if (!dictionary) {
    dictionary = new $70eee6030fd7c1a1$export$64839e615120df17(strings);
    $aa99f94f0729b94d$var$cache.set(strings, dictionary);
  }

  return dictionary;
}

function $aa99f94f0729b94d$export$ec23bf898b1eed85(strings) {
  let {
    locale: locale
  } = $21755e9e87423be2$export$43bb16f9c6d9e3f7();
  let dictionary = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => $aa99f94f0729b94d$var$getCachedDictionary(strings), [strings]);
  let formatter = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new $a96338b8d4eb3cb0$export$526ebc05ff964723(locale, dictionary), [locale, dictionary]);
  return (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((key, variables) => formatter.format(key, variables), [formatter]);
}

var $59b9e23dbbc6badb$exports = {};
i18n_dist_module_$parcel$export($59b9e23dbbc6badb$exports, "useDateFormatter", () => $59b9e23dbbc6badb$export$85fd5fdf27bacc79);

function $59b9e23dbbc6badb$export$85fd5fdf27bacc79(options) {
  // Reuse last options object if it is shallowly equal, which allows the useMemo result to also be reused.
  let lastOptions = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  if (options && lastOptions.current && $59b9e23dbbc6badb$var$isEqual(options, lastOptions.current)) options = lastOptions.current;
  lastOptions.current = options;
  let {
    locale: locale
  } = $21755e9e87423be2$export$43bb16f9c6d9e3f7();
  return (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new $ea6cd4c800b471d1$export$ad991b66133851cf(locale, options), [locale, options]);
}

function $59b9e23dbbc6badb$var$isEqual(a, b) {
  if (a === b) return true;
  let aKeys = Object.keys(a);
  let bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) return false;

  for (let key of aKeys) {
    if (b[key] !== a[key]) return false;
  }

  return true;
}

var $aec6a20912b8a35e$exports = {};
i18n_dist_module_$parcel$export($aec6a20912b8a35e$exports, "useNumberFormatter", () => $aec6a20912b8a35e$export$b7a616150fdb9f44);

function $aec6a20912b8a35e$export$b7a616150fdb9f44(options = {}) {
  let {
    locale: locale
  } = $21755e9e87423be2$export$43bb16f9c6d9e3f7();
  return (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, options), [locale, options]);
}

var $bc0d3f91da683b81$exports = {};
i18n_dist_module_$parcel$export($bc0d3f91da683b81$exports, "useCollator", () => $bc0d3f91da683b81$export$a16aca283550c30d);
let $bc0d3f91da683b81$var$cache = new Map();

function $bc0d3f91da683b81$export$a16aca283550c30d(options) {
  let {
    locale: locale
  } = $21755e9e87423be2$export$43bb16f9c6d9e3f7();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');
  if ($bc0d3f91da683b81$var$cache.has(cacheKey)) return $bc0d3f91da683b81$var$cache.get(cacheKey);
  let formatter = new Intl.Collator(locale, options);
  $bc0d3f91da683b81$var$cache.set(cacheKey, formatter);
  return formatter;
}

var $4427549eda601635$exports = {};
i18n_dist_module_$parcel$export($4427549eda601635$exports, "useFilter", () => $4427549eda601635$export$3274cf84b703fff);

function $4427549eda601635$export$3274cf84b703fff(options) {
  let collator = $bc0d3f91da683b81$export$a16aca283550c30d({
    usage: 'search',
    ...options
  }); // TODO(later): these methods don't currently support the ignorePunctuation option.

  return {
    startsWith(string, substring) {
      if (substring.length === 0) return true; // Normalize both strings so we can slice safely
      // TODO: take into account the ignorePunctuation option as well...

      string = string.normalize('NFC');
      substring = substring.normalize('NFC');
      return collator.compare(string.slice(0, substring.length), substring) === 0;
    },

    endsWith(string, substring) {
      if (substring.length === 0) return true;
      string = string.normalize('NFC');
      substring = substring.normalize('NFC');
      return collator.compare(string.slice(-substring.length), substring) === 0;
    },

    contains(string, substring) {
      if (substring.length === 0) return true;
      string = string.normalize('NFC');
      substring = substring.normalize('NFC');
      let scan = 0;
      let sliceLen = substring.length;

      for (; scan + sliceLen <= string.length; scan++) {
        let slice = string.slice(scan, scan + sliceLen);
        if (collator.compare(substring, slice) === 0) return true;
      }

      return false;
    }

  };
}


;// CONCATENATED MODULE: ./src/utils/with-defaults.ts
const withDefaults = (component, defaultProps) => {
  component.defaultProps = defaultProps;
  return component;
};

/* harmony default export */ const with_defaults = (withDefaults);
;// CONCATENATED MODULE: ./src/utils/clsx.ts
/* eslint-disable no-shadow-restricted-names */

/* eslint-disable no-plusplus */
function toVal(mix) {
  var k,
      y,
      str = '';

  if (typeof mix === 'string' || typeof mix === 'number') {
    str += mix;
  } else if (typeof mix === 'object') {
    if (Array.isArray(mix)) {
      for (k = 0; k < mix.length; k++) {
        if (mix[k]) {
          if (y = toVal(mix[k])) {
            str && (str += ' ');
            str += y;
          }
        }
      }
    } else {
      for (k in mix) {
        if (mix[k]) {
          str && (str += ' ');
          str += k;
        }
      }
    }
  }

  return str;
}

/* harmony default export */ function clsx(...args) {
  var i = 0,
      tmp,
      x,
      str = '';

  while (i < args.length) {
    if (tmp = args[i++]) {
      if (x = toVal(tmp)) {
        str && (str += ' ');
        str += x;
      }
    }
  }

  return str;
}
;// CONCATENATED MODULE: ./src/theme/utils.ts



const getTokenValue = (token, tokenName) => {
  if (!document || !token) return '';
  let docStyle = getComputedStyle(document.documentElement);
  const tokenKey = `--${common.prefix}-${token}-${tokenName}`;
  const tokenValue = docStyle.getPropertyValue(tokenKey);

  if (tokenValue && tokenValue.includes('var')) {
    getTokenValue(token, tokenValue);
  }

  return tokenValue;
};
const getDocumentCSSTokens = () => {
  const colorKeys = [...Object.keys(common.theme.colors), ...Object.keys(light_theme.colors)];
  const shadowKeys = Object.keys(light_theme.shadows);
  /**
   * accents1: {
   *    prefix: "nextui"
   *    scale: "colors"
   *    token: "accents1"
   *    value: "var(--nextui-colors-gray100)"
   * }
   */

  const colorTokens = colorKeys.reduce((acc, crr) => {
    const color = getTokenValue('colors', crr);

    if (color) {
      acc[crr] = {
        prefix: common.prefix,
        scale: 'colors',
        token: crr,
        value: color
      };
    }

    return acc;
  }, {});
  const shadowTokens = shadowKeys.reduce((acc, crr) => {
    const shadow = getTokenValue('shadows', crr);

    if (shadow) {
      acc[crr] = {
        prefix: common.prefix,
        scale: 'shadows',
        token: crr,
        value: shadow
      };
    }

    return acc;
  }, {});
  return {
    colors: colorTokens,
    shadows: shadowTokens
  };
};
/**
 * Returns active theme according to the given document
 */

const getDocumentTheme = el => {
  var _el$getAttribute;

  const styleAttrValues = (el == null ? void 0 : (_el$getAttribute = el.getAttribute('style')) == null ? void 0 : _el$getAttribute.split(';').map(el => el.trim()).filter(el => el.includes('color-scheme'))) || [];
  const colorScheme = styleAttrValues.length > 0 ? styleAttrValues[0].replace('color-scheme: ', '').replace(';', '') : '';
  const documentTheme = el == null ? void 0 : el.getAttribute('data-theme');
  return documentTheme || colorScheme;
};
const getThemeName = theme => {
  if (typeof theme === 'string') {
    return theme != null && theme.includes('-theme') ? theme == null ? void 0 : theme.replace('-theme', '') : theme;
  }

  return theme;
};
const changeTheme = theme => {
  var _el$getAttribute2, _el$getAttribute3;

  if (!document) return;
  const el = document.documentElement;
  const prevClasses = (el == null ? void 0 : (_el$getAttribute2 = el.getAttribute('class')) == null ? void 0 : _el$getAttribute2.split(' ').filter(cls => !cls.includes('theme') && !cls.includes('light') && !cls.includes('dark'))) || [];
  const prevStyles = (el == null ? void 0 : (_el$getAttribute3 = el.getAttribute('style')) == null ? void 0 : _el$getAttribute3.split(';').filter(stl => !stl.includes('color-scheme') && stl.length).map(el => `${el};`)) || [];
  el == null ? void 0 : el.setAttribute('class', clsx(prevClasses, `${getThemeName(theme)}-theme`));
  el == null ? void 0 : el.setAttribute('style', clsx(prevStyles, `color-scheme: ${theme};`));
};
;// CONCATENATED MODULE: ./src/theme/theme-provider.tsx
var theme_provider_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/theme/theme-provider.tsx";










const defaultProps = {
  disableBaseline: false
};

const ThemeProvider = ({
  theme: userTheme,
  disableBaseline,
  children
}) => {
  const {
    isBrowser
  } = src_use_ssr();
  const [currentTheme, setCurrentTheme] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultContext.type);

  const changeCurrentTheme = type => {
    setCurrentTheme(ct => ct !== type ? type : ct);
  };

  const changeTypeBaseEl = el => {
    const themeValue = getDocumentTheme(el);
    themeValue && changeCurrentTheme(themeValue);
  };

  const providerValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const themeTokens = isBrowser ? getDocumentCSSTokens() : {};
    const theme = deep_merge_deepMerge(copyObject(defaultContext.theme), themeTokens);
    const themeName = getThemeName(currentTheme);
    return {
      theme,
      type: themeName,
      isDark: themeName === 'dark'
    };
  }, [currentTheme, isBrowser]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    var _document, _document4, _document5;

    // initial set
    changeTypeBaseEl((_document = document) == null ? void 0 : _document.documentElement);
    const observer = new MutationObserver(mutation => {
      var _mutation$;

      if (mutation && mutation.length > 0 && ((_mutation$ = mutation[0]) == null ? void 0 : _mutation$.target.nodeName) === 'BODY') {
        var _document2, _document2$body, _document2$body$datas;

        const documentTheme = (_document2 = document) == null ? void 0 : (_document2$body = _document2.body) == null ? void 0 : (_document2$body$datas = _document2$body.dataset) == null ? void 0 : _document2$body$datas.theme;
        documentTheme && changeCurrentTheme(documentTheme);
      } else {
        var _document3;

        changeTypeBaseEl((_document3 = document) == null ? void 0 : _document3.documentElement);
      }
    });
    observer.observe((_document4 = document) == null ? void 0 : _document4.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme', 'style']
    });
    observer.observe((_document5 = document) == null ? void 0 : _document5.body, {
      attributes: true,
      attributeFilter: ['data-theme', 'style']
    });
    return () => observer.disconnect();
  }, []);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!isBrowser || !userTheme) {
      return;
    }

    if (userTheme != null && userTheme.className) {
      changeTheme(userTheme.className);
      changeCurrentTheme(getThemeName(userTheme.className));
    }
  }, [isBrowser, userTheme]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)($9d939cbc98267846$export$9f8ac96af4b1b2ae, {
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(theme_context.Provider, {
      value: providerValue,
      children: [!disableBaseline && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_baseline, {}, void 0, false, {
        fileName: theme_provider_jsxFileName,
        lineNumber: 102,
        columnNumber: 30
      }, undefined), children]
    }, void 0, true, {
      fileName: theme_provider_jsxFileName,
      lineNumber: 101,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: theme_provider_jsxFileName,
    lineNumber: 100,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ const theme_provider = (with_defaults(ThemeProvider, defaultProps));
;// CONCATENATED MODULE: ./src/avatar/avatar.styles.ts

const StyledAvatar = styled('span', {
  dflex: 'center',
  position: 'relative',
  zIndex: '$1',
  boxSizing: 'border-box',
  overflow: 'hidden',
  verticalAlign: 'top',
  cursor: 'auto',
  transition: '$default',
  '&:first-child': {
    margin: 0
  },
  '&:hover .nextui-avatar-bg': {
    boxShadow: ' inset 0 0 40px 0 rgb(0 0 0 / 14%)'
  },
  '.nextui-avatar-img': {
    opacity: 0,
    zIndex: '$3',
    display: 'flex',
    bg: '$background',
    transition: 'transform 250ms ease 0ms, opacity 200ms ease-in 0ms',
    width: '100%',
    height: '100%',
    objectFit: 'cover'
  },
  '&[data-state="ready"] .nextui-avatar-img': {
    opacity: 1
  },
  '.nextui-avatar-bg': {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: '$2',
    transition: '$default',
    size: '100%'
  },
  '.nextui-avatar-icon': {
    display: 'flex',
    position: 'absolute',
    left: '50%',
    top: '50%',
    ta: 'center',
    zIndex: '$2',
    transform: 'translate(-50%, -50%)',
    whiteSpace: 'nowrap',
    us: 'none'
  },
  '.nextui-avatar-text': {
    position: 'absolute',
    zIndex: '$2',
    left: '50%',
    top: '50%',
    ta: 'center',
    transform: 'translate(-50%, -50%) scale(0.65)',
    whiteSpace: 'nowrap',
    us: 'none'
  },
  '@motion': {
    transition: 'none',
    '.nextui-avatar-bg, .nextui-avatar-img': {
      transition: 'none'
    }
  },
  variants: {
    color: {
      default: {
        '.nextui-avatar-bg': {
          bg: '$accents2'
        }
      },
      primary: {
        '.nextui-avatar-bg': {
          bg: '$primary'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      },
      secondary: {
        '.nextui-avatar-bg': {
          bg: '$secondary'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      },
      success: {
        '.nextui-avatar-bg': {
          bg: '$success'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      },
      warning: {
        '.nextui-avatar-bg': {
          bg: '$warning'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      },
      error: {
        '.nextui-avatar-bg': {
          bg: '$error'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      },
      gradient: {
        '.nextui-avatar-bg': {
          bg: '$gradient'
        },
        '.nextui-avatar-text': {
          color: '$background'
        }
      }
    },
    textColor: {
      default: {
        '.nextui-avatar-text': {
          color: '$text'
        }
      },
      primary: {
        '.nextui-avatar-text': {
          color: '$primary'
        }
      },
      secondary: {
        '.nextui-avatar-text': {
          color: '$secondary'
        }
      },
      success: {
        '.nextui-avatar-text': {
          color: '$success'
        }
      },
      warning: {
        '.nextui-avatar-text': {
          color: '$warning'
        }
      },
      error: {
        '.nextui-avatar-text': {
          color: '$error'
        }
      }
    },
    size: {
      xs: {
        $$avatarXs: '$space$9',
        sizeMin: '$$avatarXs',
        '.nextui-avatar-text': {
          fontSize: '$xs'
        }
      },
      sm: {
        $$avatarSm: '$space$11',
        sizeMin: '$$avatarSm',
        '.nextui-avatar-text': {
          fontSize: '$base'
        }
      },
      md: {
        $$avatarMd: '$space$14',
        sizeMin: '$$avatarMd',
        '.nextui-avatar-text': {
          fontSize: '$sm'
        }
      },
      lg: {
        $$avatarLg: '$space$16',
        sizeMin: '$$avatarLg',
        '.nextui-avatar-text': {
          fontSize: '$sm'
        }
      },
      xl: {
        $$avatarXl: '$space$18',
        sizeMin: '$$avatarXl',
        '.nextui-avatar-text': {
          fontSize: '$md'
        }
      }
    },
    borderWeight: {
      light: {
        '.nextui-avatar-img': {
          borderWidth: '$light'
        }
      },
      normal: {
        '.nextui-avatar-img': {
          borderWidth: '$normal'
        }
      },
      bold: {
        '.nextui-avatar-img': {
          borderWidth: '$normal'
        }
      },
      extrabold: {
        '.nextui-avatar-img': {
          borderWidth: '$normal'
        }
      },
      black: {
        '.nextui-avatar-img': {
          borderWidth: '$normal'
        }
      }
    },
    bordered: {
      true: {
        '&:hover:not(.only-text-avatar) .nextui-avatar-bg': {
          opacity: '0.6'
        },
        '.nextui-avatar-img': {
          borderStyle: 'solid',
          borderColor: '$background'
        }
      }
    },
    stacked: {
      true: {
        ml: '-$5'
      }
    },
    pointer: {
      true: {
        cursor: 'pointer'
      }
    },
    rounded: {
      true: {
        borderRadius: '$rounded',
        '.nextui-avatar-img': {
          borderRadius: '$rounded'
        }
      }
    },
    squared: {
      true: {
        borderRadius: '$squared',
        '.nextui-avatar-img': {
          borderRadius: '$squared'
        }
      }
    },
    zoomed: {
      true: {
        '&:hover .nextui-avatar-img': {
          transform: 'scale(1.125)'
        }
      }
    }
  },
  compoundVariants: [{
    bordered: true,
    borderWeight: 'light',
    css: {
      padding: 'calc($1/2)'
    }
  }, {
    bordered: true,
    borderWeight: 'normal',
    css: {
      padding: '$1'
    }
  }, {
    bordered: true,
    borderWeight: 'bold',
    css: {
      padding: 'calc($2/1.5)'
    }
  }, {
    bordered: true,
    borderWeight: 'extrabold',
    css: {
      padding: '$2'
    }
  }, {
    bordered: true,
    borderWeight: 'black',
    css: {
      padding: 'calc($3/1.5)'
    }
  }, {
    rounded: true,
    squared: true,
    css: {
      borderRadius: '$squared',
      '.nextui-avatar-img': {
        borderRadius: '$squared'
      }
    }
  }],
  defaultVariants: {
    size: 'md',
    rounded: true,
    color: 'default',
    textColor: 'default',
    borderWeight: 'normal'
  }
});
/* harmony default export */ const avatar_styles = (StyledAvatar);
;// CONCATENATED MODULE: ./src/avatar/avatar.tsx
var avatar_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/avatar/avatar.tsx";





const safeText = text => {
  if ((text == null ? void 0 : text.length) <= 4) return text;
  return text == null ? void 0 : text.slice(0, 3);
};

const Avatar = ({
  src,
  text,
  icon,
  alt,
  className,
  ...props
}) => {
  const showText = !src;
  const [ready, setReady] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const imgRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    var _imgRef$current;

    (imgRef == null ? void 0 : (_imgRef$current = imgRef.current) == null ? void 0 : _imgRef$current.complete) && setReady(true);
  }, []);
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return !ready && src ? 'loading' : 'ready';
  }, [src, ready]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(avatar_styles, {
    className: clsx({
      'only-text-avatar': showText
    }, className),
    "data-state": getState,
    ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-avatar-bg"
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 62,
      columnNumber: 7
    }, undefined), !showText && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("img", {
      ref: imgRef,
      className: clsx('nextui-avatar-img', `nextui-avatar--${getState}`, {
        'nextui-avatar-ready': ready
      }),
      src: src,
      alt: alt,
      "data-state": getState,
      onLoad: () => setReady(true)
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 64,
      columnNumber: 9
    }, undefined), showText && !icon && text && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-avatar-text",
      children: safeText(text)
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 76,
      columnNumber: 9
    }, undefined), icon && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-avatar-icon",
      children: icon
    }, void 0, false, {
      fileName: avatar_jsxFileName,
      lineNumber: 78,
      columnNumber: 16
    }, undefined)]
  }, void 0, true, {
    fileName: avatar_jsxFileName,
    lineNumber: 52,
    columnNumber: 5
  }, undefined);
};

Avatar.toString = () => '.nextui-avatar';

/* harmony default export */ const avatar = (Avatar);
;// CONCATENATED MODULE: ./src/avatar/avatar-group.styles.ts


const StyledAvatarGroupCount = styled('span', {
  fontSize: '$xs',
  display: 'inline-flex',
  alignItems: 'center',
  marginLeft: '$3',
  color: '$text'
});
const StyledAvatarGroup = styled('div', {
  dflex: 'center',
  height: 'auto',
  width: 'max-content',
  '@motion': {
    transition: 'none'
  },
  [`& ${avatar_styles}`]: {
    marginLeft: '-$space$5',
    transition: '$default',
    '.only-text-avatar': {
      boxShadow: '$xs'
    }
  },
  '.only-text-avatar': {
    boxShadow: '$xs'
  },
  variants: {
    animated: {
      true: {
        [`& ${avatar_styles}:hover`]: {
          transform: 'translate(-$space$5)'
        }
      }
    }
  },
  defaultVariants: {
    animated: true
  }
});
/* harmony default export */ const avatar_group_styles = (StyledAvatarGroup);
;// CONCATENATED MODULE: ./src/avatar/avatar-group.tsx
var avatar_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/avatar/avatar-group.tsx";




const AvatarGroup = ({
  count,
  children,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(avatar_group_styles, { ...props,
    children: [children, count && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledAvatarGroupCount, {
      className: "nextui-avatar-group-count",
      children: ["+", count]
    }, void 0, true, {
      fileName: avatar_group_jsxFileName,
      lineNumber: 28,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: avatar_group_jsxFileName,
    lineNumber: 25,
    columnNumber: 5
  }, undefined);
};

AvatarGroup.toString = () => '.nextui-avatar-group';

/* harmony default export */ const avatar_group = (AvatarGroup);
;// CONCATENATED MODULE: ./src/avatar/index.ts





avatar.Group = avatar_group;
/* harmony default export */ const src_avatar = (avatar);
;// CONCATENATED MODULE: ../../node_modules/clsx/dist/clsx.m.js
function clsx_m_toVal(mix) {
  var k,
      y,
      str = '';

  if (typeof mix === 'string' || typeof mix === 'number') {
    str += mix;
  } else if (typeof mix === 'object') {
    if (Array.isArray(mix)) {
      for (k = 0; k < mix.length; k++) {
        if (mix[k]) {
          if (y = clsx_m_toVal(mix[k])) {
            str && (str += ' ');
            str += y;
          }
        }
      }
    } else {
      for (k in mix) {
        if (mix[k]) {
          str && (str += ' ');
          str += k;
        }
      }
    }
  }

  return str;
}

/* harmony default export */ function clsx_m() {
  var i = 0,
      tmp,
      x,
      str = '';

  while (i < arguments.length) {
    if (tmp = arguments[i++]) {
      if (x = clsx_m_toVal(tmp)) {
        str && (str += ' ');
        str += x;
      }
    }
  }

  return str;
}
;// CONCATENATED MODULE: ../../node_modules/@react-stately/utils/dist/module.js


function utils_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $bfee1151ccb0650f$exports = {};
utils_dist_module_$parcel$export($bfee1151ccb0650f$exports, "useControlledState", () => $bfee1151ccb0650f$export$40bfa8c7b0832715);

function $bfee1151ccb0650f$export$40bfa8c7b0832715(value1, defaultValue, onChange) {
  let [stateValue, setStateValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(value1 || defaultValue);
  let ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(value1 !== undefined);
  let wasControlled = ref.current;
  let isControlled = value1 !== undefined; // Internal state reference for useCallback

  let stateRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(stateValue);
  if (wasControlled !== isControlled) console.warn(`WARN: A component changed from ${wasControlled ? 'controlled' : 'uncontrolled'} to ${isControlled ? 'controlled' : 'uncontrolled'}.`);
  ref.current = isControlled;
  let setValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((value2, ...args) => {
    let onChangeCaller = (value, ...onChangeArgs) => {
      if (onChange) {
        if (!Object.is(stateRef.current, value)) onChange(value, ...onChangeArgs);
      }

      if (!isControlled) stateRef.current = value;
    };

    if (typeof value2 === 'function') {
      console.warn('We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320'); // this supports functional updates https://reactjs.org/docs/hooks-reference.html#functional-updates
      // when someone using useControlledState calls setControlledState(myFunc)
      // this will call our useState setState with a function as well which invokes myFunc and calls onChange with the value from myFunc
      // if we're in an uncontrolled state, then we also return the value of myFunc which to setState looks as though it was just called with myFunc from the beginning
      // otherwise we just return the controlled value, which won't cause a rerender because React knows to bail out when the value is the same

      let updateFunction = (oldValue, ...functionArgs) => {
        let interceptedValue = value2(isControlled ? stateRef.current : oldValue, ...functionArgs);
        onChangeCaller(interceptedValue, ...args);
        if (!isControlled) return interceptedValue;
        return oldValue;
      };

      setStateValue(updateFunction);
    } else {
      if (!isControlled) setStateValue(value2);
      onChangeCaller(value2, ...args);
    }
  }, [isControlled, onChange]); // If a controlled component's value prop changes, we need to update stateRef

  if (isControlled) stateRef.current = value1;else value1 = stateValue;
  return [value1, setValue];
}

var $48d9f1d165180307$exports = {};
utils_dist_module_$parcel$export($48d9f1d165180307$exports, "clamp", () => $48d9f1d165180307$export$7d15b64cf5a3a4c4);
utils_dist_module_$parcel$export($48d9f1d165180307$exports, "snapValueToStep", () => $48d9f1d165180307$export$cb6e0bb50bc19463);
utils_dist_module_$parcel$export($48d9f1d165180307$exports, "toFixedNumber", () => $48d9f1d165180307$export$b6268554fba451f);

function $48d9f1d165180307$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {
  let newValue = Math.min(Math.max(value, min), max);
  return newValue;
}

function $48d9f1d165180307$export$cb6e0bb50bc19463(value, min, max, step) {
  let remainder = (value - (isNaN(min) ? 0 : min)) % step;
  let snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;

  if (!isNaN(min)) {
    if (snappedValue < min) snappedValue = min;else if (!isNaN(max) && snappedValue > max) snappedValue = min + Math.floor((max - min) / step) * step;
  } else if (!isNaN(max) && snappedValue > max) snappedValue = Math.floor(max / step) * step; // correct floating point behavior by rounding to step precision


  let string = step.toString();
  let index = string.indexOf('.');
  let precision = index >= 0 ? string.length - index : 0;

  if (precision > 0) {
    let pow = Math.pow(10, precision);
    snappedValue = Math.round(snappedValue * pow) / pow;
  }

  return snappedValue;
}

function $48d9f1d165180307$export$b6268554fba451f(value, digits, base = 10) {
  const pow = Math.pow(base, digits);
  return Math.round(value * pow) / pow;
}


;// CONCATENATED MODULE: ./node_modules/@react-aria/focus/node_modules/@react-aria/utils/dist/module.js





function _react_aria_utils_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $bdb11010cef70236$exports = {};
_react_aria_utils_dist_module_$parcel$export($bdb11010cef70236$exports, "useId", () => $bdb11010cef70236$export$f680877a34711e37);
_react_aria_utils_dist_module_$parcel$export($bdb11010cef70236$exports, "mergeIds", () => $bdb11010cef70236$export$cd8c9cb68f842629);
_react_aria_utils_dist_module_$parcel$export($bdb11010cef70236$exports, "useSlotId", () => $bdb11010cef70236$export$b4cc09c592e8fdb8);
var $f0a04ccd8dbdd83b$exports = {};
_react_aria_utils_dist_module_$parcel$export($f0a04ccd8dbdd83b$exports, "useLayoutEffect", () => $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c);
const $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== 'undefined' ? (external_root_React_commonjs2_react_commonjs_react_amd_react_default()).useLayoutEffect : () => {};
let $bdb11010cef70236$var$idsUpdaterMap = new Map();

function $bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let isRendering = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(true);
  isRendering.current = true;
  let [value, setValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultId);
  let nextId = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let res = $9d939cbc98267846$export$619500959fc48b26(value); // don't memo this, we want it new each render so that the Effects always run

  let updateValue = val => {
    if (!isRendering.current) setValue(val);else nextId.current = val;
  };

  $bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    isRendering.current = false;
  }, [updateValue]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let r = res;
    return () => {
      $bdb11010cef70236$var$idsUpdaterMap.delete(r);
    };
  }, [res]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let newId = nextId.current;

    if (newId) {
      setValue(newId);
      nextId.current = null;
    }
  }, [setValue, updateValue]);
  return res;
}

function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);

  if (setIdA) {
    setIdA(idB);
    return idB;
  }

  let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);

  if (setIdB) {
    setIdB(idA);
    return idA;
  }

  return idB;
}

function $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = $bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = $1dbecbe27a04f9af$export$14d238f342723f25(id);
  let updateId = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : null;
    });
  }, [id, setResolvedId]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(updateId, [id, updateId, ...depArray]);
  return resolvedId;
}

var $ff5963eb1fccf552$exports = {};
_react_aria_utils_dist_module_$parcel$export($ff5963eb1fccf552$exports, "chain", () => $ff5963eb1fccf552$export$e08e3b67e392101e);

function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === 'function') callback(...args);
  };
}

var $3ef42575df84b30b$exports = {};
_react_aria_utils_dist_module_$parcel$export($3ef42575df84b30b$exports, "mergeProps", () => $3ef42575df84b30b$export$9d1611c77c2fe928);

function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  // Start with a base clone of the first argument. This is a lot faster than starting
  // with an empty object and adding properties as we go.
  let result = { ...args[0]
  };

  for (let i = 1; i < args.length; i++) {
    let props = args[i];

    for (let key in props) {
      let a = result[key];
      let b = props[key]; // Chain events

      if (typeof a === 'function' && typeof b === 'function' && // This is a lot faster than a regex.
      key[0] === 'o' && key[1] === 'n' && key.charCodeAt(2) >=
      /* 'A' */
      65 && key.charCodeAt(2) <=
      /* 'Z' */
      90) result[key] = $ff5963eb1fccf552$export$e08e3b67e392101e(a, b);else if ((key === 'className' || key === 'UNSAFE_className') && typeof a === 'string' && typeof b === 'string') result[key] = clsx_m(a, b);else if (key === 'id' && a && b) result.id = $bdb11010cef70236$export$cd8c9cb68f842629(a, b);else result[key] = b !== undefined ? b : a;
    }
  }

  return result;
}

var $65484d02dcb7eb3e$exports = {};
_react_aria_utils_dist_module_$parcel$export($65484d02dcb7eb3e$exports, "filterDOMProps", () => $65484d02dcb7eb3e$export$457c3d6518dd4c6f);
const $65484d02dcb7eb3e$var$DOMPropNames = new Set(['id']);
const $65484d02dcb7eb3e$var$labelablePropNames = new Set(['aria-label', 'aria-labelledby', 'aria-describedby', 'aria-details']);
const $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;

function $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let {
    labelable: labelable,
    propNames: propNames
  } = opts;
  let filteredProps = {};

  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];

  return filteredProps;
}

var $7215afc6de606d6b$exports = {};
_react_aria_utils_dist_module_$parcel$export($7215afc6de606d6b$exports, "focusWithoutScrolling", () => $7215afc6de606d6b$export$de79e2c695e052f3);

function $7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if ($7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
    preventScroll: true
  });else {
    let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}

let $7215afc6de606d6b$var$supportsPreventScrollCached = null;

function $7215afc6de606d6b$var$supportsPreventScroll() {
  if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    $7215afc6de606d6b$var$supportsPreventScrollCached = false;

    try {
      var focusElem = document.createElement('div');
      focusElem.focus({
        get preventScroll() {
          $7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }

      });
    } catch (e) {// Ignore
    }
  }

  return $7215afc6de606d6b$var$supportsPreventScrollCached;
}

function $7215afc6de606d6b$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;

  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }

  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}

function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let {
    element: element,
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}

var $ab71dadb03a6fb2e$exports = {};
_react_aria_utils_dist_module_$parcel$export($ab71dadb03a6fb2e$exports, "getOffset", () => $ab71dadb03a6fb2e$export$622cea445a1c5b7d);

function $ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = 'horizontal') {
  let rect = element.getBoundingClientRect();
  if (reverse) return orientation === 'horizontal' ? rect.right : rect.bottom;
  return orientation === 'horizontal' ? rect.left : rect.top;
}

var $103b0e103f1b5952$exports = {};
_react_aria_utils_dist_module_$parcel$export($103b0e103f1b5952$exports, "clamp", () => $48d9f1d165180307$export$7d15b64cf5a3a4c4);
_react_aria_utils_dist_module_$parcel$export($103b0e103f1b5952$exports, "snapValueToStep", () => $48d9f1d165180307$export$cb6e0bb50bc19463);
var $bbed8b41f857bcc0$exports = {};
_react_aria_utils_dist_module_$parcel$export($bbed8b41f857bcc0$exports, "runAfterTransition", () => $bbed8b41f857bcc0$export$24490316f764c430);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// We store a global list of elements that are currently transitioning,
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.

let $bbed8b41f857bcc0$var$transitionsByElement = new Map(); // A list of callbacks to call once there are no transitioning elements.

let $bbed8b41f857bcc0$var$transitionCallbacks = new Set();

function $bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === 'undefined') return;

  let onTransitionStart = e => {
    // Add the transitioning property to the list for this element.
    let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);

    if (!transitions) {
      transitions = new Set();
      $bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions); // The transitioncancel event must be registered on the element itself, rather than as a global
      // event. This enables us to handle when the node is deleted from the document while it is transitioning.
      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.

      e.target.addEventListener('transitioncancel', onTransitionEnd);
    }

    transitions.add(e.propertyName);
  };

  let onTransitionEnd = e => {
    // Remove property from list of transitioning properties.
    let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName); // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.

    if (properties.size === 0) {
      e.target.removeEventListener('transitioncancel', onTransitionEnd);
      $bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    } // If no transitioning elements, call all of the queued callbacks.


    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks) cb();

      $bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };

  document.body.addEventListener('transitionrun', onTransitionStart);
  document.body.addEventListener('transitionend', onTransitionEnd);
}

if (typeof document !== 'undefined') {
  if (document.readyState !== 'loading') $bbed8b41f857bcc0$var$setupGlobalEvents();else document.addEventListener('DOMContentLoaded', $bbed8b41f857bcc0$var$setupGlobalEvents);
}

function $bbed8b41f857bcc0$export$24490316f764c430(fn) {
  // Wait one frame to see if an animation starts, e.g. a transition on mount.
  requestAnimationFrame(() => {
    // If no transitions are running, call the function immediately.
    // Otherwise, add it to a list of callbacks to run at the end of the animation.
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();else $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}

var $9cc09df9fd7676be$exports = {};
_react_aria_utils_dist_module_$parcel$export($9cc09df9fd7676be$exports, "useDrag1D", () => $9cc09df9fd7676be$export$7bbed75feba39706); // Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.

const $9cc09df9fd7676be$var$draggingElements = [];

function $9cc09df9fd7676be$export$7bbed75feba39706(props) {
  console.warn('useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html');
  let {
    containerRef: containerRef,
    reverse: reverse,
    orientation: orientation,
    onHover: onHover,
    onDrag: onDrag,
    onPositionChange: onPositionChange,
    onIncrement: onIncrement,
    onDecrement: onDecrement,
    onIncrementToMax: onIncrementToMax,
    onDecrementToMin: onDecrementToMin,
    onCollapseToggle: onCollapseToggle
  } = props;

  let getPosition = e => orientation === 'horizontal' ? e.clientX : e.clientY;

  let getNextOffset = e => {
    let containerOffset = $ab71dadb03a6fb2e$export$622cea445a1c5b7d(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };

  let dragging = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(false);
  let prevPosition = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(0); // Keep track of the current handlers in a ref so that the events can access them.

  let handlers = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    onPositionChange: onPositionChange,
    onDrag: onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;

  let onMouseDragged = e => {
    e.preventDefault();
    let nextOffset = getNextOffset(e);

    if (!dragging.current) {
      dragging.current = true;
      if (handlers.current.onDrag) handlers.current.onDrag(true);
      if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    }

    if (prevPosition.current === nextOffset) return;
    prevPosition.current = nextOffset;
    if (onPositionChange) onPositionChange(nextOffset);
  };

  let onMouseUp = e => {
    const target = e.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e);
    if (handlers.current.onDrag) handlers.current.onDrag(false);
    if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    $9cc09df9fd7676be$var$draggingElements.splice($9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);
    window.removeEventListener('mouseup', onMouseUp, false);
    window.removeEventListener('mousemove', onMouseDragged, false);
  };

  let onMouseDown = e => {
    const target = e.currentTarget; // If we're already handling dragging on a descendant with useDrag1D, then
    // we don't want to handle the drag motion on this target as well.

    if ($9cc09df9fd7676be$var$draggingElements.some(elt => target.contains(elt))) return;
    $9cc09df9fd7676be$var$draggingElements.push(target);
    window.addEventListener('mousemove', onMouseDragged, false);
    window.addEventListener('mouseup', onMouseUp, false);
  };

  let onMouseEnter = () => {
    if (onHover) onHover(true);
  };

  let onMouseOut = () => {
    if (onHover) onHover(false);
  };

  let onKeyDown = e => {
    switch (e.key) {
      case 'Left':
      case 'ArrowLeft':
        if (orientation === 'horizontal') {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }

        break;

      case 'Up':
      case 'ArrowUp':
        if (orientation === 'vertical') {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }

        break;

      case 'Right':
      case 'ArrowRight':
        if (orientation === 'horizontal') {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }

        break;

      case 'Down':
      case 'ArrowDown':
        if (orientation === 'vertical') {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }

        break;

      case 'Home':
        e.preventDefault();
        if (onDecrementToMin) onDecrementToMin();
        break;

      case 'End':
        e.preventDefault();
        if (onIncrementToMax) onIncrementToMax();
        break;

      case 'Enter':
        e.preventDefault();
        if (onCollapseToggle) onCollapseToggle();
        break;
    }
  };

  return {
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseOut: onMouseOut,
    onKeyDown: onKeyDown
  };
}

var $03deb23ff14920c4$exports = {};
_react_aria_utils_dist_module_$parcel$export($03deb23ff14920c4$exports, "useGlobalListeners", () => $03deb23ff14920c4$export$4eaf04e54aa8eed6);

function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(new Map());
  let addGlobalListener = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((eventTarget, type, listener, options) => {
    // Make sure we remove the listener after it is called with the `once` option.
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type: type,
      eventTarget: eventTarget,
      fn: fn,
      options: options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((eventTarget, type, listener, options) => {
    var ref;
    let fn = ((ref = globalListeners.current.get(listener)) === null || ref === void 0 ? void 0 : ref.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [removeGlobalListener]); // eslint-disable-next-line arrow-body-style

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return removeAllGlobalListeners;
  }, [removeAllGlobalListeners]);
  return {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  };
}

var $313b98861ee5dd6c$exports = {};
_react_aria_utils_dist_module_$parcel$export($313b98861ee5dd6c$exports, "useLabels", () => $313b98861ee5dd6c$export$d6875122194c7b44);

function $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let {
    id: id,
    'aria-label': label,
    'aria-labelledby': labelledBy
  } = props; // If there is both an aria-label and aria-labelledby,
  // combine them by pointing to the element itself.

  id = $bdb11010cef70236$export$f680877a34711e37(id);

  if (labelledBy && label) {
    let ids = new Set([...labelledBy.trim().split(/\s+/), id]);
    labelledBy = [...ids].join(' ');
  } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(' '); // If no labels are provided, use the default


  if (!label && !labelledBy && defaultLabel) label = defaultLabel;
  return {
    id: id,
    'aria-label': label,
    'aria-labelledby': labelledBy
  };
}

var $df56164dff5785e2$exports = {};
_react_aria_utils_dist_module_$parcel$export($df56164dff5785e2$exports, "useObjectRef", () => $df56164dff5785e2$export$4338b53315abf666);

function $df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  /**
  * We're using `useLayoutEffect` here instead of `useEffect` because we want
  * to make sure that the `ref` value is up to date before other places in the
  * the execution cycle try to read it.
  */

  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (!forwardedRef) return;
    if (typeof forwardedRef === 'function') forwardedRef(objRef.current);else forwardedRef.current = objRef.current;
  }, [forwardedRef]);
  return objRef;
}

var $4f58c5f72bcf79f7$exports = {};
_react_aria_utils_dist_module_$parcel$export($4f58c5f72bcf79f7$exports, "useUpdateEffect", () => $4f58c5f72bcf79f7$export$496315a1608d9602);

function $4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(true);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isInitialMount.current) isInitialMount.current = false;else effect(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencies);
}

var $9daab02d461809db$exports = {};
_react_aria_utils_dist_module_$parcel$export($9daab02d461809db$exports, "useResizeObserver", () => $9daab02d461809db$export$683480f191c0e3ea);

function $9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== 'undefined';
}

function $9daab02d461809db$export$683480f191c0e3ea(options) {
  const {
    ref: ref,
    onResize: onResize
  } = options;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element) return;

    if (!$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener('resize', onResize, false);
      return () => {
        window.removeEventListener('resize', onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver(entries => {
        if (!entries.length) return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element) resizeObserverInstance.unobserve(element);
      };
    }
  }, [onResize, ref]);
}

var $e7801be82b4b2a53$exports = {};
_react_aria_utils_dist_module_$parcel$export($e7801be82b4b2a53$exports, "useSyncRef", () => $e7801be82b4b2a53$export$4debdb1a3f0fa79e);

function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [context, ref]);
}

var $62d8ded9296f3872$exports = {};
_react_aria_utils_dist_module_$parcel$export($62d8ded9296f3872$exports, "getScrollParent", () => $62d8ded9296f3872$export$cfa2225e87938781);

function $62d8ded9296f3872$export$cfa2225e87938781(node) {
  while (node && !$62d8ded9296f3872$var$isScrollable(node)) node = node.parentElement;

  return node || document.scrollingElement || document.documentElement;
}

function $62d8ded9296f3872$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}

var $5df64b3807dc15ee$exports = {};
_react_aria_utils_dist_module_$parcel$export($5df64b3807dc15ee$exports, "useViewportSize", () => $5df64b3807dc15ee$export$d699905dd57c73ca); // @ts-ignore

let $5df64b3807dc15ee$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;

function $5df64b3807dc15ee$export$d699905dd57c73ca() {
  let [size1, setSize] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(() => $5df64b3807dc15ee$var$getViewportSize());
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    // Use visualViewport api to track available height even on iOS virtual keyboard opening
    let onResize = () => {
      setSize(size => {
        let newSize = $5df64b3807dc15ee$var$getViewportSize();
        if (newSize.width === size.width && newSize.height === size.height) return size;
        return newSize;
      });
    };

    if (!$5df64b3807dc15ee$var$visualViewport) window.addEventListener('resize', onResize);else $5df64b3807dc15ee$var$visualViewport.addEventListener('resize', onResize);
    return () => {
      if (!$5df64b3807dc15ee$var$visualViewport) window.removeEventListener('resize', onResize);else $5df64b3807dc15ee$var$visualViewport.removeEventListener('resize', onResize);
    };
  }, []);
  return size1;
}

function $5df64b3807dc15ee$var$getViewportSize() {
  return {
    width: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
    height: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
  };
}

var $ef06256079686ba0$exports = {};
_react_aria_utils_dist_module_$parcel$export($ef06256079686ba0$exports, "useDescription", () => $ef06256079686ba0$export$f8aeda7b10753fa1);
let $ef06256079686ba0$var$descriptionId = 0;
const $ef06256079686ba0$var$descriptionNodes = new Map();

function $ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id1, setId] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(null);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (!description) return;
    let desc = $ef06256079686ba0$var$descriptionNodes.get(description);

    if (!desc) {
      let id = `react-aria-description-${$ef06256079686ba0$var$descriptionId++}`;
      setId(id);
      let node = document.createElement('div');
      node.id = id;
      node.style.display = 'none';
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      $ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else setId(desc.element.id);

    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        $ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [description]);
  return {
    'aria-describedby': description ? id1 : undefined
  };
}

var $c87311424ea30a05$exports = {};
_react_aria_utils_dist_module_$parcel$export($c87311424ea30a05$exports, "isMac", () => $c87311424ea30a05$export$9ac100e40613ea10);
_react_aria_utils_dist_module_$parcel$export($c87311424ea30a05$exports, "isIPhone", () => $c87311424ea30a05$export$186c6964ca17d99);
_react_aria_utils_dist_module_$parcel$export($c87311424ea30a05$exports, "isIPad", () => $c87311424ea30a05$export$7bef049ce92e4224);
_react_aria_utils_dist_module_$parcel$export($c87311424ea30a05$exports, "isIOS", () => $c87311424ea30a05$export$fedb369cb70207f1);
_react_aria_utils_dist_module_$parcel$export($c87311424ea30a05$exports, "isAppleDevice", () => $c87311424ea30a05$export$e1865c3bedcd822b);
_react_aria_utils_dist_module_$parcel$export($c87311424ea30a05$exports, "isWebKit", () => $c87311424ea30a05$export$78551043582a6a98);
_react_aria_utils_dist_module_$parcel$export($c87311424ea30a05$exports, "isChrome", () => $c87311424ea30a05$export$6446a186d09e379e);
_react_aria_utils_dist_module_$parcel$export($c87311424ea30a05$exports, "isAndroid", () => $c87311424ea30a05$export$a11b0059900ceec8);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $c87311424ea30a05$var$testUserAgent(re) {
  var ref;
  if (typeof window === 'undefined' || window.navigator == null) return false;
  return ((ref = window.navigator['userAgentData']) === null || ref === void 0 ? void 0 : ref.brands.some(brand => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}

function $c87311424ea30a05$var$testPlatform(re) {
  return typeof window !== 'undefined' && window.navigator != null ? re.test((window.navigator['userAgentData'] || window.navigator).platform) : false;
}

function $c87311424ea30a05$export$9ac100e40613ea10() {
  return $c87311424ea30a05$var$testPlatform(/^Mac/i);
}

function $c87311424ea30a05$export$186c6964ca17d99() {
  return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
}

function $c87311424ea30a05$export$7bef049ce92e4224() {
  return $c87311424ea30a05$var$testPlatform(/^iPad/i) || $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}

function $c87311424ea30a05$export$fedb369cb70207f1() {
  return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
}

function $c87311424ea30a05$export$e1865c3bedcd822b() {
  return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
}

function $c87311424ea30a05$export$78551043582a6a98() {
  return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
}

function $c87311424ea30a05$export$6446a186d09e379e() {
  return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
}

function $c87311424ea30a05$export$a11b0059900ceec8() {
  return $c87311424ea30a05$var$testUserAgent(/Android/i);
}

var $e9faafb641e167db$exports = {};
_react_aria_utils_dist_module_$parcel$export($e9faafb641e167db$exports, "useEvent", () => $e9faafb641e167db$export$90fc3a17d93f704c);

function $e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler1, options) {
  let handlerRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(handler1);
  handlerRef.current = handler1;
  let isDisabled = handler1 == null;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isDisabled) return;
    let element = ref.current;

    let handler = e => handlerRef.current.call(this, e);

    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [ref, event, options, isDisabled]);
}

var $1dbecbe27a04f9af$exports = {};
_react_aria_utils_dist_module_$parcel$export($1dbecbe27a04f9af$exports, "useValueEffect", () => $1dbecbe27a04f9af$export$14d238f342723f25);

function $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultValue);
  let valueRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(value);
  let effect = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  valueRef.current = value; // Store the function in a ref so we can always access the current version
  // which has the proper `value` in scope.

  let nextRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);

  nextRef.current = () => {
    // Run the generator to the next yield.
    let newValue = effect.current.next(); // If the generator is done, reset the effect.

    if (newValue.done) {
      effect.current = null;
      return;
    } // If the value is the same as the current value,
    // then continue to the next yield. Otherwise,
    // set the value in state and wait for the next layout effect.


    if (value === newValue.value) nextRef.current();else setValue(newValue.value);
  };

  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    // If there is an effect currently running, continue to the next yield.
    if (effect.current) nextRef.current();
  });
  let queue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(fn => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [effect, nextRef]);
  return [value, queue];
}

var $2f04cbc44ee30ce0$exports = {};
_react_aria_utils_dist_module_$parcel$export($2f04cbc44ee30ce0$exports, "scrollIntoView", () => $2f04cbc44ee30ce0$export$53a0910f038337bd);

function $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'left');
  let offsetY = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'top');
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let maxX = x + scrollView.offsetWidth;
  let maxY = y + scrollView.offsetHeight;
  if (offsetX <= x) x = offsetX;else if (offsetX + width > maxX) x += offsetX + width - maxX;
  if (offsetY <= y) y = offsetY;else if (offsetY + height > maxY) y += offsetY + height - maxY;
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */


function $2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';
  let sum = 0;

  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) break;else if (child.offsetParent.contains(ancestor)) {
      // If the ancestor is not `position:relative`, then we stop at
      // _its_ offset parent, and we subtract off _its_ offset, so that
      // we end up with the proper offset from child to ancestor.
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }

  return sum;
}


;// CONCATENATED MODULE: ./node_modules/@react-aria/focus/node_modules/@react-aria/interactions/dist/module.js



function interactions_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $3b117e43dc0ca95d$exports = {};
interactions_dist_module_$parcel$export($3b117e43dc0ca95d$exports, "Pressable", () => $3b117e43dc0ca95d$export$27c701ed9e449e99);
var $f6c31cce2adf654f$exports = {};
interactions_dist_module_$parcel$export($f6c31cce2adf654f$exports, "usePress", () => $f6c31cce2adf654f$export$45712eceda6fad21); // Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element
// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually

let $14c0b72509d70225$var$state = 'default';
let $14c0b72509d70225$var$savedUserSelect = '';
let $14c0b72509d70225$var$modifiedElementMap = new WeakMap();

function $14c0b72509d70225$export$16a4697467175487(target) {
  if ($c87311424ea30a05$export$fedb369cb70207f1()) {
    if ($14c0b72509d70225$var$state === 'default') {
      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
      document.documentElement.style.webkitUserSelect = 'none';
    }

    $14c0b72509d70225$var$state = 'disabled';
  } else if (target) {
    // If not iOS, store the target's original user-select and change to user-select: none
    // Ignore state since it doesn't apply for non iOS
    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
    target.style.userSelect = 'none';
  }
}

function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ($c87311424ea30a05$export$fedb369cb70207f1()) {
    // If the state is already default, there's nothing to do.
    // If it is restoring, then there's no need to queue a second restore.
    if ($14c0b72509d70225$var$state !== 'disabled') return;
    $14c0b72509d70225$var$state = 'restoring'; // There appears to be a delay on iOS where selection still might occur
    // after pointer up, so wait a bit before removing user-select.

    setTimeout(() => {
      // Wait for any CSS transitions to complete so we don't recompute style
      // for the whole page in the middle of the animation and cause jank.
      $bbed8b41f857bcc0$export$24490316f764c430(() => {
        // Avoid race conditions
        if ($14c0b72509d70225$var$state === 'restoring') {
          if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || '';
          $14c0b72509d70225$var$savedUserSelect = '';
          $14c0b72509d70225$var$state = 'default';
        }
      });
    }, 300);
  } else // If not iOS, restore the target's original user-select if any
    // Ignore state since it doesn't apply for non iOS
    if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
      let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
      if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;
      if (target.getAttribute('style') === '') target.removeAttribute('style');
      $14c0b72509d70225$var$modifiedElementMap.delete(target);
    }
}

function $8a9cb279dc87e130$export$60278871457622de(event) {
  // JAWS/NVDA with Firefox.
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  return event.detail === 0 && !event.pointerType;
}

class $8a9cb279dc87e130$export$905e7fc544a71f36 {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }

  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }

  stopPropagation() {
    this.nativeEvent.stopPropagation();

    this.isPropagationStopped = () => true;
  }

  isPropagationStopped() {
    return false;
  }

  persist() {}

  constructor(type, nativeEvent) {
    this.nativeEvent = nativeEvent;
    this.target = nativeEvent.target;
    this.currentTarget = nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }

}

function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocused: false,
    onBlur: onBlur,
    observer: null
  });
  let state1 = stateRef.current;
  state1.onBlur = onBlur; // Clean up MutationObserver on unmount. See below.
  // eslint-disable-next-line arrow-body-style

  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    return () => {
      if (state1.observer) {
        state1.observer.disconnect();
        state1.observer = null;
      }
    };
  }, [state1]); // This function is called during a React onFocus event.

  return e1 => {
    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142
    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a
    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.
    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.
    if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {
      state1.isFocused = true;
      let target = e1.target;

      let onBlurHandler = e => {
        var // For backward compatibility, dispatch a (fake) React synthetic event.
        ref;
        let state = stateRef.current;
        state.isFocused = false;
        if (target.disabled) (ref = state.onBlur) === null || ref === void 0 ? void 0 : ref.call(state, new $8a9cb279dc87e130$export$905e7fc544a71f36('blur', e)); // We no longer need the MutationObserver once the target is blurred.

        if (state.observer) {
          state.observer.disconnect();
          state.observer = null;
        }
      };

      target.addEventListener('focusout', onBlurHandler, {
        once: true
      });
      state1.observer = new MutationObserver(() => {
        if (state1.isFocused && target.disabled) {
          state1.observer.disconnect();
          target.dispatchEvent(new FocusEvent('blur'));
          target.dispatchEvent(new FocusEvent('focusout', {
            bubbles: true
          }));
        }
      });
      state1.observer.observe(target, {
        attributes: true,
        attributeFilter: ['disabled']
      });
    }
  };
}

const $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);
$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';

function $f6c31cce2adf654f$var$usePressResponderContext(props) {
  // Consume context from <PressResponder> and merge with props.
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($ae1eeba8b9eafd08$export$5165eccb35aaadb5);

  if (context) {
    let {
      register: register,
      ...contextProps
    } = context;
    props = $3ef42575df84b30b$export$9d1611c77c2fe928(contextProps, props);
    register();
  }

  $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, props.ref);
  return props;
}

function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let {
    onPress: onPress1,
    onPressChange: onPressChange1,
    onPressStart: onPressStart1,
    onPressEnd: onPressEnd1,
    onPressUp: onPressUp1,
    isDisabled: isDisabled1,
    isPressed: isPressedProp,
    preventFocusOnPress: preventFocusOnPress,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit,
    allowTextSelectionOnPress: allowTextSelectionOnPress,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: _,
    ...domProps
  } = $f6c31cce2adf654f$var$usePressResponderContext(props);
  let propsRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  propsRef.current = {
    onPress: onPress1,
    onPressChange: onPressChange1,
    onPressStart: onPressStart1,
    onPressEnd: onPressEnd1,
    onPressUp: onPressUp1,
    isDisabled: isDisabled1,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit
  };
  let [isPressed, setPressed] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    ignoreClickAfterPress: false,
    didFirePressStart: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let pressProps1 = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let state = ref.current;

    let triggerPressStart = (originalEvent, pointerType) => {
      let {
        onPressStart: onPressStart,
        onPressChange: onPressChange,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled || state.didFirePressStart) return;
      if (onPressStart) onPressStart({
        type: 'pressstart',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(true);
      state.didFirePressStart = true;
      setPressed(true);
    };

    let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {
      let {
        onPressEnd: onPressEnd,
        onPressChange: onPressChange,
        onPress: onPress,
        isDisabled: isDisabled
      } = propsRef.current;
      if (!state.didFirePressStart) return;
      state.ignoreClickAfterPress = true;
      state.didFirePressStart = false;
      if (onPressEnd) onPressEnd({
        type: 'pressend',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(false);
      setPressed(false);
      if (onPress && wasPressed && !isDisabled) onPress({
        type: 'press',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };

    let triggerPressUp = (originalEvent, pointerType) => {
      let {
        onPressUp: onPressUp,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled) return;
      if (onPressUp) onPressUp({
        type: 'pressup',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };

    let cancel = e => {
      if (state.isPressed) {
        if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isPressed = false;
        state.isOverTarget = false;
        state.activePointerId = null;
        state.pointerType = null;
        removeAllGlobalListeners();
        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
      }
    };

    let pressProps = {
      onKeyDown(e) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target)) {
          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();
          e.stopPropagation(); // If the event is repeating, it may have started on a different element
          // after which focus moved to the current element. Ignore these events and
          // only handle the first key down event.

          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            triggerPressStart(e, 'keyboard'); // Focus may move before the key up event, so register the event on the document
            // instead of the same element where the key down event occurred.

            addGlobalListener(document, 'keyup', onKeyUp, false);
          }
        }
      },

      onKeyUp(e) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');
      },

      onClick(e) {
        if (e && !e.currentTarget.contains(e.target)) return;

        if (e && e.button === 0) {
          e.stopPropagation();
          if (isDisabled1) e.preventDefault(); // If triggered from a screen reader or by using element.click(),
          // trigger as if it were a keyboard click.

          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent))) {
            // Ensure the element receives focus (VoiceOver on iOS does not do this)
            if (!isDisabled1 && !preventFocusOnPress) $7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
            triggerPressStart(e, 'virtual');
            triggerPressUp(e, 'virtual');
            triggerPressEnd(e, 'virtual');
          }

          state.ignoreEmulatedMouseEvents = false;
          state.ignoreClickAfterPress = false;
        }
      }

    };

    let onKeyUp = e => {
      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e)) {
        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();
        e.stopPropagation();
        state.isPressed = false;
        let target = e.target;
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));
        removeAllGlobalListeners(); // If the target is a link, trigger the click method to open the URL,
        // but defer triggering pressEnd until onClick event handler.

        if (state.target.contains(target) && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') state.target.click();
      }
    };

    if (typeof PointerEvent !== 'undefined') {
      pressProps.onPointerDown = e => {
        // Only handle left clicks, and ignore events that bubbled through portals.
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.
        // Ignore and let the onClick handler take care of it instead.
        // https://bugs.webkit.org/show_bug.cgi?id=222627
        // https://bugs.webkit.org/show_bug.cgi?id=223202

        if ($f6c31cce2adf654f$var$isVirtualPointerEvent(e.nativeEvent)) {
          state.pointerType = 'virtual';
          return;
        } // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on pointer down and handle focusing the pressable element ourselves.


        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        state.pointerType = e.pointerType;
        e.stopPropagation();

        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!isDisabled1 && !preventFocusOnPress) $7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);
          triggerPressStart(e, state.pointerType);
          addGlobalListener(document, 'pointermove', onPointerMove, false);
          addGlobalListener(document, 'pointerup', onPointerUp, false);
          addGlobalListener(document, 'pointercancel', onPointerCancel, false);
        }
      };

      pressProps.onMouseDown = e => {
        if (!e.currentTarget.contains(e.target)) return;

        if (e.button === 0) {
          // Chrome and Firefox on touch Windows devices require mouse down events
          // to be canceled in addition to pointer events, or an extra asynchronous
          // focus event will be fired.
          if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
          e.stopPropagation();
        }
      };

      pressProps.onPointerUp = e => {
        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.
        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return; // Only handle left clicks
        // Safari on iOS sometimes fires pointerup events, even
        // when the touch isn't over the target, so double check.

        if (e.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);
      }; // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.
      // Use pointer move events instead to implement our own hit testing.
      // See https://bugs.webkit.org/show_bug.cgi?id=199803


      let onPointerMove = e => {
        if (e.pointerId !== state.activePointerId) return;

        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };

      let onPointerUp = e => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
          if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          state.isPressed = false;
          state.isOverTarget = false;
          state.activePointerId = null;
          state.pointerType = null;
          removeAllGlobalListeners();
          if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
        }
      };

      let onPointerCancel = e => {
        cancel(e);
      };

      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return; // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.

        cancel(e);
      };
    } else {
      pressProps.onMouseDown = e => {
        // Only handle left clicks
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on mouse down and handle focusing the pressable element ourselves.

        if ($f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        e.stopPropagation();
        if (state.ignoreEmulatedMouseEvents) return;
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = $8a9cb279dc87e130$export$60278871457622de(e.nativeEvent) ? 'virtual' : 'mouse';
        if (!isDisabled1 && !preventFocusOnPress) $7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(document, 'mouseup', onMouseUp, false);
      };

      pressProps.onMouseEnter = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();

        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = true;
          triggerPressStart(e, state.pointerType);
        }
      };

      pressProps.onMouseLeave = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();

        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };

      pressProps.onMouseUp = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);
      };

      let onMouseUp = e => {
        // Only handle left clicks
        if (e.button !== 0) return;
        state.isPressed = false;
        removeAllGlobalListeners();

        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }

        if ($f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isOverTarget = false;
      };

      pressProps.onTouchStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch) return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = 'touch'; // Due to browser inconsistencies, especially on mobile browsers, we prevent default
        // on the emulated mouse event and handle focusing the pressable element ourselves.

        if (!isDisabled1 && !preventFocusOnPress) $7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$16a4697467175487(state.target);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(window, 'scroll', onScroll, true);
      };

      pressProps.onTouchMove = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);

        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(e, state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };

      pressProps.onTouchEnd = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = $f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);

        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          triggerPressUp(e, state.pointerType);
          triggerPressEnd(e, state.pointerType);
        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);

        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
        removeAllGlobalListeners();
      };

      pressProps.onTouchCancel = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed) cancel(e);
      };

      let onScroll = e => {
        if (state.isPressed && e.target.contains(state.target)) cancel({
          currentTarget: state.target,
          shiftKey: false,
          ctrlKey: false,
          metaKey: false,
          altKey: false
        });
      };

      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        cancel(e);
      };
    }

    return pressProps;
  }, [addGlobalListener, isDisabled1, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]); // Remove user-select: none in case component unmounts immediately after pressStart
  // eslint-disable-next-line arrow-body-style

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return () => {
      if (!allowTextSelectionOnPress) $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);
    };
  }, [allowTextSelectionOnPress]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: $3ef42575df84b30b$export$9d1611c77c2fe928(domProps, pressProps1)
  };
}

function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === 'A' && target.hasAttribute('href');
}

function $f6c31cce2adf654f$var$isValidKeyboardEvent(event) {
  const {
    key: key,
    code: code,
    target: target
  } = event;
  const element = target;
  const {
    tagName: tagName,
    isContentEditable: isContentEditable
  } = element;
  const role = element.getAttribute('role'); // Accessibility for keyboards. Space and Enter only.
  // "Spacebar" is for IE 11

  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key
  !(role === 'link' && key !== 'Enter');
}

function $f6c31cce2adf654f$var$getTouchFromEvent(event) {
  const {
    targetTouches: targetTouches
  } = event;
  if (targetTouches.length > 0) return targetTouches[0];
  return null;
}

function $f6c31cce2adf654f$var$getTouchById(event, pointerId) {
  const changedTouches = event.changedTouches;

  for (let i = 0; i < changedTouches.length; i++) {
    const touch = changedTouches[i];
    if (touch.identifier === pointerId) return touch;
  }

  return null;
}

function $f6c31cce2adf654f$var$createEvent(target, e) {
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey
  };
}

function $f6c31cce2adf654f$var$getPointClientRect(point) {
  let offsetX = point.width / 2 || point.radiusX || 0;
  let offsetY = point.height / 2 || point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}

function $f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {
  // check if they cannot overlap on x axis
  if (a.left > b.right || b.left > a.right) return false; // check if they cannot overlap on y axis

  if (a.top > b.bottom || b.top > a.bottom) return false;
  return true;
}

function $f6c31cce2adf654f$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect();
  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);
  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}

function $f6c31cce2adf654f$var$shouldPreventDefault(target) {
  // We cannot prevent default if the target is a draggable element.
  return !target.draggable;
}

function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target) {
  return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && target.type === 'submit');
}

function $f6c31cce2adf654f$var$isVirtualPointerEvent(event) {
  // If the pointer size is zero, then we assume it's from a screen reader.
  // Android TalkBack double tap will sometimes return a event with width and height of 1
  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
  // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0;
}

const $3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children: children,
  ...props
}, ref) => {
  let newRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  ref = ref !== null && ref !== void 0 ? ref : newRef;
  let {
    pressProps: pressProps
  } = $f6c31cce2adf654f$export$45712eceda6fad21({ ...props,
    ref: ref
  });
  let child = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.only(children);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().cloneElement(child, // @ts-ignore
  {
    ref: ref,
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(child.props, pressProps)
  });
});
var $f1ab8c75478c6f73$exports = {};
interactions_dist_module_$parcel$export($f1ab8c75478c6f73$exports, "PressResponder", () => $f1ab8c75478c6f73$export$3351871ee4b288b8);
const $f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children: children,
  ...props
}, ref) => {
  let isRegistered = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(false);
  let prevContext = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($ae1eeba8b9eafd08$export$5165eccb35aaadb5);
  let context = $3ef42575df84b30b$export$9d1611c77c2fe928(prevContext || {}, { ...props,
    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),

    register() {
      isRegistered.current = true;
      if (prevContext) prevContext.register();
    }

  });
  $e7801be82b4b2a53$export$4debdb1a3f0fa79e(prevContext, ref);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!isRegistered.current) console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
  }, []);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {
    value: context
  }, children);
});
var $a1ea59d68270f0dd$exports = {};
interactions_dist_module_$parcel$export($a1ea59d68270f0dd$exports, "useFocus", () => $a1ea59d68270f0dd$export$f8168d8dd8fd66e6);

function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let onBlur;
  if (!props.isDisabled && (props.onBlur || props.onFocusChange)) onBlur = e => {
    if (e.target === e.currentTarget) {
      if (props.onBlur) props.onBlur(e);
      if (props.onFocusChange) props.onFocusChange(false);
      return true;
    }
  };else onBlur = null;
  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
  let onFocus;
  if (!props.isDisabled && (props.onFocus || props.onFocusChange || props.onBlur)) onFocus = e => {
    if (e.target === e.currentTarget) {
      if (props.onFocus) props.onFocus(e);
      if (props.onFocusChange) props.onFocusChange(true);
      onSyntheticFocus(e);
    }
  };
  return {
    focusProps: {
      onFocus: onFocus,
      onBlur: onBlur
    }
  };
}

var $507fabe10e71c6fb$exports = {};
interactions_dist_module_$parcel$export($507fabe10e71c6fb$exports, "isFocusVisible", () => $507fabe10e71c6fb$export$b9b3dfddab17db27);
interactions_dist_module_$parcel$export($507fabe10e71c6fb$exports, "getInteractionModality", () => $507fabe10e71c6fb$export$630ff653c5ada6a9);
interactions_dist_module_$parcel$export($507fabe10e71c6fb$exports, "setInteractionModality", () => $507fabe10e71c6fb$export$8397ddfc504fdb9a);
interactions_dist_module_$parcel$export($507fabe10e71c6fb$exports, "useInteractionModality", () => $507fabe10e71c6fb$export$98e20ec92f614cfe);
interactions_dist_module_$parcel$export($507fabe10e71c6fb$exports, "useFocusVisible", () => $507fabe10e71c6fb$export$ffd9e5021c1fb2d6);
interactions_dist_module_$parcel$export($507fabe10e71c6fb$exports, "useFocusVisibleListener", () => $507fabe10e71c6fb$export$ec71b4b83ac08ec3);
let $507fabe10e71c6fb$var$currentModality = null;
let $507fabe10e71c6fb$var$changeHandlers = new Set();
let $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;
let $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
let $507fabe10e71c6fb$var$hasBlurredWindowRecently = false; // Only Tab or Esc keys will make focus visible on text input elements

const $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};

function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of $507fabe10e71c6fb$var$changeHandlers) handler(modality, e);
}
/**
 * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
 */


function $507fabe10e71c6fb$var$isValidKey(e) {
  // Control and Shift keys trigger when navigating back to the tab with keyboard.
  return !(e.metaKey || !$c87311424ea30a05$export$9ac100e40613ea10() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');
}

function $507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;

  if ($507fabe10e71c6fb$var$isValidKey(e)) {
    $507fabe10e71c6fb$var$currentModality = 'keyboard';
    $507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);
  }
}

function $507fabe10e71c6fb$var$handlePointerEvent(e) {
  $507fabe10e71c6fb$var$currentModality = 'pointer';

  if (e.type === 'mousedown' || e.type === 'pointerdown') {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);
  }
}

function $507fabe10e71c6fb$var$handleClickEvent(e) {
  if ($8a9cb279dc87e130$export$60278871457622de(e)) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$currentModality = 'virtual';
  }
}

function $507fabe10e71c6fb$var$handleFocusEvent(e) {
  // Firefox fires two extra focus events when the user first clicks into an iframe:
  // first on the window, then on the document. We ignore these events so they don't
  // cause keyboard focus rings to appear.
  if (e.target === window || e.target === document) return; // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.

  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    $507fabe10e71c6fb$var$currentModality = 'virtual';
    $507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);
  }

  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}

function $507fabe10e71c6fb$var$handleWindowBlur() {
  // When the window is blurred, reset state. This is necessary when tabbing out of the window,
  // for example, since a subsequent focus event won't be fired.
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
/**
 * Setup global event listeners to control when keyboard focus style should be visible.
 */


function $507fabe10e71c6fb$var$setupGlobalFocusEvents() {
  if (typeof window === 'undefined' || $507fabe10e71c6fb$var$hasSetupGlobalListeners) return; // Programmatic focus() calls shouldn't affect the current input modality.
  // However, we need to detect other cases when a focus event occurs without
  // a preceding user event (e.g. screen reader focus). Overriding the focus
  // method on HTMLElement.prototype is a bit hacky, but works.

  let focus = HTMLElement.prototype.focus;

  HTMLElement.prototype.focus = function () {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };

  document.addEventListener('keydown', $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener('keyup', $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener('click', $507fabe10e71c6fb$var$handleClickEvent, true); // Register focus events on the window so they are sure to happen
  // before React's event listeners (registered on the document).

  window.addEventListener('focus', $507fabe10e71c6fb$var$handleFocusEvent, true);
  window.addEventListener('blur', $507fabe10e71c6fb$var$handleWindowBlur, false);

  if (typeof PointerEvent !== 'undefined') {
    document.addEventListener('pointerdown', $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('pointermove', $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('pointerup', $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else {
    document.addEventListener('mousedown', $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('mousemove', $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('mouseup', $507fabe10e71c6fb$var$handlePointerEvent, true);
  }

  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;
}

if (typeof document !== 'undefined') {
  if (document.readyState !== 'loading') $507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener('DOMContentLoaded', $507fabe10e71c6fb$var$setupGlobalFocusEvents);
}

function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return $507fabe10e71c6fb$var$currentModality !== 'pointer';
}

function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return $507fabe10e71c6fb$var$currentModality;
}

function $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
  $507fabe10e71c6fb$var$currentModality = modality;
  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
}

function $507fabe10e71c6fb$export$98e20ec92f614cfe() {
  $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  let [modality, setModality] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)($507fabe10e71c6fb$var$currentModality);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let handler = () => {
      setModality($507fabe10e71c6fb$var$currentModality);
    };

    $507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      $507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, []);
  return modality;
}
/**
 * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that
 * focus visible style can be properly set.
 */


function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}

function $507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {
  let {
    isTextInput: isTextInput,
    autoFocus: autoFocus
  } = props;
  let [isFocusVisibleState, setFocusVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());
  $507fabe10e71c6fb$export$ec71b4b83ac08ec3($507fabe10e71c6fb$export$b9b3dfddab17db27 => {
    setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);
  }, [isTextInput], {
    isTextInput: isTextInput
  });
  return {
    isFocusVisible: isFocusVisibleState
  };
}

function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
  $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let handler = (modality, e) => {
      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;
      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());
    };

    $507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      $507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, deps);
}

var $9ab94262bd0047c7$exports = {};
interactions_dist_module_$parcel$export($9ab94262bd0047c7$exports, "useFocusWithin", () => $9ab94262bd0047c7$export$420e68273165f4ec);

function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocusWithin: false
  }).current;
  let onBlur = props.isDisabled ? null : e => {
    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again
    // when moving focus inside the element. Only trigger if the currentTarget doesn't
    // include the relatedTarget (where focus is moving).
    if (state.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
      state.isFocusWithin = false;
      if (props.onBlurWithin) props.onBlurWithin(e);
      if (props.onFocusWithinChange) props.onFocusWithinChange(false);
    }
  };
  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
  let onFocus = props.isDisabled ? null : e => {
    if (!state.isFocusWithin) {
      if (props.onFocusWithin) props.onFocusWithin(e);
      if (props.onFocusWithinChange) props.onFocusWithinChange(true);
      state.isFocusWithin = true;
      onSyntheticFocus(e);
    }
  };
  return {
    focusWithinProps: {
      onFocus: onFocus,
      onBlur: onBlur
    }
  };
}

var $6179b936705e76d3$exports = {};
interactions_dist_module_$parcel$export($6179b936705e76d3$exports, "useHover", () => $6179b936705e76d3$export$ae780daf29e6d456); // iOS fires onPointerEnter twice: once with pointerType="touch" and again with pointerType="mouse".
// We want to ignore these emulated events so they do not trigger hover behavior.
// See https://bugs.webkit.org/show_bug.cgi?id=214609.

let $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
let $6179b936705e76d3$var$hoverCount = 0;

function $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true; // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
  // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
  // the distant future because a user previously touched the element.

  setTimeout(() => {
    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
  }, 50);
}

function $6179b936705e76d3$var$handleGlobalPointerEvent(e) {
  if (e.pointerType === 'touch') $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}

function $6179b936705e76d3$var$setupGlobalTouchEvents() {
  if (typeof document === 'undefined') return;
  if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  $6179b936705e76d3$var$hoverCount++;
  return () => {
    $6179b936705e76d3$var$hoverCount--;
    if ($6179b936705e76d3$var$hoverCount > 0) return;
    if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', $6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener('touchend', $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  };
}

function $6179b936705e76d3$export$ae780daf29e6d456(props) {
  let {
    onHoverStart: onHoverStart,
    onHoverChange: onHoverChange,
    onHoverEnd: onHoverEnd,
    isDisabled: isDisabled
  } = props;
  let [isHovered, setHovered] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isHovered: false,
    ignoreEmulatedMouseEvents: false,
    pointerType: '',
    target: null
  }).current;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);
  let {
    hoverProps: hoverProps1,
    triggerHoverEnd: triggerHoverEnd1
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let triggerHoverStart = (event, pointerType) => {
      state.pointerType = pointerType;
      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;
      state.isHovered = true;
      let target = event.currentTarget;
      state.target = target;
      if (onHoverStart) onHoverStart({
        type: 'hoverstart',
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(true);
      setHovered(true);
    };

    let triggerHoverEnd = (event, pointerType) => {
      state.pointerType = '';
      state.target = null;
      if (pointerType === 'touch' || !state.isHovered) return;
      state.isHovered = false;
      let target = event.currentTarget;
      if (onHoverEnd) onHoverEnd({
        type: 'hoverend',
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(false);
      setHovered(false);
    };

    let hoverProps = {};

    if (typeof PointerEvent !== 'undefined') {
      hoverProps.onPointerEnter = e => {
        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;
        triggerHoverStart(e, e.pointerType);
      };

      hoverProps.onPointerLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);
      };
    } else {
      hoverProps.onTouchStart = () => {
        state.ignoreEmulatedMouseEvents = true;
      };

      hoverProps.onMouseEnter = e => {
        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');
        state.ignoreEmulatedMouseEvents = false;
      };

      hoverProps.onMouseLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');
      };
    }

    return {
      hoverProps: hoverProps,
      triggerHoverEnd: triggerHoverEnd
    };
  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    // Call the triggerHoverEnd as soon as isDisabled changes to true
    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering
    if (isDisabled) triggerHoverEnd1({
      currentTarget: state.target
    }, state.pointerType);
  }, [isDisabled]);
  return {
    hoverProps: hoverProps1,
    isHovered: isHovered
  };
}

var $e0b6e0b68ec7f50f$exports = {};
interactions_dist_module_$parcel$export($e0b6e0b68ec7f50f$exports, "useInteractOutside", () => $e0b6e0b68ec7f50f$export$872b660ac5a1ff98);

function $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
  let {
    ref: ref,
    onInteractOutside: onInteractOutside,
    isDisabled: isDisabled,
    onInteractOutsideStart: onInteractOutsideStart
  } = props;
  let stateRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false,
    onInteractOutside: onInteractOutside,
    onInteractOutsideStart: onInteractOutsideStart
  });
  let state = stateRef.current;
  state.onInteractOutside = onInteractOutside;
  state.onInteractOutsideStart = onInteractOutsideStart;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isDisabled) return;

    let onPointerDown = e => {
      if ($e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {
        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);
        state.isPointerDown = true;
      }
    }; // Use pointer events if available. Otherwise, fall back to mouse and touch events.


    if (typeof PointerEvent !== 'undefined') {
      let onPointerUp = e => {
        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      }; // changing these to capture phase fixed combobox


      document.addEventListener('pointerdown', onPointerDown, true);
      document.addEventListener('pointerup', onPointerUp, true);
      return () => {
        document.removeEventListener('pointerdown', onPointerDown, true);
        document.removeEventListener('pointerup', onPointerUp, true);
      };
    } else {
      let onMouseUp = e => {
        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };

      let onTouchEnd = e => {
        state.ignoreEmulatedMouseEvents = true;

        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };

      document.addEventListener('mousedown', onPointerDown, true);
      document.addEventListener('mouseup', onMouseUp, true);
      document.addEventListener('touchstart', onPointerDown, true);
      document.addEventListener('touchend', onTouchEnd, true);
      return () => {
        document.removeEventListener('mousedown', onPointerDown, true);
        document.removeEventListener('mouseup', onMouseUp, true);
        document.removeEventListener('touchstart', onPointerDown, true);
        document.removeEventListener('touchend', onTouchEnd, true);
      };
    }
  }, [ref, state, isDisabled]);
}

function $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
  if (event.button > 0) return false; // if the event target is no longer in the document

  if (event.target) {
    const ownerDocument = event.target.ownerDocument;
    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;
  }

  return ref.current && !ref.current.contains(event.target);
}

var $46d819fcbaf35654$exports = {};
interactions_dist_module_$parcel$export($46d819fcbaf35654$exports, "useKeyboard", () => $46d819fcbaf35654$export$8f71654801c2f7cd);

function $93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler) return;
  let shouldStopPropagation = true;
  return e => {
    let event = { ...e,

      preventDefault() {
        e.preventDefault();
      },

      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },

      stopPropagation() {
        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');
      },

      continuePropagation() {
        shouldStopPropagation = false;
      }

    };
    handler(event);
    if (shouldStopPropagation) e.stopPropagation();
  };
}

function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),
      onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)
    }
  };
}

var $e8a7022cf87cba2a$exports = {};
interactions_dist_module_$parcel$export($e8a7022cf87cba2a$exports, "useMove", () => $e8a7022cf87cba2a$export$36da96379f79f245);

function $e8a7022cf87cba2a$export$36da96379f79f245(props) {
  let {
    onMoveStart: onMoveStart,
    onMove: onMove,
    onMoveEnd: onMoveEnd
  } = props;
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    didMove: false,
    lastPosition: null,
    id: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let moveProps1 = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let moveProps = {};

    let start = () => {
      $14c0b72509d70225$export$16a4697467175487();
      state.current.didMove = false;
    };

    let move = (originalEvent, pointerType, deltaX, deltaY) => {
      if (deltaX === 0 && deltaY === 0) return;

      if (!state.current.didMove) {
        state.current.didMove = true;
        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
          type: 'movestart',
          pointerType: pointerType,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }

      onMove({
        type: 'move',
        pointerType: pointerType,
        deltaX: deltaX,
        deltaY: deltaY,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };

    let end = (originalEvent, pointerType) => {
      $14c0b72509d70225$export$b0d6fa1ab32e3295();
      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
        type: 'moveend',
        pointerType: pointerType,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };

    if (typeof PointerEvent === 'undefined') {
      let onMouseMove = e => {
        if (e.button === 0) {
          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };

      let onMouseUp = e => {
        if (e.button === 0) {
          end(e, 'mouse');
          removeGlobalListener(window, 'mousemove', onMouseMove, false);
          removeGlobalListener(window, 'mouseup', onMouseUp, false);
        }
      };

      moveProps.onMouseDown = e => {
        if (e.button === 0) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          addGlobalListener(window, 'mousemove', onMouseMove, false);
          addGlobalListener(window, 'mouseup', onMouseUp, false);
        }
      };

      let onTouchMove = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);

        if (touch >= 0) {
          let {
            pageX: pageX,
            pageY: pageY
          } = e.changedTouches[touch];
          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: pageX,
            pageY: pageY
          };
        }
      };

      let onTouchEnd = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);

        if (touch >= 0) {
          end(e, 'touch');
          state.current.id = null;
          removeGlobalListener(window, 'touchmove', onTouchMove);
          removeGlobalListener(window, 'touchend', onTouchEnd);
          removeGlobalListener(window, 'touchcancel', onTouchEnd);
        }
      };

      moveProps.onTouchStart = e => {
        if (e.changedTouches.length === 0 || state.current.id != null) return;
        let {
          pageX: pageX,
          pageY: pageY,
          identifier: identifier
        } = e.changedTouches[0];
        start();
        e.stopPropagation();
        e.preventDefault();
        state.current.lastPosition = {
          pageX: pageX,
          pageY: pageY
        };
        state.current.id = identifier;
        addGlobalListener(window, 'touchmove', onTouchMove, false);
        addGlobalListener(window, 'touchend', onTouchEnd, false);
        addGlobalListener(window, 'touchcancel', onTouchEnd, false);
      };
    } else {
      let onPointerMove = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || 'mouse'; // Problems with PointerEvent#movementX/movementY:
          // 1. it is always 0 on macOS Safari.
          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS

          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };

      let onPointerUp = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || 'mouse';
          end(e, pointerType);
          state.current.id = null;
          removeGlobalListener(window, 'pointermove', onPointerMove, false);
          removeGlobalListener(window, 'pointerup', onPointerUp, false);
          removeGlobalListener(window, 'pointercancel', onPointerUp, false);
        }
      };

      moveProps.onPointerDown = e => {
        if (e.button === 0 && state.current.id == null) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          state.current.id = e.pointerId;
          addGlobalListener(window, 'pointermove', onPointerMove, false);
          addGlobalListener(window, 'pointerup', onPointerUp, false);
          addGlobalListener(window, 'pointercancel', onPointerUp, false);
        }
      };
    }

    let triggerKeyboardMove = (e, deltaX, deltaY) => {
      start();
      move(e, 'keyboard', deltaX, deltaY);
      end(e, 'keyboard');
    };

    moveProps.onKeyDown = e => {
      switch (e.key) {
        case 'Left':
        case 'ArrowLeft':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, -1, 0);
          break;

        case 'Right':
        case 'ArrowRight':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 1, 0);
          break;

        case 'Up':
        case 'ArrowUp':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, -1);
          break;

        case 'Down':
        case 'ArrowDown':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, 1);
          break;
      }
    };

    return moveProps;
  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);
  return {
    moveProps: moveProps1
  };
}

var $7d0a636d7a4dcefd$exports = {};
interactions_dist_module_$parcel$export($7d0a636d7a4dcefd$exports, "useScrollWheel", () => $7d0a636d7a4dcefd$export$2123ff2b87c81ca);

function $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {
  let {
    onScroll: onScroll,
    isDisabled: isDisabled
  } = props;
  let onScrollHandler = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    // If the ctrlKey is pressed, this is a zoom event, do nothing.
    if (e.ctrlKey) return; // stop scrolling the page

    e.preventDefault();
    e.stopPropagation();
    if (onScroll) onScroll({
      deltaX: e.deltaX,
      deltaY: e.deltaY
    });
  }, [onScroll]);
  $e9faafb641e167db$export$90fc3a17d93f704c(ref, 'wheel', isDisabled ? null : onScrollHandler);
}

var $8a26561d2877236e$exports = {};
interactions_dist_module_$parcel$export($8a26561d2877236e$exports, "useLongPress", () => $8a26561d2877236e$export$c24ed0104d07eab9);
const $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;

function $8a26561d2877236e$export$c24ed0104d07eab9(props) {
  let {
    isDisabled: isDisabled,
    onLongPressStart: onLongPressStart,
    onLongPressEnd: onLongPressEnd,
    onLongPress: onLongPress,
    threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD,
    accessibilityDescription: accessibilityDescription
  } = props;
  const timeRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let {
    pressProps: pressProps
  } = $f6c31cce2adf654f$export$45712eceda6fad21({
    isDisabled: isDisabled,

    onPressStart(e1) {
      if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {
        if (onLongPressStart) onLongPressStart({ ...e1,
          type: 'longpressstart'
        });
        timeRef.current = setTimeout(() => {
          // Prevent other usePress handlers from also handling this event.
          e1.target.dispatchEvent(new PointerEvent('pointercancel', {
            bubbles: true
          }));
          if (onLongPress) onLongPress({ ...e1,
            type: 'longpress'
          });
          timeRef.current = null;
        }, threshold); // Prevent context menu, which may be opened on long press on touch devices

        if (e1.pointerType === 'touch') {
          let onContextMenu = e => {
            e.preventDefault();
          };

          addGlobalListener(e1.target, 'contextmenu', onContextMenu, {
            once: true
          });
          addGlobalListener(window, 'pointerup', () => {
            // If no contextmenu event is fired quickly after pointerup, remove the handler
            // so future context menu events outside a long press are not prevented.
            setTimeout(() => {
              removeGlobalListener(e1.target, 'contextmenu', onContextMenu);
            }, 30);
          }, {
            once: true
          });
        }
      }
    },

    onPressEnd(e) {
      if (timeRef.current) clearTimeout(timeRef.current);
      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({ ...e,
        type: 'longpressend'
      });
    }

  });
  let descriptionProps = $ef06256079686ba0$export$f8aeda7b10753fa1(onLongPress && !isDisabled ? accessibilityDescription : null);
  return {
    longPressProps: $3ef42575df84b30b$export$9d1611c77c2fe928(pressProps, descriptionProps)
  };
}


;// CONCATENATED MODULE: ./node_modules/@react-aria/focus/dist/module.js





function focus_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $0238e4b796d1715f$exports = {};
focus_dist_module_$parcel$export($0238e4b796d1715f$exports, "FocusScope", () => $0238e4b796d1715f$export$20e40289641fbbb6);
focus_dist_module_$parcel$export($0238e4b796d1715f$exports, "useFocusManager", () => $0238e4b796d1715f$export$10c5169755ce7bd7);
focus_dist_module_$parcel$export($0238e4b796d1715f$exports, "getFocusableTreeWalker", () => $0238e4b796d1715f$export$2d6ec8fc375ceafa);
focus_dist_module_$parcel$export($0238e4b796d1715f$exports, "createFocusManager", () => $0238e4b796d1715f$export$c5251b9e124bf29);
var $f2c1256fdcfd2c09$exports = {};
focus_dist_module_$parcel$export($f2c1256fdcfd2c09$exports, "focusSafely", () => $f2c1256fdcfd2c09$export$80f3e147d781571c);

function $f2c1256fdcfd2c09$export$80f3e147d781571c(element) {
  // If the user is interacting with a virtual cursor, e.g. screen reader, then
  // wait until after any animated transitions that are currently occurring on
  // the page before shifting focus. This avoids issues with VoiceOver on iOS
  // causing the page to scroll when moving focus if the element is transitioning
  // from off the screen.
  if ($507fabe10e71c6fb$export$630ff653c5ada6a9() === 'virtual') {
    let lastFocusedElement = document.activeElement;
    $bbed8b41f857bcc0$export$24490316f764c430(() => {
      // If focus did not move and the element is still in the document, focus it.
      if (document.activeElement === lastFocusedElement && document.contains(element)) $7215afc6de606d6b$export$de79e2c695e052f3(element);
    });
  } else $7215afc6de606d6b$export$de79e2c695e052f3(element);
}
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */


function $c5775c2d6be42e6d$var$isStyleVisible(element) {
  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;
  let {
    display: display,
    visibility: visibility
  } = element.style;
  let isVisible = display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse';

  if (isVisible) {
    const {
      getComputedStyle: getComputedStyle
    } = element.ownerDocument.defaultView;
    let {
      display: computedDisplay,
      visibility: computedVisibility
    } = getComputedStyle(element);
    isVisible = computedDisplay !== 'none' && computedVisibility !== 'hidden' && computedVisibility !== 'collapse';
  }

  return isVisible;
}

function $c5775c2d6be42e6d$var$isAttributeVisible(element, childElement) {
  return !element.hasAttribute('hidden') && (element.nodeName === 'DETAILS' && childElement && childElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true);
}

function $c5775c2d6be42e6d$export$e989c0fffaa6b27a(element, childElement) {
  return element.nodeName !== '#comment' && $c5775c2d6be42e6d$var$isStyleVisible(element) && $c5775c2d6be42e6d$var$isAttributeVisible(element, childElement) && (!element.parentElement || $c5775c2d6be42e6d$export$e989c0fffaa6b27a(element.parentElement, element));
}

const $0238e4b796d1715f$var$FocusContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);
let $0238e4b796d1715f$var$activeScope = null;
let $0238e4b796d1715f$var$scopes = new Map();

function $0238e4b796d1715f$export$20e40289641fbbb6(props) {
  let {
    children: children,
    contain: contain,
    restoreFocus: restoreFocus,
    autoFocus: autoFocus
  } = props;
  let startRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  let endRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  let scopeRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)([]);
  let ctx = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($0238e4b796d1715f$var$FocusContext);
  let parentScope = ctx?.scopeRef;
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    // Find all rendered nodes between the sentinels and add them to the scope.
    let node = startRef.current.nextSibling;
    let nodes = [];

    while (node && node !== endRef.current) {
      nodes.push(node);
      node = node.nextSibling;
    }

    scopeRef.current = nodes;
  }, [children, parentScope]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    $0238e4b796d1715f$var$scopes.set(scopeRef, parentScope);
    return () => {
      // Restore the active scope on unmount if this scope or a descendant scope is active.
      // Parent effect cleanups run before children, so we need to check if the
      // parent scope actually still exists before restoring the active scope to it.
      if ((scopeRef === $0238e4b796d1715f$var$activeScope || $0238e4b796d1715f$var$isAncestorScope(scopeRef, $0238e4b796d1715f$var$activeScope)) && (!parentScope || $0238e4b796d1715f$var$scopes.has(parentScope))) $0238e4b796d1715f$var$activeScope = parentScope;
      $0238e4b796d1715f$var$scopes.delete(scopeRef);
    };
  }, [scopeRef, parentScope]);
  $0238e4b796d1715f$var$useFocusContainment(scopeRef, contain);
  $0238e4b796d1715f$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $0238e4b796d1715f$var$useAutoFocus(scopeRef, autoFocus);
  let focusManager = $0238e4b796d1715f$var$createFocusManagerForScope(scopeRef);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($0238e4b796d1715f$var$FocusContext.Provider, {
    value: {
      scopeRef: scopeRef,
      focusManager: focusManager
    }
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}

function $0238e4b796d1715f$export$10c5169755ce7bd7() {
  return (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($0238e4b796d1715f$var$FocusContext)?.focusManager;
}

function $0238e4b796d1715f$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap
      } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[0].previousElementSibling;
      let walker = $0238e4b796d1715f$export$2d6ec8fc375ceafa($0238e4b796d1715f$var$getScopeRoot(scope), {
        tabbable: tabbable
      }, scope);
      walker.currentNode = $0238e4b796d1715f$var$isElementInScope(node, scope) ? node : sentinel;
      let nextNode = walker.nextNode();

      if (!nextNode && wrap) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }

      if (nextNode) $0238e4b796d1715f$var$focusElement(nextNode, true);
      return nextNode;
    },

    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap
      } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let walker = $0238e4b796d1715f$export$2d6ec8fc375ceafa($0238e4b796d1715f$var$getScopeRoot(scope), {
        tabbable: tabbable
      }, scope);
      walker.currentNode = $0238e4b796d1715f$var$isElementInScope(node, scope) ? node : sentinel;
      let previousNode = walker.previousNode();

      if (!previousNode && wrap) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }

      if (previousNode) $0238e4b796d1715f$var$focusElement(previousNode, true);
      return previousNode;
    },

    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let {
        tabbable: tabbable
      } = opts;
      let walker = $0238e4b796d1715f$export$2d6ec8fc375ceafa($0238e4b796d1715f$var$getScopeRoot(scope), {
        tabbable: tabbable
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode) $0238e4b796d1715f$var$focusElement(nextNode, true);
      return nextNode;
    },

    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let {
        tabbable: tabbable
      } = opts;
      let walker = $0238e4b796d1715f$export$2d6ec8fc375ceafa($0238e4b796d1715f$var$getScopeRoot(scope), {
        tabbable: tabbable
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode) $0238e4b796d1715f$var$focusElement(previousNode, true);
      return previousNode;
    }

  };
}

const $0238e4b796d1715f$var$focusableElements = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];
const $0238e4b796d1715f$var$FOCUSABLE_ELEMENT_SELECTOR = $0238e4b796d1715f$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';
$0238e4b796d1715f$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
const $0238e4b796d1715f$var$TABBABLE_ELEMENT_SELECTOR = $0238e4b796d1715f$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');

function $0238e4b796d1715f$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}

function $0238e4b796d1715f$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  let raf = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let scope1 = scopeRef.current;
    if (!contain) return; // Handle the Tab key to contain focus within the scope

    let onKeyDown = e => {
      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || scopeRef !== $0238e4b796d1715f$var$activeScope) return;
      let focusedElement = document.activeElement;
      let scope = scopeRef.current;
      if (!$0238e4b796d1715f$var$isElementInScope(focusedElement, scope)) return;
      let walker = $0238e4b796d1715f$export$2d6ec8fc375ceafa($0238e4b796d1715f$var$getScopeRoot(scope), {
        tabbable: true
      }, scope);
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();

      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }

      e.preventDefault();
      if (nextElement) $0238e4b796d1715f$var$focusElement(nextElement, true);
    };

    let onFocus = e => {
      // If focusing an element in a child scope of the currently active scope, the child becomes active.
      // Moving out of the active scope to an ancestor is not allowed.
      if (!$0238e4b796d1715f$var$activeScope || $0238e4b796d1715f$var$isAncestorScope($0238e4b796d1715f$var$activeScope, scopeRef)) {
        $0238e4b796d1715f$var$activeScope = scopeRef;
        focusedNode.current = e.target;
      } else if (scopeRef === $0238e4b796d1715f$var$activeScope && !$0238e4b796d1715f$var$isElementInChildScope(e.target, scopeRef)) {
        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),
        // restore focus to the previously focused node or the first tabbable element in the active scope.
        if (focusedNode.current) focusedNode.current.focus();else if ($0238e4b796d1715f$var$activeScope) $0238e4b796d1715f$var$focusFirstInScope($0238e4b796d1715f$var$activeScope.current);
      } else if (scopeRef === $0238e4b796d1715f$var$activeScope) focusedNode.current = e.target;
    };

    let onBlur = e => {
      // Firefox doesn't shift focus back to the Dialog properly without this
      raf.current = requestAnimationFrame(() => {
        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe
        if (scopeRef === $0238e4b796d1715f$var$activeScope && !$0238e4b796d1715f$var$isElementInChildScope(document.activeElement, scopeRef)) {
          $0238e4b796d1715f$var$activeScope = scopeRef;
          focusedNode.current = e.target;
          focusedNode.current.focus();
        }
      });
    };

    document.addEventListener('keydown', onKeyDown, false);
    document.addEventListener('focusin', onFocus, false);
    scope1.forEach(element => element.addEventListener('focusin', onFocus, false));
    scope1.forEach(element => element.addEventListener('focusout', onBlur, false));
    return () => {
      document.removeEventListener('keydown', onKeyDown, false);
      document.removeEventListener('focusin', onFocus, false);
      scope1.forEach(element => element.removeEventListener('focusin', onFocus, false));
      scope1.forEach(element => element.removeEventListener('focusout', onBlur, false));
    };
  }, [scopeRef, contain]); // eslint-disable-next-line arrow-body-style

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return () => cancelAnimationFrame(raf.current);
  }, [raf]);
}

function $0238e4b796d1715f$var$isElementInAnyScope(element) {
  for (let scope of $0238e4b796d1715f$var$scopes.keys()) {
    if ($0238e4b796d1715f$var$isElementInScope(element, scope.current)) return true;
  }

  return false;
}

function $0238e4b796d1715f$var$isElementInScope(element, scope) {
  return scope.some(node => node.contains(element));
}

function $0238e4b796d1715f$var$isElementInChildScope(element, scope) {
  // node.contains in isElementInScope covers child scopes that are also DOM children,
  // but does not cover child scopes in portals.
  for (let s of $0238e4b796d1715f$var$scopes.keys()) {
    if ((s === scope || $0238e4b796d1715f$var$isAncestorScope(scope, s)) && $0238e4b796d1715f$var$isElementInScope(element, s.current)) return true;
  }

  return false;
}

function $0238e4b796d1715f$var$isAncestorScope(ancestor, scope) {
  let parent = $0238e4b796d1715f$var$scopes.get(scope);
  if (!parent) return false;
  if (parent === ancestor) return true;
  return $0238e4b796d1715f$var$isAncestorScope(ancestor, parent);
}

function $0238e4b796d1715f$var$focusElement(element, scroll = false) {
  if (element != null && !scroll) try {
    $f2c1256fdcfd2c09$export$80f3e147d781571c(element);
  } catch (err) {// ignore
  } else if (element != null) try {
    element.focus();
  } catch (err1) {// ignore
  }
}

function $0238e4b796d1715f$var$focusFirstInScope(scope) {
  let sentinel = scope[0].previousElementSibling;
  let walker = $0238e4b796d1715f$export$2d6ec8fc375ceafa($0238e4b796d1715f$var$getScopeRoot(scope), {
    tabbable: true
  }, scope);
  walker.currentNode = sentinel;
  $0238e4b796d1715f$var$focusElement(walker.nextNode());
}

function $0238e4b796d1715f$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useRef(autoFocus);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (autoFocusRef.current) {
      $0238e4b796d1715f$var$activeScope = scopeRef;
      if (!$0238e4b796d1715f$var$isElementInScope(document.activeElement, $0238e4b796d1715f$var$activeScope.current)) $0238e4b796d1715f$var$focusFirstInScope(scopeRef.current);
    }

    autoFocusRef.current = false;
  }, []);
}

function $0238e4b796d1715f$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.
  const nodeToRestoreRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(typeof document !== 'undefined' ? document.activeElement : null); // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.

  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let nodeToRestore = nodeToRestoreRef.current;
    if (!restoreFocus) return; // Handle the Tab key so that tabbing out of the scope goes to the next element
    // after the node that had focus when the scope mounted. This is important when
    // using portals for overlays, so that focus goes to the expected element when
    // tabbing out of the overlay.

    let onKeyDown = e => {
      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) return;
      let focusedElement = document.activeElement;
      if (!$0238e4b796d1715f$var$isElementInScope(focusedElement, scopeRef.current)) return; // Create a DOM tree walker that matches all tabbable elements

      let walker = $0238e4b796d1715f$export$2d6ec8fc375ceafa(document.body, {
        tabbable: true
      }); // Find the next tabbable element after the currently focused element

      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) nodeToRestore = null; // If there is no next element, or it is outside the current scope, move focus to the
      // next element after the node to restore to instead.

      if ((!nextElement || !$0238e4b796d1715f$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
        walker.currentNode = nodeToRestore; // Skip over elements within the scope, in case the scope immediately follows the node to restore.

        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($0238e4b796d1715f$var$isElementInScope(nextElement, scopeRef.current));

        e.preventDefault();
        e.stopPropagation();
        if (nextElement) $0238e4b796d1715f$var$focusElement(nextElement, true);else // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)
          // then move focus to the body.
          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)
          if (!$0238e4b796d1715f$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $0238e4b796d1715f$var$focusElement(nodeToRestore, true);
      }
    };

    if (!contain) document.addEventListener('keydown', onKeyDown, true);
    return () => {
      if (!contain) document.removeEventListener('keydown', onKeyDown, true);
      if (restoreFocus && nodeToRestore && $0238e4b796d1715f$var$isElementInScope(document.activeElement, scopeRef.current)) requestAnimationFrame(() => {
        if (document.body.contains(nodeToRestore)) $0238e4b796d1715f$var$focusElement(nodeToRestore);
      });
    };
  }, [scopeRef, restoreFocus, contain]);
}

function $0238e4b796d1715f$export$2d6ec8fc375ceafa(root, opts, scope) {
  let selector = opts?.tabbable ? $0238e4b796d1715f$var$TABBABLE_ELEMENT_SELECTOR : $0238e4b796d1715f$var$FOCUSABLE_ELEMENT_SELECTOR;
  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      // Skip nodes inside the starting node.
      if (opts?.from?.contains(node)) return NodeFilter.FILTER_REJECT;
      if (node.matches(selector) && $c5775c2d6be42e6d$export$e989c0fffaa6b27a(node) && (!scope || $0238e4b796d1715f$var$isElementInScope(node, scope))) return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }

  });
  if (opts?.from) walker.currentNode = opts.from;
  return walker;
}

function $0238e4b796d1715f$export$c5251b9e124bf29(ref) {
  return {
    focusNext(opts = {}) {
      let root = ref.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap
      } = opts;
      let node = from || document.activeElement;
      let walker = $0238e4b796d1715f$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable
      });
      if (root.contains(node)) walker.currentNode = node;
      let nextNode = walker.nextNode();

      if (!nextNode && wrap) {
        walker.currentNode = root;
        nextNode = walker.nextNode();
      }

      if (nextNode) $0238e4b796d1715f$var$focusElement(nextNode, true);
      return nextNode;
    },

    focusPrevious(opts = {}) {
      let root = ref.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap
      } = opts;
      let node = from || document.activeElement;
      let walker = $0238e4b796d1715f$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable
      });
      if (root.contains(node)) walker.currentNode = node;else {
        let next = $0238e4b796d1715f$var$last(walker);
        if (next) $0238e4b796d1715f$var$focusElement(next, true);
        return next;
      }
      let previousNode = walker.previousNode();

      if (!previousNode && wrap) {
        walker.currentNode = root;
        previousNode = $0238e4b796d1715f$var$last(walker);
      }

      if (previousNode) $0238e4b796d1715f$var$focusElement(previousNode, true);
      return previousNode;
    },

    focusFirst(opts = {}) {
      let root = ref.current;
      let {
        tabbable: tabbable
      } = opts;
      let walker = $0238e4b796d1715f$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable
      });
      let nextNode = walker.nextNode();
      if (nextNode) $0238e4b796d1715f$var$focusElement(nextNode, true);
      return nextNode;
    },

    focusLast(opts = {}) {
      let root = ref.current;
      let {
        tabbable: tabbable
      } = opts;
      let walker = $0238e4b796d1715f$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable
      });
      let next = $0238e4b796d1715f$var$last(walker);
      if (next) $0238e4b796d1715f$var$focusElement(next, true);
      return next;
    }

  };
}

function $0238e4b796d1715f$var$last(walker) {
  let next;
  let last;

  do {
    last = walker.lastChild();
    if (last) next = last;
  } while (last);

  return next;
}

var $db88f84346fe3322$exports = {};
focus_dist_module_$parcel$export($db88f84346fe3322$exports, "FocusRing", () => $db88f84346fe3322$export$1a38b4ad7f578e1d);
var $e974583017b16a4e$exports = {};
focus_dist_module_$parcel$export($e974583017b16a4e$exports, "useFocusRing", () => $e974583017b16a4e$export$4e328f61c538687f);

function $e974583017b16a4e$export$4e328f61c538687f(props = {}) {
  let {
    autoFocus = false,
    isTextInput: isTextInput,
    within: within
  } = props;
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocused: false,
    isFocusVisible: autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27()
  }).current;
  let [isFocused1, setFocused] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let [isFocusVisibleState, setFocusVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(() => state.isFocused && state.isFocusVisible);

  let updateState = () => setFocusVisible(state.isFocused && state.isFocusVisible);

  let onFocusChange = isFocused => {
    state.isFocused = isFocused;
    setFocused(isFocused);
    updateState();
  };

  $507fabe10e71c6fb$export$ec71b4b83ac08ec3(isFocusVisible => {
    state.isFocusVisible = isFocusVisible;
    updateState();
  }, [], {
    isTextInput: isTextInput
  });
  let {
    focusProps: focusProps
  } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    isDisabled: within,
    onFocusChange: onFocusChange
  });
  let {
    focusWithinProps: focusWithinProps
  } = $9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled: !within,
    onFocusWithinChange: onFocusChange
  });
  return {
    isFocused: isFocused1,
    isFocusVisible: state.isFocused && isFocusVisibleState,
    focusProps: within ? focusWithinProps : focusProps
  };
}

function $db88f84346fe3322$export$1a38b4ad7f578e1d(props) {
  let {
    children: children,
    focusClass: focusClass,
    focusRingClass: focusRingClass
  } = props;
  let {
    isFocused: isFocused,
    isFocusVisible: isFocusVisible,
    focusProps: focusProps
  } = $e974583017b16a4e$export$4e328f61c538687f(props);
  let child = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.only(children);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().cloneElement(child, $3ef42575df84b30b$export$9d1611c77c2fe928(child.props, { ...focusProps,
    className: clsx_m({
      [focusClass || '']: isFocused,
      [focusRingClass || '']: isFocusVisible
    })
  }));
}

var $e82d8245213b3ebf$exports = {};
focus_dist_module_$parcel$export($e82d8245213b3ebf$exports, "FocusableProvider", () => $e82d8245213b3ebf$export$13f3202a3e5ddd5);
focus_dist_module_$parcel$export($e82d8245213b3ebf$exports, "useFocusable", () => $e82d8245213b3ebf$export$4c014de7c8940b4c);
let $e82d8245213b3ebf$var$FocusableContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);

function $e82d8245213b3ebf$var$useFocusableContext(ref) {
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($e82d8245213b3ebf$var$FocusableContext) || {};
  $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref); // eslint-disable-next-line

  let {
    ref: _,
    ...otherProps
  } = context;
  return otherProps;
}
/**
 * Provides DOM props to the nearest focusable child.
 */


function $e82d8245213b3ebf$var$FocusableProvider(props, ref) {
  let {
    children: children,
    ...otherProps
  } = props;
  let context = { ...otherProps,
    ref: ref
  };
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($e82d8245213b3ebf$var$FocusableContext.Provider, {
    value: context
  }, children);
}

let $e82d8245213b3ebf$export$13f3202a3e5ddd5 = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef($e82d8245213b3ebf$var$FocusableProvider);

function $e82d8245213b3ebf$export$4c014de7c8940b4c(props, domRef) {
  let {
    focusProps: focusProps
  } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props);
  let {
    keyboardProps: keyboardProps
  } = $46d819fcbaf35654$export$8f71654801c2f7cd(props);
  let interactions = $3ef42575df84b30b$export$9d1611c77c2fe928(focusProps, keyboardProps);
  let domProps = $e82d8245213b3ebf$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(props.autoFocus);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (autoFocusRef.current && domRef.current) domRef.current.focus();
    autoFocusRef.current = false;
  }, []);
  return {
    focusableProps: $3ef42575df84b30b$export$9d1611c77c2fe928({ ...interactions,
      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined
    }, interactionProps)
  };
}


;// CONCATENATED MODULE: ./src/utils/drip.tsx
var drip_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/utils/drip.tsx";





const drip_defaultProps = {
  visible: false,
  x: 0,
  y: 0,
  className: ''
};
const expand = keyframes({
  '0%': {
    opacity: 0,
    transform: 'scale(0.25)'
  },
  '30%': {
    opacity: 1
  },
  '80%': {
    opacity: 0.5
  },
  '100%': {
    transform: 'scale(28)',
    opacity: 0
  }
});
const StyledDrip = styled('div', {
  position: 'absolute',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0,
  '& svg': {
    position: 'absolute',
    animation: `350ms linear ${expand}`,
    animationFillMode: 'forwards',
    width: '$md',
    height: '$md'
  }
});

const Drip = ({
  visible,
  x,
  y,
  color,
  onCompleted,
  className,
  ...props
}) => {
  const dripRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const top = Number.isNaN(+y) ? 0 : y - 10;
  const left = Number.isNaN(+x) ? 0 : x - 10;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!dripRef.current) return;
    dripRef.current.addEventListener('animationend', onCompleted);
    return () => {
      if (!dripRef.current) return;
      dripRef.current.removeEventListener('animationend', onCompleted);
    };
  });
  if (!visible) return null;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDrip, {
    ref: dripRef,
    className: clsx('nextui-drip', className),
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
      width: "20",
      height: "20",
      viewBox: "0 0 20 20",
      style: {
        top,
        left
      },
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("g", {
        stroke: "none",
        strokeWidth: "1",
        fill: "none",
        fillRule: "evenodd",
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("g", {
          className: "nextui-drip-filler",
          fill: color,
          children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("rect", {
            width: "100%",
            height: "100%",
            rx: "10"
          }, void 0, false, {
            fileName: drip_jsxFileName,
            lineNumber: 91,
            columnNumber: 13
          }, undefined)
        }, void 0, false, {
          fileName: drip_jsxFileName,
          lineNumber: 90,
          columnNumber: 11
        }, undefined)
      }, void 0, false, {
        fileName: drip_jsxFileName,
        lineNumber: 89,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: drip_jsxFileName,
      lineNumber: 88,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: drip_jsxFileName,
    lineNumber: 83,
    columnNumber: 5
  }, undefined);
};

const MemoDrip = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Drip);
/* harmony default export */ const drip = (with_defaults(MemoDrip, drip_defaultProps));
;// CONCATENATED MODULE: ./src/button/utils.tsx
const filterPropsWithGroup = (props, config) => {
  var _config$bordered, _config$borderWeight, _config$ghost, _config$ripple, _config$flat, _config$animated, _config$rounded, _config$light, _config$size, _config$color, _config$disabled;

  if (!config.isButtonGroup) return props;
  return { ...props,
    auto: true,
    shadow: false,
    bordered: (_config$bordered = config.bordered) != null ? _config$bordered : props.bordered,
    borderWeight: (_config$borderWeight = config.borderWeight) != null ? _config$borderWeight : props.borderWeight,
    ghost: (_config$ghost = config.ghost) != null ? _config$ghost : props.ghost,
    ripple: (_config$ripple = config.ripple) != null ? _config$ripple : props.ripple,
    flat: (_config$flat = config.flat) != null ? _config$flat : props.flat,
    animated: (_config$animated = config.animated) != null ? _config$animated : props.animated,
    rounded: (_config$rounded = config.rounded) != null ? _config$rounded : props.rounded,
    light: (_config$light = config.light) != null ? _config$light : props.light,
    size: (_config$size = config.size) != null ? _config$size : props.size,
    color: (_config$color = config.color) != null ? _config$color : props.color,
    disabled: (_config$disabled = config.disabled) != null ? _config$disabled : props.disabled
  };
};
;// CONCATENATED MODULE: ./src/button/button-group-context.ts

const button_group_context_defaultContext = {
  isButtonGroup: false,
  disabled: false
};
const ButtonGroupContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(button_group_context_defaultContext);
const useButtonGroupContext = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(ButtonGroupContext);
;// CONCATENATED MODULE: ./src/button/button-icon.tsx
var button_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/button/button-icon.tsx";





const button_icon_defaultProps = {
  className: ''
};
const StyledButtonIcon = styled('span', {
  dflex: 'center',
  position: 'absolute',
  left: '$$buttonPadding',
  right: 'auto',
  top: '50%',
  transform: 'translateY(-50%)',
  color: 'inherit',
  zIndex: '$1',
  '& svg': {
    background: 'transparent'
  },
  variants: {
    isAuto: {
      true: {
        position: 'relative',
        transform: 'none',
        top: '0%'
      }
    },
    isRight: {
      true: {
        right: '$$buttonPadding',
        left: 'auto'
      }
    },
    isSingle: {
      true: {
        position: 'static',
        transform: 'none',
        m: 0
      }
    }
  },
  compoundVariants: [// isAuto && isRight
  {
    isAuto: true,
    isRight: true,
    css: {
      order: 2,
      ml: '$$buttonPadding',
      right: '0%',
      left: '0%'
    }
  }, // isAuto && !isRight
  {
    isAuto: true,
    isRight: false,
    css: {
      order: 0,
      mr: '$$buttonPadding',
      right: '0%',
      left: '0%'
    }
  }, // isAuto && isSingle
  {
    isAuto: true,
    isSingle: true,
    css: {
      m: 0
    }
  }]
});

const ButtonIcon = ({
  children,
  className,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledButtonIcon, {
    className: clsx('nextui-button-icon', className),
    ...props,
    children: children
  }, void 0, false, {
    fileName: button_icon_jsxFileName,
    lineNumber: 94,
    columnNumber: 5
  }, undefined);
};

ButtonIcon.toString = () => '.nextui-button-icon';

const MemoButtonIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ButtonIcon);
/* harmony default export */ const button_icon = (with_defaults(MemoButtonIcon, button_icon_defaultProps));
;// CONCATENATED MODULE: ./src/use-drip/use-drip.ts


const useDrip = (initialValue = false, ref) => {
  const [dripVisible, setDripVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialValue);
  const [dripX, setDripX] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(0);
  const [dripY, setDripY] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(0);

  const dripCompletedHandle = () => {
    setDripVisible(false);
    setDripX(0);
    setDripY(0);
  };

  const clickHandler = event => {
    if (!ref.current) return;
    const rect = ref.current.getBoundingClientRect();
    setDripVisible(true);
    setDripX(event.clientX - rect.left);
    setDripY(event.clientY - rect.top);
  };

  return {
    visible: dripVisible,
    x: dripX,
    y: dripY,
    onClick: clickHandler,
    onCompleted: dripCompletedHandle
  };
};

/* harmony default export */ const use_drip = (useDrip);
;// CONCATENATED MODULE: ./src/use-drip/index.ts

/* harmony default export */ const src_use_drip = (use_drip);
;// CONCATENATED MODULE: ./src/button/button.styles.ts


const StyledButton = styled('button', {
  dflex: 'center',
  appearance: 'none',
  boxSizing: ' border-box',
  fontWeight: '$medium',
  us: 'none',
  lineHeight: '$sm',
  ta: 'center',
  whiteSpace: 'nowrap',
  transition: '$default',
  position: 'relative',
  overflow: 'hidden',
  border: 'none',
  cursor: 'pointer',
  pe: 'auto',
  p: 0,
  '&:hover': {
    opacity: 0.85
  },
  '@motion': {
    transition: 'none'
  },
  '.nextui-button-text': {
    dflex: 'center',
    zIndex: '$2',
    'p, pre, div': {
      margin: 0
    }
  },
  [`& ${StyledDrip}`]: {
    zIndex: '$1',
    '.nextui-drip-filler': {
      opacity: 0.25,
      fill: '$accents2'
    }
  },
  variants: {
    bordered: {
      true: {
        bg: 'transparent',
        borderStyle: 'solid',
        color: '$text'
      }
    },
    ghost: {
      true: {
        '&:hover': {
          color: '$white'
        }
      }
    },
    color: {
      default: {
        bg: '$primary',
        color: '$white'
      },
      primary: {
        bg: '$primary',
        color: '$white'
      },
      secondary: {
        bg: '$secondary',
        color: '$white'
      },
      success: {
        bg: '$success',
        color: '$white'
      },
      warning: {
        bg: '$warning',
        color: '$white'
      },
      error: {
        bg: '$error',
        color: '$white'
      },
      gradient: {
        bg: '$gradient',
        color: '$white'
      }
    },
    size: {
      xs: {
        $$buttonPadding: '$space$3',
        px: '$3',
        height: '$10',
        lh: '$space$10',
        width: 'auto',
        minWidth: '$20',
        fontSize: '$tiny',
        br: '$xs'
      },
      sm: {
        $$buttonPadding: '$space$5',
        px: '$5',
        height: '$12',
        lh: '$space$14',
        width: 'auto',
        minWidth: '$36',
        fontSize: '$xs',
        br: '$sm'
      },
      md: {
        $$buttonPadding: '$space$7',
        px: '$7',
        height: '$14',
        lh: '$space$14',
        width: 'auto',
        minWidth: '$48',
        fontSize: '$xs',
        br: '$md'
      },
      lg: {
        $$buttonPadding: '$space$9',
        px: '$9',
        height: '$15',
        lh: '$space$15',
        width: 'auto',
        minWidth: '$60',
        fontSize: '$base',
        br: '$base'
      },
      xl: {
        $$buttonPadding: '$space$10',
        px: '$10',
        height: '$17',
        lh: '$space$17',
        width: 'auto',
        minWidth: '$72',
        fontSize: '$sm',
        br: '$xl'
      }
    },
    borderWeight: {
      light: {
        bw: '$light'
      },
      normal: {
        bw: '$normal'
      },
      bold: {
        bw: '$bold'
      },
      extrabold: {
        bw: '$extrabold'
      },
      black: {
        bw: '$black'
      }
    },
    flat: {
      true: {
        color: '$text'
      }
    },
    light: {
      true: {
        bg: 'transparent',
        [`& ${StyledDrip}`]: {
          '.nextui-drip-filler': {
            opacity: 0.8,
            fill: '$accents2'
          }
        }
      }
    },
    shadow: {
      true: {
        bs: '$sm'
      }
    },
    disabled: {
      true: {
        bg: '$accents2',
        color: '$accents4',
        cursor: 'not-allowed',
        pe: 'auto',
        '&:hover': {
          opacity: 1
        }
      }
    },
    clickable: {
      false: {
        cursor: 'default',
        pe: 'none'
      }
    },
    animated: {
      true: {
        '&:active': {
          transform: 'scale(0.97)'
        }
      },
      false: {
        transition: 'none'
      }
    },
    auto: {
      true: {
        width: 'auto',
        minWidth: 'min-content'
      }
    },
    rounded: {
      true: {
        br: '$pill'
      }
    }
  },
  compoundVariants: [// size / auto
  {
    auto: true,
    size: 'xs',
    css: {
      px: '$5',
      minWidth: 'min-content'
    }
  }, {
    auto: true,
    size: 'sm',
    css: {
      px: '$8',
      minWidth: 'min-content'
    }
  }, {
    auto: true,
    size: 'md',
    css: {
      px: '$9',
      minWidth: 'min-content'
    }
  }, {
    auto: true,
    size: 'lg',
    css: {
      px: '$10',
      minWidth: 'min-content'
    }
  }, {
    auto: true,
    size: 'xl',
    css: {
      px: '$11',
      minWidth: 'min-content'
    }
  }, // animated / disabled
  {
    animated: true,
    disabled: true,
    css: {
      '&:active': {
        transform: 'none'
      }
    }
  }, // shadow / color
  {
    shadow: true,
    color: 'default',
    css: {
      normalShadow: '$primaryShadow'
    }
  }, {
    shadow: true,
    color: 'primary',
    css: {
      normalShadow: '$primaryShadow'
    }
  }, {
    shadow: true,
    color: 'secondary',
    css: {
      normalShadow: '$secondaryShadow'
    }
  }, {
    shadow: true,
    color: 'warning',
    css: {
      normalShadow: '$warningShadow'
    }
  }, {
    shadow: true,
    color: 'success',
    css: {
      normalShadow: '$successShadow'
    }
  }, {
    shadow: true,
    color: 'error',
    css: {
      normalShadow: '$errorShadow'
    }
  }, {
    shadow: true,
    color: 'gradient',
    css: {
      normalShadow: '$primaryShadow'
    }
  }, // light / color
  {
    light: true,
    color: 'default',
    css: {
      bg: 'transparent',
      color: '$text'
    }
  }, {
    light: true,
    color: 'primary',
    css: {
      bg: 'transparent',
      color: '$primary'
    }
  }, {
    light: true,
    color: 'secondary',
    css: {
      bg: 'transparent',
      color: '$secondary'
    }
  }, {
    light: true,
    color: 'warning',
    css: {
      bg: 'transparent',
      color: '$warning'
    }
  }, {
    light: true,
    color: 'success',
    css: {
      bg: 'transparent',
      color: '$success'
    }
  }, {
    light: true,
    color: 'error',
    css: {
      bg: 'transparent',
      color: '$error'
    }
  }, // bordered / color
  {
    bordered: true,
    color: 'default',
    css: {
      bg: 'transparent',
      borderColor: '$primary',
      color: '$primary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$primary'
        }
      }
    }
  }, {
    bordered: true,
    color: 'primary',
    css: {
      bg: 'transparent',
      borderColor: '$primary',
      color: '$primary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$primary'
        }
      }
    }
  }, {
    bordered: true,
    color: 'secondary',
    css: {
      bg: 'transparent',
      borderColor: '$secondary',
      color: '$secondary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$secondary'
        }
      }
    }
  }, {
    bordered: true,
    color: 'success',
    css: {
      bg: 'transparent',
      borderColor: '$success',
      color: '$success',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$success'
        }
      }
    }
  }, {
    bordered: true,
    color: 'warning',
    css: {
      bg: 'transparent',
      borderColor: '$warning',
      color: '$warning',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$warning'
        }
      }
    }
  }, {
    bordered: true,
    color: 'error',
    css: {
      bg: 'transparent',
      borderColor: '$error',
      color: '$error',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$error'
        }
      }
    }
  }, {
    bordered: true,
    color: 'gradient',
    css: {
      bg: 'transparent',
      color: '$text',
      padding: '$1',
      bgClip: 'content-box, border-box',
      borderColor: '$primary',
      backgroundImage: 'linear-gradient($background, $background), $gradient',
      border: 'none',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          fill: '$secondary'
        }
      }
    }
  }, // ghost / color
  {
    ghost: true,
    color: 'default',
    css: {
      '&:hover': {
        bg: '$primary'
      }
    }
  }, {
    ghost: true,
    color: 'primary',
    css: {
      '&:hover': {
        bg: '$primary'
      }
    }
  }, {
    ghost: true,
    color: 'secondary',
    css: {
      '&:hover': {
        bg: '$secondary'
      }
    }
  }, {
    ghost: true,
    color: 'success',
    css: {
      '&:hover': {
        bg: '$success'
      }
    }
  }, {
    ghost: true,
    color: 'warning',
    css: {
      '&:hover': {
        bg: '$warning'
      }
    }
  }, {
    ghost: true,
    color: 'error',
    css: {
      '&:hover': {
        bg: '$error'
      }
    }
  }, {
    ghost: true,
    color: 'gradient',
    css: {
      '&:hover': {
        bg: '$gradient'
      }
    }
  }, // flat / color
  {
    flat: true,
    color: 'default',
    css: {
      bg: '$primaryLight',
      color: '$primary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$primary'
        }
      }
    }
  }, {
    flat: true,
    color: 'primary',
    css: {
      bg: '$primaryLight',
      color: '$primary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$primary'
        }
      }
    }
  }, {
    flat: true,
    color: 'secondary',
    css: {
      bg: '$secondaryLight',
      color: '$secondary',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$secondary'
        }
      }
    }
  }, {
    flat: true,
    color: 'success',
    css: {
      bg: '$successLight',
      color: '$success',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$success'
        }
      }
    }
  }, {
    flat: true,
    color: 'warning',
    css: {
      bg: '$warningLight',
      color: '$warning',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$warning'
        }
      }
    }
  }, {
    flat: true,
    color: 'error',
    css: {
      bg: '$errorLight',
      color: '$error',
      [`& ${StyledDrip}`]: {
        '.nextui-drip-filler': {
          opacity: 0.4,
          fill: '$error'
        }
      }
    }
  }, // border-weight / gradient-color / bordered
  {
    bordered: true,
    color: 'gradient',
    borderWeight: 'light',
    css: {
      padding: '$borderWeights$light'
    }
  }, {
    bordered: true,
    color: 'gradient',
    borderWeight: 'normal',
    css: {
      padding: '$borderWeights$normal'
    }
  }, {
    bordered: true,
    color: 'gradient',
    borderWeight: 'bold',
    css: {
      padding: '$borderWeights$bold'
    }
  }, {
    bordered: true,
    color: 'gradient',
    borderWeight: 'extrabold',
    css: {
      padding: '$borderWeights$extrabold'
    }
  }, {
    bordered: true,
    color: 'gradient',
    borderWeight: 'black',
    css: {
      padding: '$borderWeights$black'
    }
  }, // size / auto / gradient-color / bordered
  {
    auto: true,
    color: 'gradient',
    bordered: true,
    size: 'xs',
    css: {
      px: '$1',
      py: '$1',
      '.nextui-button-text': {
        px: '$5'
      }
    }
  }, {
    auto: true,
    color: 'gradient',
    bordered: true,
    size: 'sm',
    css: {
      px: '$1',
      py: '$1',
      '.nextui-button-text': {
        px: '$8'
      }
    }
  }, {
    auto: true,
    color: 'gradient',
    bordered: true,
    size: 'md',
    css: {
      px: '$1',
      py: '$1',
      '.nextui-button-text': {
        px: '$9'
      }
    }
  }, {
    auto: true,
    color: 'gradient',
    bordered: true,
    size: 'lg',
    css: {
      px: '$1',
      py: '$1',
      '.nextui-button-text': {
        px: '$14'
      }
    }
  }, {
    auto: true,
    color: 'gradient',
    bordered: true,
    size: 'xl',
    css: {
      px: '$1',
      py: '$1',
      '.nextui-button-text': {
        px: '$12'
      }
    }
  }, // rounded && size
  {
    rounded: true,
    size: 'xs',
    css: {
      br: '$pill'
    }
  }, {
    rounded: true,
    size: 'sm',
    css: {
      br: '$pill'
    }
  }, {
    rounded: true,
    size: 'md',
    css: {
      br: '$pill'
    }
  }, {
    rounded: true,
    size: 'lg',
    css: {
      br: '$pill'
    }
  }, {
    rounded: true,
    size: 'xl',
    css: {
      br: '$pill'
    }
  }],
  defaultVariants: {
    color: 'default',
    borderWeight: 'normal',
    animated: true,
    size: 'md'
  }
}, cssFocusVisible);
/* harmony default export */ const button_styles = (StyledButton);
;// CONCATENATED MODULE: ./src/button/button.tsx
var button_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/button/button.tsx";














const button_defaultProps = {
  clickable: true,
  ghost: false,
  bordered: false,
  ripple: true,
  animated: true,
  disabled: false,
  auto: false,
  className: '',
  type: 'button'
};
const Button = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({ ...btnProps
}, ref) => {
  const buttonRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => buttonRef.current);
  const groupConfig = useButtonGroupContext();
  const filteredProps = filterPropsWithGroup(btnProps, groupConfig);
  /* eslint-disable @typescript-eslint/no-unused-vars */

  const {
    flat,
    children,
    disabled,
    animated,
    light,
    ripple,
    bordered,
    auto,
    borderWeight,
    onClick,
    icon,
    iconRight,
    ghost,
    clickable,
    className,
    ...props
  } = filteredProps;
  /* eslint-enable @typescript-eslint/no-unused-vars */

  if (__DEV__ && filteredProps.color === 'gradient' && (flat || light)) {
    src_use_warning('Using the gradient color on flat and light buttons will have no effect.');
  }

  const hasIcon = icon || iconRight;
  const isRight = Boolean(iconRight);
  const {
    isFocusVisible,
    focusProps
  } = $e974583017b16a4e$export$4e328f61c538687f();
  const {
    onClick: onDripClickHandler,
    ...dripBindings
  } = src_use_drip(false, buttonRef);

  const clickHandler = event => {
    if (disabled || !clickable) return;

    if (animated && ripple && buttonRef.current) {
      onDripClickHandler(event);
    }

    onClick && onClick(event);
  };

  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return disabled ? 'disabled' : 'ready';
  }, [disabled]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_styles, {
    ref: buttonRef,
    borderWeight: borderWeight,
    auto: auto,
    flat: flat,
    light: light,
    ghost: ghost,
    bordered: bordered || ghost,
    clickable: clickable,
    "data-state": getState,
    disabled: disabled,
    animated: animated,
    onClick: clickHandler,
    isFocusVisible: isFocusVisible,
    className: clsx('nextui-button', `nextui-button--${getState}`, className),
    ...focusProps,
    ...props,
    children: [external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.count(children) === 0 ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_icon, {
      isAuto: auto,
      isRight: isRight,
      isSingle: true,
      children: hasIcon
    }, void 0, false, {
      fileName: button_jsxFileName,
      lineNumber: 145,
      columnNumber: 9
    }, undefined) : hasIcon ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_icon, {
        isAuto: auto,
        isRight: isRight,
        children: hasIcon
      }, void 0, false, {
        fileName: button_jsxFileName,
        lineNumber: 150,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
        className: clsx('nextui-button-text', {
          'nextui-button-text-right': isRight,
          'nextui-button-text-left': !isRight
        }),
        children: children
      }, void 0, false, {
        fileName: button_jsxFileName,
        lineNumber: 153,
        columnNumber: 11
      }, undefined)]
    }, void 0, true) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("span", {
      className: "nextui-button-text",
      children: children
    }, void 0, false, {
      fileName: button_jsxFileName,
      lineNumber: 163,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(drip, {
      color: "white",
      ...dripBindings
    }, void 0, false, {
      fileName: button_jsxFileName,
      lineNumber: 165,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: button_jsxFileName,
    lineNumber: 126,
    columnNumber: 5
  }, undefined);
});

if (__DEV__) {
  Button.displayName = 'NextUI - Button';
}

Button.toString = () => '.nextui-button';

/* harmony default export */ const button_button = (with_defaults(Button, button_defaultProps));
;// CONCATENATED MODULE: ./src/button/button-group.styles.ts


const StyledButtonGroup = styled('div', {
  display: 'inline-flex',
  margin: '$3',
  backgroundColor: 'transparent',
  height: 'min-content',
  [`& ${button_styles}`]: {
    '.nextui-button-text': {
      top: 0
    }
  },
  variants: {
    vertical: {
      true: {
        fd: 'column',
        [`& ${button_styles}`]: {
          '&:not(:first-child)': {
            btlr: 0,
            // top-left
            btrr: 0 // top-right

          },
          '&:not(:last-child)': {
            bblr: 0,
            bbrr: 0
          }
        }
      },
      false: {
        fd: 'row',
        [`& ${button_styles}`]: {
          '&:not(:first-child)': {
            btlr: 0,
            // top-left
            bblr: 0 // bottom-left

          },
          '&:not(:last-child)': {
            btrr: 0,
            // top-right
            bbrr: 0 // bottom-right

          }
        }
      }
    },
    size: {
      xs: {
        br: '$xs'
      },
      sm: {
        br: '$sm'
      },
      md: {
        br: '$md'
      },
      lg: {
        br: '$base'
      },
      xl: {
        br: '$xl'
      }
    },
    rounded: {
      true: {
        br: '$pill'
      }
    },
    bordered: {
      true: {
        bg: 'transparent'
      }
    },
    gradient: {
      true: {
        pl: 0
      }
    }
  },
  defaultVariants: {
    vertical: false
  },
  compoundVariants: [// bordered / vertical:true
  {
    bordered: true,
    vertical: true,
    css: {
      [`& ${button_styles}`]: {
        '&:not(:last-child)': {
          borderBottom: 'none',
          paddingBottom: '0'
        }
      }
    }
  }, // bordered / vertical:false
  {
    bordered: true,
    vertical: false,
    css: {
      [`& ${button_styles}`]: {
        '&:not(:first-child)': {
          borderLeft: 'none'
        }
      }
    }
  }, // gradient / vertical:false
  {
    gradient: true,
    vertical: false,
    css: {
      [`& ${button_styles}`]: {
        '&:not(:last-child)&:not(:first-child)': {
          pl: 0,
          filter: 'hue-rotate(310deg)'
        },
        '&:last-child': {
          pl: 0,
          filter: 'hue-rotate(250deg)'
        }
      }
    }
  }]
});
/* harmony default export */ const button_group_styles = (StyledButtonGroup);
;// CONCATENATED MODULE: ./src/button/button-group.tsx
var button_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/button/button-group.tsx";





const button_group_defaultProps = {
  borderWeight: 'normal',
  size: 'md',
  color: 'default'
};

const ButtonGroup = groupProps => {
  const {
    disabled,
    size,
    color,
    bordered,
    ghost,
    light,
    flat,
    shadow,
    auto,
    animated,
    rounded,
    ripple,
    borderWeight,
    children,
    ...props
  } = groupProps;
  const initialValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    disabled,
    size,
    color,
    bordered,
    light,
    ghost,
    flat,
    shadow,
    auto,
    borderWeight,
    animated,
    rounded,
    ripple,
    isButtonGroup: true
  }), [disabled, animated, size, ripple, color, bordered, light, ghost, flat, borderWeight]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(ButtonGroupContext.Provider, {
    value: initialValue,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(button_group_styles, {
      size: size,
      bordered: bordered || ghost,
      gradient: groupProps.color === 'gradient',
      ...props,
      children: children
    }, void 0, false, {
      fileName: button_group_jsxFileName,
      lineNumber: 93,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: button_group_jsxFileName,
    lineNumber: 92,
    columnNumber: 5
  }, undefined);
};

ButtonGroup.toString = () => '.nextui-button-group';

const MemoButtonGroup = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ButtonGroup);
/* harmony default export */ const button_group = (with_defaults(MemoButtonGroup, button_group_defaultProps));
;// CONCATENATED MODULE: ./src/button/index.ts





button_button.Group = button_group;
/* harmony default export */ const src_button = (button_button);
;// CONCATENATED MODULE: ./src/image/image.styles.ts

const loading = keyframes({
  '0%': {
    backgroundPosition: '200% 0'
  },
  to: {
    backgroundPosition: '-200% 0'
  }
});
const StyledImageContainer = styled('div', {
  opacity: 0,
  margin: '0 auto',
  position: 'relative',
  br: '$lg',
  overflow: 'hidden',
  maxWidth: '100%',
  transition: 'transform 250ms ease 0ms, opacity 200ms ease-in 0ms',
  '@motion': {
    transition: 'none'
  },
  variants: {
    ready: {
      true: {
        opacity: 1
      },
      false: {
        opacity: 0
      }
    }
  }
});
const StyledImage = styled('img', {
  size: '100%',
  display: 'block'
});
const StyledImageSkeleton = styled('div', {
  position: 'absolute',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  size: '100%',
  borderRadius: 'inherit',
  backgroundImage: 'linear-gradient(270deg, $colors$accents1, $colors$accents2, $colors$accents2, $colors$accents1)',
  backgroundSize: '400% 100%',
  animation: `${loading} 5s ease-in-out infinite`,
  transition: 'opacity 300ms ease-out'
});
;// CONCATENATED MODULE: ./src/image/image.skeleton.tsx
var image_skeleton_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/image/image.skeleton.tsx";






const image_skeleton_defaultProps = {
  opacity: 0.5,
  className: ''
};
const ImageSkeleton = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(({
  opacity,
  css,
  className,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledImageSkeleton, {
    css: {
      opacity,
      ...css
    },
    className: clsx('nextui-image-skeleton', className),
    ...props
  }, void 0, false, {
    fileName: image_skeleton_jsxFileName,
    lineNumber: 30,
    columnNumber: 7
  }, undefined);
});

if (__DEV__) {
  ImageSkeleton.displayName = 'NextUI - ImageSkeleton';
}

ImageSkeleton.toString = () => '.nextui-image-skeleton';

/* harmony default export */ const image_skeleton = (with_defaults(ImageSkeleton, image_skeleton_defaultProps));
;// CONCATENATED MODULE: ./src/image/image.tsx
var image_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/image/image.tsx";








const image_defaultProps = {
  showSkeleton: true,
  autoResize: false,
  objectFit: 'scale-down',
  maxDelay: 3000,
  className: ''
};

const Image = ({
  src,
  width,
  height,
  showSkeleton: showSkeletonProp,
  className,
  maxDelay,
  autoResize,
  objectFit,
  containerCss,
  css,
  ...props
}) => {
  const [loading, setLoading] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(true);
  const [showSkeleton, setShowSkeleton] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(showSkeletonProp);
  const {
    w,
    h
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return {
      w: width ? typeof width === 'number' ? `${width}px` : width : 'auto',
      h: height ? typeof height === 'number' ? `${height}px` : height : 'auto'
    };
  }, [width, height]);
  const [zoomHeight, setZoomHeight, zoomHeightRef] = src_use_current_state(h);
  const imageRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [shape, updateShape] = src_use_real_shape(imageRef);
  const showAnimation = showSkeletonProp && !!width && !!height;

  const onImageLoaded = () => {
    setLoading(false);
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!imageRef.current) return;

    if (imageRef.current.complete) {
      setLoading(false);
      setShowSkeleton(false);
    }
  });
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const timer = setTimeout(() => {
      if (showAnimation) {
        setShowSkeleton(false);
      }

      clearTimeout(timer);
    }, maxDelay);
    return () => clearTimeout(timer);
  }, [loading]);
  /**
   * On mobile devices, the render witdth may be less than CSS width value.
   * If the image is scaled, set the height manually.
   * This is to ensure the aspect ratio of the image.
   *
   * If the image is auto width, ignore all.
   */

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!autoResize) return;
    const notLoaded = shape.width === 0;
    const isAutoZoom = zoomHeightRef.current === 'auto';
    if (notLoaded || !width || !height) return;

    if (shape.width < width) {
      !isAutoZoom && setZoomHeight('auto');
    } else {
      isAutoZoom && setZoomHeight(h);
    }
  }, [shape, width]);
  src_use_resize(() => {
    if (!autoResize) return;
    updateShape();
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return loading ? 'loading' : 'ready';
  }, [loading]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledImageContainer, {
    className: clsx('nextui-image-container', `nextui-image--${getState}`, className),
    "data-state": getState,
    ready: !loading || showSkeleton,
    css: { ...containerCss,
      width: w,
      height: zoomHeight
    },
    children: [showSkeleton && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(image_skeleton, {
      opacity: 1
    }, void 0, false, {
      fileName: image_jsxFileName,
      lineNumber: 136,
      columnNumber: 24
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledImage, {
      ref: imageRef,
      className: "nextui-image",
      width: width,
      height: height,
      onLoad: onImageLoaded,
      src: src,
      "data-state": getState,
      alt: props.alt || '',
      css: {
        objectFit,
        ...css
      },
      ...props
    }, void 0, false, {
      fileName: image_jsxFileName,
      lineNumber: 137,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: image_jsxFileName,
    lineNumber: 122,
    columnNumber: 5
  }, undefined);
};

Image.toString = () => '.nextui-image';

Image.defaultProps = image_defaultProps;
/* harmony default export */ const image_image = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Image));
;// CONCATENATED MODULE: ./src/image/index.ts


/* harmony default export */ const src_image = (image_image);
;// CONCATENATED MODULE: ./src/card/card.styles.ts


const StyledCardBody = styled('div', {
  d: 'flex',
  w: '100%',
  h: 'auto',
  flex: '1 1 auto',
  fd: 'column',
  jc: 'inherit',
  ai: 'inherit',
  ac: 'inherit',
  p: '$sm $lg',
  oy: 'auto',
  position: 'relative',
  ta: 'left',
  '*:first-child': {
    mt: 0
  },
  '*:last-child': {
    mb: 0
  }
});
const StyledCard = styled('div', {
  m: 0,
  p: 0,
  br: '$lg',
  position: 'relative',
  display: 'flex',
  overflow: 'hidden',
  fd: 'column',
  width: '100%',
  height: 'auto',
  boxSizing: 'border-box',
  '@motion': {
    transition: 'none'
  },
  '.nextui-image': {
    width: '100%'
  },
  [`& ${StyledDrip}`]: {
    zIndex: '$1',
    '.nextui-drip-filler': {
      opacity: 0.25,
      fill: '$accents6'
    }
  },
  variants: {
    color: {
      default: {
        $$cardColor: '$colors$background',
        bg: '$$cardColor'
      },
      primary: {
        $$cardColor: '$colors$primary',
        color: '$white',
        bg: '$$cardColor'
      },
      secondary: {
        $$cardColor: '$colors$secondary',
        color: '$white',
        bg: '$$cardColor'
      },
      success: {
        $$cardColor: '$colors$success',
        color: '$white',
        bg: '$$cardColor'
      },
      warning: {
        $$cardColor: '$colors$warning',
        color: '$white',
        bg: '$$cardColor'
      },
      error: {
        $$cardColor: '$colors$error',
        color: '$white',
        bg: '$$cardColor'
      },
      gradient: {
        $$cardColor: '$colors$gradient',
        color: '$white',
        bg: '$$cardColor'
      }
    },
    shadow: {
      true: {
        boxShadow: '$md'
      }
    },
    bordered: {
      true: {
        borderStyle: 'solid',
        borderColor: '$border'
      },
      false: {
        bw: 0
      }
    },
    borderWeight: {
      light: {
        bw: '$light'
      },
      normal: {
        bw: '$normal'
      },
      bold: {
        bw: '$bold'
      },
      extrabold: {
        bw: '$extrabold'
      },
      black: {
        bw: '$black'
      }
    },
    animated: {
      true: {
        transition: '$default'
      },
      false: {
        transition: 'none'
      }
    },
    clickable: {
      true: {
        cursor: 'pointer',
        us: 'none',
        WebkitTapHighlightColor: 'transparent',
        '&:focus:not(&:focus-visible)': {
          boxShadow: 'none'
        },
        '&:focus': {
          outline: 'none',
          boxShadow: '0 0 0 2px $colors$background, 0 0 0 4px $colors$primary'
        },
        '@safari': {
          WebkitTapHighlightColor: 'transparent',
          outline: 'none'
        }
      }
    },
    hoverable: {
      true: {
        '&:hover': {
          transform: 'translateY(-2px)',
          boxShadow: '$lg'
        }
      }
    },
    cover: {
      true: {
        '.nextui-image': {
          objectFit: 'cover !important' // TODO: remove important when image be styled

        },
        [`& ${StyledCardBody}`]: {
          p: 0
        }
      },
      false: {
        '.nextui-image, .nextui-image-container': {
          bblr: '0 !important',
          // TODO: remove important when image be styled
          bbrr: '0 !important'
        }
      }
    },
    isDark: {
      true: {}
    }
  },
  compoundVariants: [// isDark && color === 'default'
  {
    color: 'default',
    isDark: true,
    css: {
      $$cardColor: '$colors$accents1'
    }
  }, // color default && shadow && !isDark
  {
    color: 'default',
    shadow: true,
    isDark: false,
    css: {
      $$cardColor: '$colors$background',
      bg: '$$cardColor'
    }
  }, // color default && shadow && isDark
  {
    color: 'default',
    shadow: true,
    isDark: true,
    css: {
      $$cardColor: '$colors$accents1',
      bg: '$$cardColor'
    }
  }, // clickable && animated
  {
    clickable: true,
    animated: true,
    css: {
      '&:active': {
        scale: 0.97
      }
    }
  }],
  defaultVariants: {
    color: 'default',
    borderWeight: 'normal',
    animated: true,
    bordered: false,
    shadow: true
  }
});
const StyledCardHeader = styled('div', {
  w: '100%',
  display: 'flex',
  flexShrink: 0,
  zIndex: '$1',
  jc: 'flex-start',
  ai: 'center',
  overflow: 'hidden',
  color: 'inherit',
  fontSize: '$xs',
  p: '$sm',
  '*:first-child': {
    mt: 0
  },
  '*:last-child': {
    mb: 0
  }
});
const StyledCardFooter = styled('div', {
  w: '100%',
  h: 'auto',
  p: '$sm $lg',
  d: 'flex',
  ai: 'center',
  overflow: 'hidden',
  color: 'inherit',
  fontSize: '$xs',
  bblr: '$lg',
  bbrr: '$lg',
  '*': {
    mt: 0,
    mb: 0
  },
  variants: {
    blur: {
      true: {
        bf: 'saturate(180%) blur(10px)',
        bg: '$$cardColor'
      }
    }
  }
}); // types
;// CONCATENATED MODULE: ./src/card/card.tsx
var card_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/card/card.tsx";












const card_defaultProps = {
  animated: true,
  ripple: true,
  cover: false,
  preventDefault: false
};
const Card = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({ ...cardProps
}, ref) => {
  const {
    children,
    cover,
    animated,
    ripple,
    clickable,
    onClick,
    preventDefault,
    ...props
  } = cardProps;
  const cardRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => cardRef.current);
  const {
    isDark
  } = src_use_theme();
  const {
    onClick: onDripClickHandler,
    ...dripBindings
  } = src_use_drip(false, cardRef);
  const [withoutHeaderChildren, headerChildren] = pickChild(children, StyledCardHeader);
  const [withoutFooterChildren, footerChildren] = pickChild(withoutHeaderChildren, StyledCardFooter);
  const [withoutImageChildren, imageChildren] = pickChild(withoutFooterChildren, src_image);
  const hasContent = hasChild(withoutImageChildren, StyledCardBody);
  const hasHeader = hasChild(children, StyledCardHeader);

  const clickHandler = event => {
    if (animated && cardRef.current) {
      onDripClickHandler(event);
    }

    onClick && onClick(event);
  };

  const {
    bindings
  } = src_use_keyboard(event => {
    if (!clickable) {
      return;
    }

    clickHandler(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCard, {
    ref: cardRef,
    role: clickable ? 'button' : 'section',
    cover: cover,
    animated: animated,
    clickable: clickable,
    tabIndex: clickable ? 0 : -1,
    onClick: clickHandler,
    isDark: isDark,
    ...props,
    ...bindings,
    children: [hasHeader ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [headerChildren, imageChildren]
    }, void 0, true) : imageChildren, hasContent ? withoutImageChildren : !cover ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCardBody, {
      children: withoutImageChildren
    }, void 0, false, {
      fileName: card_jsxFileName,
      lineNumber: 133,
      columnNumber: 9
    }, undefined) : null, clickable && animated && ripple && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(drip, { ...dripBindings
    }, void 0, false, {
      fileName: card_jsxFileName,
      lineNumber: 135,
      columnNumber: 43
    }, undefined), footerChildren]
  }, void 0, true, {
    fileName: card_jsxFileName,
    lineNumber: 110,
    columnNumber: 5
  }, undefined);
});

if (__DEV__) {
  Card.displayName = 'NextUI - Card';
}

Card.toString = () => '.nextui-card';

/* harmony default export */ const card = (with_defaults(Card, card_defaultProps));
;// CONCATENATED MODULE: ./src/card/index.ts




card.Header = StyledCardHeader;
card.Body = StyledCardBody;
card.Footer = StyledCardFooter;
card.Image = src_image;
/* harmony default export */ const src_card = (card);
;// CONCATENATED MODULE: ./src/checkbox/checkbox-context.ts

const checkbox_context_defaultContext = {
  color: 'default',
  labelColor: 'default',
  size: 'md',
  disabledAll: false,
  inGroup: false,
  values: []
};
const CheckboxContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(checkbox_context_defaultContext);
const useCheckbox = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(CheckboxContext);
;// CONCATENATED MODULE: ./src/checkbox/checkbox.styles.ts

const StyledCheckboxLabel = styled('label', {
  d: 'inline-flex',
  jc: 'flex-start',
  ai: 'center',
  position: 'relative',
  w: 'auto',
  cursor: 'pointer',
  transition: '$default',
  zIndex: '$1',
  opacity: 1,
  $$checkboxBorderColor: '$colors$border',
  '@motion': {
    transition: 'none'
  },
  variants: {
    size: {
      xs: {
        $$checkboxSize: '$space$7'
      },
      sm: {
        $$checkboxSize: '$space$8'
      },
      md: {
        $$checkboxSize: '$space$9'
      },
      lg: {
        $$checkboxSize: '$space$10'
      },
      xl: {
        $$checkboxSize: '$space$11'
      }
    },
    disabled: {
      true: {
        opacity: 0.75,
        cursor: 'not-allowed'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    }
  },
  defaultVariants: {
    size: 'md'
  }
});
const StyledCheckboxContainer = styled('div', {
  br: '$squared',
  position: 'relative',
  sizeMin: '$$checkboxSize',
  opacity: 1,
  transition: '$default',
  zIndex: '$1',
  '@motion': {
    transition: 'none'
  },
  variants: {
    color: {
      default: {
        $$checkboxColor: '$colors$primary',
        $$checkboxColorHover: '$colors$primaryDark'
      },
      primary: {
        $$checkboxColor: '$colors$primary',
        $$checkboxColorHover: '$colors$primaryDark'
      },
      secondary: {
        $$checkboxColor: '$colors$secondary',
        $$checkboxColorHover: '$colors$secondaryDark'
      },
      success: {
        $$checkboxColor: '$colors$success',
        $$checkboxColorHover: '$colors$successDark'
      },
      warning: {
        $$checkboxColor: '$colors$warning',
        $$checkboxColorHover: '$colors$warningDark'
      },
      error: {
        $$checkboxColor: '$colors$error',
        $$checkboxColorHover: '$colors$errorDark'
      },
      gradient: {
        $$checkboxColor: '$colors$gradient',
        $$checkboxColorHover: '$colors$gradient'
      }
    },
    rounded: {
      true: {
        br: '$pill'
      }
    },
    disabled: {
      true: {
        opacity: 0.4,
        cursor: 'not-allowed'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    }
  },
  defaultVariants: {
    color: 'default'
  }
}, cssFocusVisible);
const StyledIconCheckFirstLine = styled('div', {
  content: '',
  background: 'transparent',
  position: 'absolute',
  width: '8px',
  height: '1px',
  transition: '$default',
  br: '5px',
  zIndex: '$1',
  bottom: '0px',
  '&:after': {
    content: '',
    position: 'absolute',
    left: '0px',
    width: '0%',
    height: '2px',
    background: '$white',
    transition: '$default',
    br: '5px 0px 0px 5px'
  },
  '@motion': {
    transition: 'none',
    '&:after': {
      transition: 'none'
    }
  },
  variants: {
    indeterminate: {
      true: {
        display: 'none'
      }
    },
    checked: {
      true: {
        '&:after': {
          width: '100%',
          transition: 'all 0.25s ease 0.1s'
        }
      }
    },
    animated: {
      false: {
        transition: 'none',
        '&:after': {
          transition: 'none'
        }
      }
    }
  },
  compoundVariants: [// checked && !animated
  {
    checked: true,
    animated: false,
    css: {
      '&:after': {
        transition: 'none'
      }
    }
  }]
});
const StyledIconCheckSecondLine = styled('div', {
  content: '',
  position: 'absolute',
  h: '13px',
  br: '5px',
  bottom: '0',
  right: '0',
  zIndex: '$1',
  background: 'transparent',
  transition: '$default',
  width: '2px',
  '&:after': {
    content: '',
    position: 'absolute',
    width: '2px',
    height: '0%',
    background: '$white',
    transition: '$default',
    left: '0px',
    bottom: '0px',
    br: '5px 5px 0px 0px'
  },
  '@motion': {
    transition: 'none',
    '&:after': {
      transition: 'none'
    }
  },
  variants: {
    indeterminate: {
      true: {
        display: 'none'
      }
    },
    checked: {
      true: {
        '&:after': {
          height: '100%',
          transition: 'all 0.2s ease 0.3s'
        }
      }
    },
    animated: {
      false: {
        transition: 'none',
        '&:after': {
          transition: 'none'
        }
      }
    }
  },
  compoundVariants: [// checked && !animated
  {
    checked: true,
    animated: false,
    css: {
      '&:after': {
        transition: 'none'
      }
    }
  }]
});
const StyledIconCheck = styled('i', {
  size: '$$checkboxSize',
  dflex: 'center',
  br: 'inherit',
  opacity: 0,
  zIndex: '$2',
  transition: 'transform 0.35s ease',
  '&:after': {
    content: '',
    opacity: 0,
    position: 'relative',
    width: '10px',
    height: '2px',
    br: '1px',
    background: '$white',
    display: 'block'
  },
  '@motion': {
    transition: 'none',
    '&:after': {
      transition: 'none'
    }
  },
  variants: {
    indeterminate: {
      true: {
        transform: 'rotate(0deg)',
        width: 'auto',
        height: 'auto',
        margin: '0px',
        '&:after': {
          opacity: 1
        }
      },
      false: {
        width: '8px',
        height: '14px',
        display: 'block',
        position: 'relative',
        marginTop: '-4px'
      }
    },
    size: {
      xs: {
        marginTop: '-2px',
        transform: 'rotate(45deg) scale(0.5)'
      },
      sm: {
        marginTop: '-2px',
        transform: 'rotate(45deg) scale(0.5)'
      },
      md: {
        transform: 'rotate(45deg) scale(0.8)'
      },
      lg: {
        transform: 'rotate(45deg)'
      },
      xl: {
        transform: 'rotate(45deg)'
      }
    },
    checked: {
      true: {
        opacity: 1
      }
    },
    animated: {
      false: {
        transition: 'none',
        '&:after': {
          transition: 'none'
        }
      }
    }
  },
  compoundVariants: [// indeterminate && xs size
  {
    indeterminate: true,
    size: 'xs',
    css: {
      scale: '0.5'
    }
  }, // indeterminate && sm size
  {
    indeterminate: true,
    size: 'sm',
    css: {
      scale: '0.5'
    }
  }, // indeterminate && md size
  {
    indeterminate: true,
    size: 'md',
    css: {
      scale: '0.8'
    }
  }, // indeterminate && lg size
  {
    indeterminate: true,
    size: 'lg',
    css: {
      transform: 'none'
    }
  }, // indeterminate && xl size
  {
    indeterminate: true,
    size: 'lg',
    css: {
      transform: 'none'
    }
  }]
});
const StyledCheckboxMask = styled('div', {
  size: '100%',
  position: 'absolute',
  pe: 'none',
  boxSizing: 'border-box',
  dflex: 'center',
  zIndex: '-$1',
  br: 'inherit',
  transition: '$default',
  color: '$$checkboxBorderColor',
  '&:before': {
    content: '',
    position: 'absolute',
    top: '0px',
    left: '0px',
    size: '100%',
    br: 'inherit',
    transition: '$transitions$default',
    zIndex: '-$1',
    border: '$borderWeights$normal solid currentColor',
    boxSizing: 'border-box'
  },
  '&:after': {
    content: '',
    position: 'absolute',
    top: '0px',
    left: '0px',
    size: '100%',
    bg: '$$checkboxColor',
    scale: 0.5,
    br: 'inherit',
    opacity: 0,
    transition: '$default',
    zIndex: '-$1'
  },
  '@motion': {
    transition: 'none',
    '&:before': {
      transition: 'none'
    },
    '&:after': {
      transition: 'none'
    }
  },
  variants: {
    checked: {
      true: {
        '&:before': {
          opacity: 0,
          scale: 1.2
        },
        '&:after': {
          opacity: 1,
          scale: 1
        }
      }
    },
    animated: {
      false: {
        transition: 'none',
        '&:before': {
          transition: 'none'
        },
        '&:after': {
          transition: 'none'
        }
      }
    }
  }
});
const StyledCheckboxText = styled('span', {
  position: 'relative',
  dflex: 'center',
  color: '$text',
  opacity: 1,
  pl: 'calc($$checkboxSize * 0.57)',
  ln: '$$checkboxSize',
  fontSize: '$$checkboxSize',
  us: 'none',
  '@motion': {
    '&:before': {
      transition: 'none'
    }
  },
  variants: {
    color: {
      default: {
        color: '$text'
      },
      primary: {
        color: '$primary'
      },
      secondary: {
        color: '$secondary'
      },
      success: {
        color: '$success'
      },
      warning: {
        color: '$warning'
      },
      error: {
        color: '$error'
      }
    },
    line: {
      true: {
        '&:before': {
          content: '',
          position: 'absolute',
          width: '0px',
          height: '2px',
          background: '$text',
          transition: '$default'
        }
      }
    },
    checked: {
      true: {
        '&:before': {
          opacity: 0.8
        }
      }
    },
    disabled: {
      true: {
        color: '$accents4'
      }
    },
    animated: {
      false: {
        '&:before': {
          transition: 'none'
        }
      }
    }
  },
  compoundVariants: [{
    line: true,
    checked: true,
    css: {
      opacity: 0.6,
      '&:before': {
        w: 'calc(100% - 10px)'
      }
    }
  }]
});
const StyledCheckboxInput = styled('input', {
  position: 'absolute',
  width: '100%',
  height: '100%',
  top: '0px',
  left: '0px',
  margin: '0px',
  padding: '0px',
  opacity: 0,
  zIndex: '$1',
  cursor: 'pointer',
  '&:active': {
    [`& ~${StyledCheckboxMask}:before`]: {
      bg: '$border'
    }
  },
  '&:hover': {
    [`& ~${StyledCheckboxMask}:before`]: {
      bg: '$$checkboxBorderColor',
      border: '2px solid transparent'
    },
    [`& ~${StyledCheckboxMask}:after`]: {
      bg: '$$checkboxColorHover'
    }
  },
  '&:disabled': {
    cursor: 'not-allowed'
  }
});
const StyledCheckboxGroup = styled('div', {
  display: 'flex',
  flexDirection: 'column',
  variants: {
    size: {
      xs: {
        $$checkboxSize: '$space$7'
      },
      sm: {
        $$checkboxSize: '$space$8'
      },
      md: {
        $$checkboxSize: '$space$9'
      },
      lg: {
        $$checkboxSize: '$space$10'
      },
      xl: {
        $$checkboxSize: '$space$11'
      }
    },
    row: {
      true: {
        flexDirection: 'row',
        mt: 0,
        [`& ${StyledCheckboxLabel}`]: {
          mr: '$$checkboxSize'
        }
      },
      false: {
        mr: 0,
        flexDirection: 'column',
        [`& ${StyledCheckboxLabel}`]: {
          mt: '$$checkboxSize'
        }
      }
    }
  },
  defaultVariants: {
    row: false
  }
}); // types
;// CONCATENATED MODULE: ./src/checkbox/checkbox.tsx
var checkbox_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/checkbox/checkbox.tsx";








const checkbox_defaultProps = {
  value: '',
  size: 'md',
  color: 'default',
  labelColor: 'default',
  disabled: false,
  preventDefault: true,
  initialChecked: false,
  indeterminate: false,
  rounded: false,
  line: false,
  animated: true,
  className: ''
};
const Checkbox = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  checked,
  initialChecked,
  line,
  rounded,
  indeterminate,
  disabled,
  onChange,
  size,
  className,
  children,
  label,
  color,
  labelColor,
  animated,
  value,
  preventDefault,
  ...props
}, ref) => {
  const [selfChecked, setSelfChecked] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialChecked);
  const [selfIndeterminate, setSelfIndeterminate] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(indeterminate);
  const checkboxRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => checkboxRef == null ? void 0 : checkboxRef.current);
  const {
    color: groupColor,
    labelColor: labelGroupColor,
    size: groupSize,
    updateState,
    inGroup,
    disabledAll,
    values
  } = useCheckbox();
  const {
    isFocusVisible,
    focusProps
  } = $e974583017b16a4e$export$4e328f61c538687f();
  const isDisabled = inGroup ? disabledAll || disabled : disabled;
  const checkboxColor = color !== 'default' ? color : groupColor;
  const checkboxSize = size !== 'md' ? size : groupSize;
  const textColor = labelColor !== 'default' ? labelColor : labelGroupColor;

  if (__DEV__ && inGroup && checked) {
    src_use_warning('Remove props "checked" when [Checkbox] component is in the group.', 'Checkbox');
  }

  if (inGroup) {
    (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
      const next = values.includes(value);
      if (next === selfChecked) return;
      setSelfChecked(next);
    }, [values.join(',')]);
  }

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    setSelfIndeterminate(indeterminate);
  }, [indeterminate]);
  const changeHandle = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(ev => {
    if (isDisabled) return;
    const selfEvent = {
      target: {
        checked: !selfChecked
      },
      stopPropagation: ev.stopPropagation,
      preventDefault: ev.preventDefault,
      nativeEvent: ev
    };

    if (inGroup && updateState) {
      updateState && updateState(value, !selfChecked);
    }

    if (selfIndeterminate) {
      setSelfIndeterminate(false);
      setSelfChecked(true);
    } else {
      setSelfChecked(!selfChecked);
    }

    onChange && onChange(selfEvent);
  }, [updateState, onChange, isDisabled, selfChecked, selfIndeterminate]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (checked === undefined) return;
    setSelfChecked(checked);
  }, [checked]);
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return selfChecked && selfIndeterminate ? 'mixed' : selfChecked ? 'checked' : 'uncheked';
  }, [selfChecked, selfIndeterminate]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxLabel, {
    size: checkboxSize,
    disabled: isDisabled,
    animated: animated,
    className: clsx('nextui-checkbox-label', `nextui-checkbox--${getState}`, className),
    css: props.css,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxContainer, {
      className: "nextui-checkbox-container",
      tabIndex: isDisabled ? -1 : 0,
      color: checkboxColor,
      rounded: rounded,
      disabled: isDisabled,
      animated: animated,
      isFocusVisible: isFocusVisible,
      ...focusProps,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxInput, {
        ref: checkboxRef,
        type: "checkbox",
        className: "nextui-checkbox-input",
        tabIndex: -1,
        "data-state": getState,
        disabled: isDisabled,
        checked: selfChecked,
        "aria-checked": selfChecked && selfIndeterminate ? 'mixed' : selfChecked,
        "aria-disabled": isDisabled,
        onChange: changeHandle,
        ...props
      }, void 0, false, {
        fileName: checkbox_jsxFileName,
        lineNumber: 220,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxMask, {
        checked: selfChecked,
        animated: animated,
        className: "nextui-checkbox-mask",
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledIconCheck, {
          size: checkboxSize,
          indeterminate: selfIndeterminate,
          checked: selfChecked,
          animated: animated,
          className: "nextui-icon-check",
          children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledIconCheckFirstLine, {
            indeterminate: selfIndeterminate,
            checked: selfChecked,
            animated: animated,
            className: "nextui-icon-check-line1"
          }, void 0, false, {
            fileName: checkbox_jsxFileName,
            lineNumber: 247,
            columnNumber: 15
          }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledIconCheckSecondLine, {
            indeterminate: selfIndeterminate,
            checked: selfChecked,
            animated: animated,
            className: "nextui-icon-check-line2"
          }, void 0, false, {
            fileName: checkbox_jsxFileName,
            lineNumber: 253,
            columnNumber: 15
          }, undefined)]
        }, void 0, true, {
          fileName: checkbox_jsxFileName,
          lineNumber: 240,
          columnNumber: 13
        }, undefined)
      }, void 0, false, {
        fileName: checkbox_jsxFileName,
        lineNumber: 235,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: checkbox_jsxFileName,
      lineNumber: 210,
      columnNumber: 9
    }, undefined), (children || label) && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxText, {
      className: "nextui-checkbox-text",
      color: textColor,
      line: line,
      checked: selfChecked,
      disabled: isDisabled,
      animated: animated,
      children: children || label
    }, void 0, false, {
      fileName: checkbox_jsxFileName,
      lineNumber: 263,
      columnNumber: 11
    }, undefined)]
  }, void 0, true, {
    fileName: checkbox_jsxFileName,
    lineNumber: 199,
    columnNumber: 7
  }, undefined);
});
Checkbox.defaultProps = checkbox_defaultProps;

Checkbox.toString = () => '.nextui-checkbox';

if (__DEV__) {
  Checkbox.displayName = 'NextUI - Checkbox';
}

/* harmony default export */ const checkbox_checkbox = (Checkbox);
;// CONCATENATED MODULE: ./src/checkbox/checkbox-group.tsx
var checkbox_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/checkbox/checkbox-group.tsx";







const checkbox_group_defaultProps = {
  color: 'default',
  labelColor: 'default',
  disabled: false,
  size: 'md'
};

const CheckboxGroup = ({
  color,
  labelColor,
  disabled,
  onChange,
  value,
  size,
  children,
  className,
  style,
  ...props
}) => {
  const [selfVal, setSelfVal] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)([]);

  if (!value && __DEV__) {
    value = [];
    src_use_warning('Props "value" is required.', 'Checkbox Group');
  }

  const updateState = (val, checked) => {
    const removed = selfVal.filter(v => v !== val);
    const next = checked ? [...removed, val] : removed;
    setSelfVal(next);
    onChange && onChange(next);
  };

  const providerValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return {
      updateState,
      color,
      labelColor,
      size,
      disabledAll: disabled,
      inGroup: true,
      values: selfVal
    };
  }, [disabled, selfVal]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    setSelfVal(value);
  }, [value.join(',')]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(CheckboxContext.Provider, {
    value: providerValue,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCheckboxGroup, {
      role: "group",
      size: size,
      ...props,
      children: children
    }, void 0, false, {
      fileName: checkbox_group_jsxFileName,
      lineNumber: 79,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: checkbox_group_jsxFileName,
    lineNumber: 78,
    columnNumber: 5
  }, undefined);
};

CheckboxGroup.toString = () => '.nextui-checkbox-group';

/* harmony default export */ const checkbox_group = (with_defaults(CheckboxGroup, checkbox_group_defaultProps));
;// CONCATENATED MODULE: ./src/checkbox/index.ts


checkbox_checkbox.Group = checkbox_group; // export styled components


/* harmony default export */ const src_checkbox = (checkbox_checkbox);
;// CONCATENATED MODULE: ./src/code/code.styles.ts

const StyledCode = styled('code', {});
const StyledPre = styled('pre', {
  width: 'initial',
  mw: '100'
});
;// CONCATENATED MODULE: ./src/code/code.tsx
var code_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/code/code.tsx";




const code_defaultProps = {
  block: false
};

const Code = ({
  block,
  children,
  ...props
}) => {
  if (!block) return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCode, { ...props,
    children: children
  }, void 0, false, {
    fileName: code_jsxFileName,
    lineNumber: 23,
    columnNumber: 22
  }, undefined);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPre, { ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCode, {
      children: children
    }, void 0, false, {
      fileName: code_jsxFileName,
      lineNumber: 26,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: code_jsxFileName,
    lineNumber: 25,
    columnNumber: 5
  }, undefined);
};

Code.toString = () => '.nextui-code';

const MemoCode = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Code);
/* harmony default export */ const code = (with_defaults(MemoCode, code_defaultProps));
;// CONCATENATED MODULE: ./src/code/index.ts


/* harmony default export */ const src_code = (code);
;// CONCATENATED MODULE: ./src/col/col.styles.ts

const StyledCol = styled('div', {
  float: 'left',
  boxSizing: 'border-box',
  pl: 'calc($$rowGap / 2)',
  pr: 'calc($$rowGap / 2)'
});
/* harmony default export */ const col_styles = (StyledCol);
;// CONCATENATED MODULE: ./src/col/col.tsx
var col_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/col/col.tsx";




const col_defaultProps = {
  span: 12,
  offset: 0
};

const Col = ({
  children,
  span,
  offset,
  css,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(col_styles, {
    css: {
      width: `${100 / 12 * span}%`,
      marginLeft: `${100 / 12 * offset}%`,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: col_jsxFileName,
    lineNumber: 33,
    columnNumber: 5
  }, undefined);
};

Col.toString = () => '.nextui-column';

const MemoCol = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Col);
/* harmony default export */ const col = (with_defaults(MemoCol, col_defaultProps));
;// CONCATENATED MODULE: ./src/col/index.ts


/* harmony default export */ const src_col = (col);
;// CONCATENATED MODULE: ./src/collapse/collapse.styles.ts

const StyledCollapse = styled('div', {
  transition: '$default',
  '.nextui-collapse-title-content': {
    w: '100%',
    'h1,h2,h3,h4,h5,h6,p,span,b': {
      margin: 0
    }
  },
  '.nextui-collapse-title-container': {
    d: 'flex',
    jc: 'space-between',
    ai: 'center'
  },
  '.nextui-collapse-title': {
    color: '$foreground'
  },
  '.nextui-collapse-subtitle': {
    color: '$accents5',
    margin: 0,
    '*': {
      margin: 0
    }
  },
  '.nextui-collapse-title-content-left': {
    mr: '$sm'
  },
  '.nextui-collapse-title-content-left, .nextui-collapse-title-content-right': {
    d: 'flex',
    ai: 'center'
  },
  '@motion': {
    transition: 'none',
    '.nextui-collapse-title-content-right ': {
      svg: {
        transition: 'none'
      }
    }
  },
  variants: {
    shadow: {
      true: {
        border: 'none',
        boxShadow: '$md',
        br: '$lg',
        p: '0 $lg',
        bg: '$background'
      }
    },
    borderWeight: {
      light: {
        $$collapseBorderWidth: '$borderWeights$light'
      },
      normal: {
        $$collapseBorderWidth: '$borderWeights$normal'
      },
      bold: {
        $$collapseBorderWidth: '$borderWeights$bold'
      },
      extrabold: {
        $$collapseBorderWidth: '$borderWeights$extrabold'
      },
      black: {
        $$collapseBorderWidth: '$borderWeights$black'
      }
    },
    divider: {
      true: {
        borderTop: '$$collapseBorderWidth solid $border',
        borderBottom: '$$collapseBorderWidth solid $border'
      }
    },
    bordered: {
      true: {
        br: '$lg',
        p: '0 $lg',
        border: '$$collapseBorderWidth solid $border'
      }
    },
    animated: {
      true: {
        '.nextui-collapse-title-content-right ': {
          svg: {
            transition: 'transform 200ms ease'
          }
        }
      },
      false: {
        transition: 'none'
      }
    },
    visible: {
      true: {
        '.nextui-collapse-title-content-right ': {
          svg: {
            transform: 'rotateZ(-90deg)'
          }
        }
      },
      false: {
        '.nextui-collapse-title-content-right': {
          svg: {
            transform: 'rotateZ(0deg)'
          }
        }
      }
    },
    isDark: {
      true: {}
    }
  },
  defaultVariants: {
    borderWeight: 'light'
  },
  compoundVariants: [// isDark && shadow
  {
    isDark: true,
    shadow: true,
    css: {
      bg: '$accents1'
    }
  }]
}, sharedFocus);
const StyledCollapseView = styled('div', {
  w: '100%',
  d: 'block',
  ta: 'left',
  bg: 'transparent',
  border: 'none',
  cursor: 'pointer',
  outline: 'none',
  padding: '$lg 0',
  variants: {
    disabled: {
      true: {
        cursor: 'not-allowed',
        '.nextui-collapse-title, .nextui-collapse-subtitle': {
          opacity: 0.5
        }
      }
    }
  }
}, cssFocusVisible);
const StyledCollapseContent = styled('div', {
  fontSize: '$base',
  lineHeight: '$lg',
  pb: '$lg',
  '*:first-child': {
    mt: 0
  },
  '*:last-child': {
    mb: 0
  }
});
const StyledCollapseIcon = styled('svg', {
  path: {
    stroke: '$accents5'
  }
});
const StyledCollapseGroup = styled('div', {
  width: 'auto',
  padding: '0 $sm',
  'div + div': {
    borderTop: 'none'
  },
  [`& ${StyledCollapse}:first-child`]: {
    borderTop: 'none'
  },
  [`& ${StyledCollapse}:last-child`]: {
    borderBottom: 'none'
  },
  variants: {
    borderWeight: {
      light: {
        $$collapseGroupBorderWidth: '$borderWeights$light'
      },
      normal: {
        $$collapseGroupBorderWidth: '$borderWeights$normal'
      },
      bold: {
        $$collapseGroupBorderWidth: '$borderWeights$bold'
      },
      extrabold: {
        $$collapseGroupBorderWidth: '$borderWeights$extrabold'
      },
      black: {
        $$collapseGroupBorderWidth: '$borderWeights$black'
      }
    },
    shadow: {
      true: {
        br: '$lg',
        border: 'none',
        boxShadow: '$md',
        p: '0 $lg',
        bg: '$background'
      }
    },
    bordered: {
      true: {
        br: '$lg',
        p: '0 $lg',
        border: '$$collapseGroupBorderWidth solid $border'
      }
    },
    splitted: {
      true: {
        [`& ${StyledCollapse}`]: {
          br: '$lg',
          border: 'none',
          bg: '$background',
          boxShadow: '$md',
          p: '0 $lg',
          margin: '$md 0'
        }
      }
    },
    isDark: {
      true: {}
    }
  },
  defaultVariants: {
    borderWeight: 'light',
    shadow: false,
    bordered: false,
    splitted: false
  },
  compoundVariants: [// isDark && shadow
  {
    isDark: true,
    shadow: true,
    css: {
      bg: '$accents1'
    }
  }, // splitted && isDark
  {
    isDark: true,
    splitted: true,
    css: {
      [`& ${StyledCollapse}`]: {
        bg: '$accents1'
      }
    }
  }]
});
;// CONCATENATED MODULE: ./src/collapse/collapse-icon.tsx
var collapse_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/collapse/collapse-icon.tsx";




const CollapseIcon = ({ ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseIcon, {
    role: "presentation",
    focusable: "false",
    className: "nextui-collapse-icon",
    width: "20",
    height: "20",
    fill: "none",
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg",
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M15.5 19l-7-7 7-7",
      strokeWidth: 1.5,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }, void 0, false, {
      fileName: collapse_icon_jsxFileName,
      lineNumber: 20,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: collapse_icon_jsxFileName,
    lineNumber: 9,
    columnNumber: 5
  }, undefined);
};

CollapseIcon.toString = () => '.nextui-collapse-icon';

const MemoCollapseIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(CollapseIcon);
/* harmony default export */ const collapse_icon = (MemoCollapseIcon);
;// CONCATENATED MODULE: ./src/utils/expand.tsx
var expand_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/utils/expand.tsx";





const expand_defaultProps = {
  isExpanded: false,
  animated: true,
  delay: 200
};
const StyledExpand = styled('div', {
  p: 0,
  m: 0,
  h: 0,
  opacity: 0,
  overflow: 'hidden',
  variants: {
    expanded: {
      true: {
        opacity: 1
      }
    }
  }
});

const Expand = ({
  isExpanded,
  delay,
  animated,
  css,
  children
}) => {
  const [height, setHeight] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isExpanded ? 'auto' : '0');
  const [selfExpanded, setSelfExpanded] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(isExpanded);
  const contentRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const entryTimer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const leaveTimer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const resetTimer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const [state, updateShape] = src_use_real_shape(contentRef);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => setHeight(`${state.height}px`), [state.height]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isExpanded === selfExpanded) return; // show element or reset height.
    // force an update once manually, even if the element does not change.
    // (the height of the element might be "auto")

    if (!isExpanded) {
      updateShape();
      setHeight(`${state.height}px`);
    } // show expand animation


    entryTimer.current = window.setTimeout(() => {
      setSelfExpanded(isExpanded);
      clearTimeout(entryTimer.current);
    }, 30); // Reset height after animation

    if (isExpanded) {
      resetTimer.current = window.setTimeout(() => {
        setHeight('auto');
        clearTimeout(resetTimer.current);
      }, delay);
    } else {
      leaveTimer.current = window.setTimeout(() => {
        clearTimeout(leaveTimer.current);
      }, delay / 2);
    }

    return () => {
      clearTimeout(entryTimer.current);
      clearTimeout(leaveTimer.current);
      clearTimeout(resetTimer.current);
    };
  }, [isExpanded]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledExpand, {
    expanded: selfExpanded,
    css: {
      height: selfExpanded ? height : '0',
      transition: animated ? `height ${delay}ms ease 0ms,
    opacity ${delay * 1.5}ms ease 0ms;` : 'none',
      ...css
    },
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
      ref: contentRef,
      className: "nextui-expand-content",
      children: children
    }, void 0, false, {
      fileName: expand_jsxFileName,
      lineNumber: 99,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: expand_jsxFileName,
    lineNumber: 88,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ const utils_expand = (with_defaults(Expand, expand_defaultProps));
;// CONCATENATED MODULE: ./src/collapse/collapse-context.ts

const collapse_context_defaultContext = {
  values: []
};
const CollapseContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(collapse_context_defaultContext);
const useCollapseContext = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(CollapseContext);
;// CONCATENATED MODULE: ./node_modules/@react-aria/utils/dist/module.js





function node_modules_react_aria_utils_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $4208ab27be92763a$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($4208ab27be92763a$exports, "useId", () => $4208ab27be92763a$export$f680877a34711e37);
node_modules_react_aria_utils_dist_module_$parcel$export($4208ab27be92763a$exports, "mergeIds", () => $4208ab27be92763a$export$cd8c9cb68f842629);
node_modules_react_aria_utils_dist_module_$parcel$export($4208ab27be92763a$exports, "useSlotId", () => $4208ab27be92763a$export$b4cc09c592e8fdb8);
var $62918828a5c4cefe$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($62918828a5c4cefe$exports, "useLayoutEffect", () => $62918828a5c4cefe$export$e5c5a5f917a5871c);
const $62918828a5c4cefe$export$e5c5a5f917a5871c = typeof window !== 'undefined' ? (external_root_React_commonjs2_react_commonjs_react_amd_react_default()).useLayoutEffect : () => {};
let $4208ab27be92763a$var$idsUpdaterMap = new Map();

function $4208ab27be92763a$export$f680877a34711e37(defaultId) {
  let isRendering = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(true);
  isRendering.current = true;
  let [value, setValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultId);
  let nextId = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let res = $9d939cbc98267846$export$619500959fc48b26(value); // don't memo this, we want it new each render so that the Effects always run

  let updateValue = val => {
    if (!isRendering.current) setValue(val);else nextId.current = val;
  };

  $4208ab27be92763a$var$idsUpdaterMap.set(res, updateValue);
  $62918828a5c4cefe$export$e5c5a5f917a5871c(() => {
    isRendering.current = false;
  }, [updateValue]);
  $62918828a5c4cefe$export$e5c5a5f917a5871c(() => {
    let r = res;
    return () => {
      $4208ab27be92763a$var$idsUpdaterMap.delete(r);
    };
  }, [res]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let newId = nextId.current;

    if (newId) {
      setValue(newId);
      nextId.current = null;
    }
  }, [setValue, updateValue]);
  return res;
}

function $4208ab27be92763a$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdA = $4208ab27be92763a$var$idsUpdaterMap.get(idA);

  if (setIdA) {
    setIdA(idB);
    return idB;
  }

  let setIdB = $4208ab27be92763a$var$idsUpdaterMap.get(idB);

  if (setIdB) {
    setIdB(idA);
    return idA;
  }

  return idB;
}

function $4208ab27be92763a$export$b4cc09c592e8fdb8(depArray = []) {
  let id = $4208ab27be92763a$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = $8bfb318ccfa2e412$export$14d238f342723f25(id);
  let updateId = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : null;
    });
  }, [id, setResolvedId]);
  $62918828a5c4cefe$export$e5c5a5f917a5871c(updateId, [id, updateId, ...depArray]);
  return resolvedId;
}

var $2aefb161b9a41928$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($2aefb161b9a41928$exports, "chain", () => $2aefb161b9a41928$export$e08e3b67e392101e);

function $2aefb161b9a41928$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === 'function') callback(...args);
  };
}

var $699afe8e9e0f66de$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($699afe8e9e0f66de$exports, "mergeProps", () => $699afe8e9e0f66de$export$9d1611c77c2fe928);

function $699afe8e9e0f66de$export$9d1611c77c2fe928(...args) {
  // Start with a base clone of the first argument. This is a lot faster than starting
  // with an empty object and adding properties as we go.
  let result = { ...args[0]
  };

  for (let i = 1; i < args.length; i++) {
    let props = args[i];

    for (let key in props) {
      let a = result[key];
      let b = props[key]; // Chain events

      if (typeof a === 'function' && typeof b === 'function' && // This is a lot faster than a regex.
      key[0] === 'o' && key[1] === 'n' && key.charCodeAt(2) >=
      /* 'A' */
      65 && key.charCodeAt(2) <=
      /* 'Z' */
      90) result[key] = $2aefb161b9a41928$export$e08e3b67e392101e(a, b);else if ((key === 'className' || key === 'UNSAFE_className') && typeof a === 'string' && typeof b === 'string') result[key] = clsx_m(a, b);else if (key === 'id' && a && b) result.id = $4208ab27be92763a$export$cd8c9cb68f842629(a, b);else result[key] = b !== undefined ? b : a;
    }
  }

  return result;
}

var $7efcb978e02fb174$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($7efcb978e02fb174$exports, "filterDOMProps", () => $7efcb978e02fb174$export$457c3d6518dd4c6f);
const $7efcb978e02fb174$var$DOMPropNames = new Set(['id']);
const $7efcb978e02fb174$var$labelablePropNames = new Set(['aria-label', 'aria-labelledby', 'aria-describedby', 'aria-details']);
const $7efcb978e02fb174$var$propRe = /^(data-.*)$/;

function $7efcb978e02fb174$export$457c3d6518dd4c6f(props, opts = {}) {
  let {
    labelable: labelable,
    propNames: propNames
  } = opts;
  let filteredProps = {};

  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && ($7efcb978e02fb174$var$DOMPropNames.has(prop) || labelable && $7efcb978e02fb174$var$labelablePropNames.has(prop) || propNames?.has(prop) || $7efcb978e02fb174$var$propRe.test(prop))) filteredProps[prop] = props[prop];

  return filteredProps;
}

var $0172e2a3384c2851$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($0172e2a3384c2851$exports, "focusWithoutScrolling", () => $0172e2a3384c2851$export$de79e2c695e052f3);

function $0172e2a3384c2851$export$de79e2c695e052f3(element) {
  if ($0172e2a3384c2851$var$supportsPreventScroll()) element.focus({
    preventScroll: true
  });else {
    let scrollableElements = $0172e2a3384c2851$var$getScrollableElements(element);
    element.focus();
    $0172e2a3384c2851$var$restoreScrollPosition(scrollableElements);
  }
}

let $0172e2a3384c2851$var$supportsPreventScrollCached = null;

function $0172e2a3384c2851$var$supportsPreventScroll() {
  if ($0172e2a3384c2851$var$supportsPreventScrollCached == null) {
    $0172e2a3384c2851$var$supportsPreventScrollCached = false;

    try {
      var focusElem = document.createElement('div');
      focusElem.focus({
        get preventScroll() {
          $0172e2a3384c2851$var$supportsPreventScrollCached = true;
          return true;
        }

      });
    } catch (e) {// Ignore
    }
  }

  return $0172e2a3384c2851$var$supportsPreventScrollCached;
}

function $0172e2a3384c2851$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;

  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }

  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}

function $0172e2a3384c2851$var$restoreScrollPosition(scrollableElements) {
  for (let {
    element: element,
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}

var $5062b1512bdf762b$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($5062b1512bdf762b$exports, "getOffset", () => $5062b1512bdf762b$export$622cea445a1c5b7d);

function $5062b1512bdf762b$export$622cea445a1c5b7d(element, reverse, orientation = 'horizontal') {
  let rect = element.getBoundingClientRect();
  if (reverse) return orientation === 'horizontal' ? rect.right : rect.bottom;
  return orientation === 'horizontal' ? rect.left : rect.top;
}

var $5cdbf4ddafd135bc$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($5cdbf4ddafd135bc$exports, "clamp", () => $48d9f1d165180307$export$7d15b64cf5a3a4c4);
node_modules_react_aria_utils_dist_module_$parcel$export($5cdbf4ddafd135bc$exports, "snapValueToStep", () => $48d9f1d165180307$export$cb6e0bb50bc19463);
var $fdecdd2f4116564c$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($fdecdd2f4116564c$exports, "runAfterTransition", () => $fdecdd2f4116564c$export$24490316f764c430);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// We store a global list of elements that are currently transitioning,
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.

let $fdecdd2f4116564c$var$transitionsByElement = new Map(); // A list of callbacks to call once there are no transitioning elements.

let $fdecdd2f4116564c$var$transitionCallbacks = new Set();

function $fdecdd2f4116564c$var$setupGlobalEvents() {
  if (typeof window === 'undefined') return;

  let onTransitionStart = e => {
    // Add the transitioning property to the list for this element.
    let transitions = $fdecdd2f4116564c$var$transitionsByElement.get(e.target);

    if (!transitions) {
      transitions = new Set();
      $fdecdd2f4116564c$var$transitionsByElement.set(e.target, transitions); // The transitioncancel event must be registered on the element itself, rather than as a global
      // event. This enables us to handle when the node is deleted from the document while it is transitioning.
      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.

      e.target.addEventListener('transitioncancel', onTransitionEnd);
    }

    transitions.add(e.propertyName);
  };

  let onTransitionEnd = e => {
    // Remove property from list of transitioning properties.
    let properties = $fdecdd2f4116564c$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName); // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.

    if (properties.size === 0) {
      e.target.removeEventListener('transitioncancel', onTransitionEnd);
      $fdecdd2f4116564c$var$transitionsByElement.delete(e.target);
    } // If no transitioning elements, call all of the queued callbacks.


    if ($fdecdd2f4116564c$var$transitionsByElement.size === 0) {
      for (let cb of $fdecdd2f4116564c$var$transitionCallbacks) cb();

      $fdecdd2f4116564c$var$transitionCallbacks.clear();
    }
  };

  document.body.addEventListener('transitionrun', onTransitionStart);
  document.body.addEventListener('transitionend', onTransitionEnd);
}

if (typeof document !== 'undefined') {
  if (document.readyState !== 'loading') $fdecdd2f4116564c$var$setupGlobalEvents();else document.addEventListener('DOMContentLoaded', $fdecdd2f4116564c$var$setupGlobalEvents);
}

function $fdecdd2f4116564c$export$24490316f764c430(fn) {
  // Wait one frame to see if an animation starts, e.g. a transition on mount.
  requestAnimationFrame(() => {
    // If no transitions are running, call the function immediately.
    // Otherwise, add it to a list of callbacks to run at the end of the animation.
    if ($fdecdd2f4116564c$var$transitionsByElement.size === 0) fn();else $fdecdd2f4116564c$var$transitionCallbacks.add(fn);
  });
}

var $95a0e07fe544f4e9$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($95a0e07fe544f4e9$exports, "useDrag1D", () => $95a0e07fe544f4e9$export$7bbed75feba39706); // Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.

const $95a0e07fe544f4e9$var$draggingElements = [];

function $95a0e07fe544f4e9$export$7bbed75feba39706(props) {
  console.warn('useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html');
  let {
    containerRef: containerRef,
    reverse: reverse,
    orientation: orientation,
    onHover: onHover,
    onDrag: onDrag,
    onPositionChange: onPositionChange,
    onIncrement: onIncrement,
    onDecrement: onDecrement,
    onIncrementToMax: onIncrementToMax,
    onDecrementToMin: onDecrementToMin,
    onCollapseToggle: onCollapseToggle
  } = props;

  let getPosition = e => orientation === 'horizontal' ? e.clientX : e.clientY;

  let getNextOffset = e => {
    let containerOffset = $5062b1512bdf762b$export$622cea445a1c5b7d(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };

  let dragging = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(false);
  let prevPosition = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(0); // Keep track of the current handlers in a ref so that the events can access them.

  let handlers = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    onPositionChange: onPositionChange,
    onDrag: onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;

  let onMouseDragged = e => {
    e.preventDefault();
    let nextOffset = getNextOffset(e);

    if (!dragging.current) {
      dragging.current = true;
      if (handlers.current.onDrag) handlers.current.onDrag(true);
      if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    }

    if (prevPosition.current === nextOffset) return;
    prevPosition.current = nextOffset;
    if (onPositionChange) onPositionChange(nextOffset);
  };

  let onMouseUp = e => {
    const target = e.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e);
    if (handlers.current.onDrag) handlers.current.onDrag(false);
    if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    $95a0e07fe544f4e9$var$draggingElements.splice($95a0e07fe544f4e9$var$draggingElements.indexOf(target), 1);
    window.removeEventListener('mouseup', onMouseUp, false);
    window.removeEventListener('mousemove', onMouseDragged, false);
  };

  let onMouseDown = e => {
    const target = e.currentTarget; // If we're already handling dragging on a descendant with useDrag1D, then
    // we don't want to handle the drag motion on this target as well.

    if ($95a0e07fe544f4e9$var$draggingElements.some(elt => target.contains(elt))) return;
    $95a0e07fe544f4e9$var$draggingElements.push(target);
    window.addEventListener('mousemove', onMouseDragged, false);
    window.addEventListener('mouseup', onMouseUp, false);
  };

  let onMouseEnter = () => {
    if (onHover) onHover(true);
  };

  let onMouseOut = () => {
    if (onHover) onHover(false);
  };

  let onKeyDown = e => {
    switch (e.key) {
      case 'Left':
      case 'ArrowLeft':
        if (orientation === 'horizontal') {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }

        break;

      case 'Up':
      case 'ArrowUp':
        if (orientation === 'vertical') {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }

        break;

      case 'Right':
      case 'ArrowRight':
        if (orientation === 'horizontal') {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }

        break;

      case 'Down':
      case 'ArrowDown':
        if (orientation === 'vertical') {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }

        break;

      case 'Home':
        e.preventDefault();
        if (onDecrementToMin) onDecrementToMin();
        break;

      case 'End':
        e.preventDefault();
        if (onIncrementToMax) onIncrementToMax();
        break;

      case 'Enter':
        e.preventDefault();
        if (onCollapseToggle) onCollapseToggle();
        break;
    }
  };

  return {
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseOut: onMouseOut,
    onKeyDown: onKeyDown
  };
}

var $042598a43c3fee40$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($042598a43c3fee40$exports, "useGlobalListeners", () => $042598a43c3fee40$export$4eaf04e54aa8eed6);

function $042598a43c3fee40$export$4eaf04e54aa8eed6() {
  let globalListeners = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(new Map());
  let addGlobalListener = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((eventTarget, type, listener, options) => {
    // Make sure we remove the listener after it is called with the `once` option.
    let fn = options?.once ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type: type,
      eventTarget: eventTarget,
      fn: fn,
      options: options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((eventTarget, type, listener, options) => {
    let fn = globalListeners.current.get(listener)?.fn || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [removeGlobalListener]); // eslint-disable-next-line arrow-body-style

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return removeAllGlobalListeners;
  }, [removeAllGlobalListeners]);
  return {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  };
}

var $2ab91c20d1fbac23$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($2ab91c20d1fbac23$exports, "useLabels", () => $2ab91c20d1fbac23$export$d6875122194c7b44);

function $2ab91c20d1fbac23$export$d6875122194c7b44(props, defaultLabel) {
  let {
    id: id,
    'aria-label': label,
    'aria-labelledby': labelledBy
  } = props; // If there is both an aria-label and aria-labelledby,
  // combine them by pointing to the element itself.

  id = $4208ab27be92763a$export$f680877a34711e37(id);

  if (labelledBy && label) {
    let ids = new Set([...labelledBy.trim().split(/\s+/), id]);
    labelledBy = [...ids].join(' ');
  } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(' '); // If no labels are provided, use the default


  if (!label && !labelledBy && defaultLabel) label = defaultLabel;
  return {
    id: id,
    'aria-label': label,
    'aria-labelledby': labelledBy
  };
}

var $1ea3613dec903cb9$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($1ea3613dec903cb9$exports, "useObjectRef", () => $1ea3613dec903cb9$export$4338b53315abf666);

function $1ea3613dec903cb9$export$4338b53315abf666(forwardedRef) {
  const objRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  /**
  * We're using `useLayoutEffect` here instead of `useEffect` because we want
  * to make sure that the `ref` value is up to date before other places in the
  * the execution cycle try to read it.
  */

  $62918828a5c4cefe$export$e5c5a5f917a5871c(() => {
    if (!forwardedRef) return;
    if (typeof forwardedRef === 'function') forwardedRef(objRef.current);else forwardedRef.current = objRef.current;
  }, [forwardedRef]);
  return objRef;
}

var $d3ab8ae13db3a1fd$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($d3ab8ae13db3a1fd$exports, "useUpdateEffect", () => $d3ab8ae13db3a1fd$export$496315a1608d9602);

function $d3ab8ae13db3a1fd$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(true);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isInitialMount.current) isInitialMount.current = false;else effect(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencies);
}

var $f3e728a941364b05$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($f3e728a941364b05$exports, "useResizeObserver", () => $f3e728a941364b05$export$683480f191c0e3ea);

function $f3e728a941364b05$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== 'undefined';
}

function $f3e728a941364b05$export$683480f191c0e3ea(options) {
  const {
    ref: ref,
    onResize: onResize
  } = options;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let element = ref?.current;
    if (!element) return;

    if (!$f3e728a941364b05$var$hasResizeObserver()) {
      window.addEventListener('resize', onResize, false);
      return () => {
        window.removeEventListener('resize', onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver(entries => {
        if (!entries.length) return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element) resizeObserverInstance.unobserve(element);
      };
    }
  }, [onResize, ref]);
}

var $518b8f251641d71b$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($518b8f251641d71b$exports, "useSyncRef", () => $518b8f251641d71b$export$4debdb1a3f0fa79e);

function $518b8f251641d71b$export$4debdb1a3f0fa79e(context, ref) {
  $62918828a5c4cefe$export$e5c5a5f917a5871c(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [context, ref]);
}

var $2fe8625dffd76a00$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($2fe8625dffd76a00$exports, "getScrollParent", () => $2fe8625dffd76a00$export$cfa2225e87938781);

function $2fe8625dffd76a00$export$cfa2225e87938781(node) {
  while (node && !$2fe8625dffd76a00$var$isScrollable(node)) node = node.parentElement;

  return node || document.scrollingElement || document.documentElement;
}

function $2fe8625dffd76a00$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}

var $c5fe598a15f005e5$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($c5fe598a15f005e5$exports, "useViewportSize", () => $c5fe598a15f005e5$export$d699905dd57c73ca); // @ts-ignore

let $c5fe598a15f005e5$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;

function $c5fe598a15f005e5$export$d699905dd57c73ca() {
  let [size1, setSize] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(() => $c5fe598a15f005e5$var$getViewportSize());
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    // Use visualViewport api to track available height even on iOS virtual keyboard opening
    let onResize = () => {
      setSize(size => {
        let newSize = $c5fe598a15f005e5$var$getViewportSize();
        if (newSize.width === size.width && newSize.height === size.height) return size;
        return newSize;
      });
    };

    if (!$c5fe598a15f005e5$var$visualViewport) window.addEventListener('resize', onResize);else $c5fe598a15f005e5$var$visualViewport.addEventListener('resize', onResize);
    return () => {
      if (!$c5fe598a15f005e5$var$visualViewport) window.removeEventListener('resize', onResize);else $c5fe598a15f005e5$var$visualViewport.removeEventListener('resize', onResize);
    };
  }, []);
  return size1;
}

function $c5fe598a15f005e5$var$getViewportSize() {
  return {
    width: $c5fe598a15f005e5$var$visualViewport?.width || window.innerWidth,
    height: $c5fe598a15f005e5$var$visualViewport?.height || window.innerHeight
  };
}

var $5475261706737633$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($5475261706737633$exports, "useDescription", () => $5475261706737633$export$f8aeda7b10753fa1);
let $5475261706737633$var$descriptionId = 0;
const $5475261706737633$var$descriptionNodes = new Map();

function $5475261706737633$export$f8aeda7b10753fa1(description) {
  let [id1, setId] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(null);
  $62918828a5c4cefe$export$e5c5a5f917a5871c(() => {
    if (!description) return;
    let desc = $5475261706737633$var$descriptionNodes.get(description);

    if (!desc) {
      let id = `react-aria-description-${$5475261706737633$var$descriptionId++}`;
      setId(id);
      let node = document.createElement('div');
      node.id = id;
      node.style.display = 'none';
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      $5475261706737633$var$descriptionNodes.set(description, desc);
    } else setId(desc.element.id);

    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        $5475261706737633$var$descriptionNodes.delete(description);
      }
    };
  }, [description]);
  return {
    'aria-describedby': description ? id1 : undefined
  };
}

var $43a0edf5ccd884bb$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($43a0edf5ccd884bb$exports, "isMac", () => $43a0edf5ccd884bb$export$9ac100e40613ea10);
node_modules_react_aria_utils_dist_module_$parcel$export($43a0edf5ccd884bb$exports, "isIPhone", () => $43a0edf5ccd884bb$export$186c6964ca17d99);
node_modules_react_aria_utils_dist_module_$parcel$export($43a0edf5ccd884bb$exports, "isIPad", () => $43a0edf5ccd884bb$export$7bef049ce92e4224);
node_modules_react_aria_utils_dist_module_$parcel$export($43a0edf5ccd884bb$exports, "isIOS", () => $43a0edf5ccd884bb$export$fedb369cb70207f1);
node_modules_react_aria_utils_dist_module_$parcel$export($43a0edf5ccd884bb$exports, "isAppleDevice", () => $43a0edf5ccd884bb$export$e1865c3bedcd822b);
node_modules_react_aria_utils_dist_module_$parcel$export($43a0edf5ccd884bb$exports, "isWebKit", () => $43a0edf5ccd884bb$export$78551043582a6a98);
node_modules_react_aria_utils_dist_module_$parcel$export($43a0edf5ccd884bb$exports, "isChrome", () => $43a0edf5ccd884bb$export$6446a186d09e379e);
node_modules_react_aria_utils_dist_module_$parcel$export($43a0edf5ccd884bb$exports, "isAndroid", () => $43a0edf5ccd884bb$export$a11b0059900ceec8);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function $43a0edf5ccd884bb$var$testUserAgent(re) {
  return typeof window !== 'undefined' && window.navigator != null ? re.test(window.navigator.userAgent) : false;
}

function $43a0edf5ccd884bb$var$testPlatform(re) {
  return typeof window !== 'undefined' && window.navigator != null ? re.test(window.navigator.platform) : false;
}

function $43a0edf5ccd884bb$export$9ac100e40613ea10() {
  return $43a0edf5ccd884bb$var$testPlatform(/^Mac/);
}

function $43a0edf5ccd884bb$export$186c6964ca17d99() {
  return $43a0edf5ccd884bb$var$testPlatform(/^iPhone/);
}

function $43a0edf5ccd884bb$export$7bef049ce92e4224() {
  return $43a0edf5ccd884bb$var$testPlatform(/^iPad/) || $43a0edf5ccd884bb$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}

function $43a0edf5ccd884bb$export$fedb369cb70207f1() {
  return $43a0edf5ccd884bb$export$186c6964ca17d99() || $43a0edf5ccd884bb$export$7bef049ce92e4224();
}

function $43a0edf5ccd884bb$export$e1865c3bedcd822b() {
  return $43a0edf5ccd884bb$export$9ac100e40613ea10() || $43a0edf5ccd884bb$export$fedb369cb70207f1();
}

function $43a0edf5ccd884bb$export$78551043582a6a98() {
  return $43a0edf5ccd884bb$var$testUserAgent(/AppleWebKit/) && !$43a0edf5ccd884bb$export$6446a186d09e379e();
}

function $43a0edf5ccd884bb$export$6446a186d09e379e() {
  return $43a0edf5ccd884bb$var$testUserAgent(/Chrome/);
}

function $43a0edf5ccd884bb$export$a11b0059900ceec8() {
  return $43a0edf5ccd884bb$var$testUserAgent(/Android/);
}

var $6f85328eaea47571$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($6f85328eaea47571$exports, "useEvent", () => $6f85328eaea47571$export$90fc3a17d93f704c);

function $6f85328eaea47571$export$90fc3a17d93f704c(ref, event, handler1, options) {
  let handlerRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(handler1);
  handlerRef.current = handler1;
  let isDisabled = handler1 == null;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isDisabled) return;
    let element = ref.current;

    let handler = e => handlerRef.current.call(this, e);

    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [ref, event, options, isDisabled]);
}

var $8bfb318ccfa2e412$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($8bfb318ccfa2e412$exports, "useValueEffect", () => $8bfb318ccfa2e412$export$14d238f342723f25);

function $8bfb318ccfa2e412$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultValue);
  let valueRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(value);
  let effect = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  valueRef.current = value; // Store the function in a ref so we can always access the current version
  // which has the proper `value` in scope.

  let nextRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);

  nextRef.current = () => {
    // Run the generator to the next yield.
    let newValue = effect.current.next(); // If the generator is done, reset the effect.

    if (newValue.done) {
      effect.current = null;
      return;
    } // If the value is the same as the current value,
    // then continue to the next yield. Otherwise,
    // set the value in state and wait for the next layout effect.


    if (value === newValue.value) nextRef.current();else setValue(newValue.value);
  };

  $62918828a5c4cefe$export$e5c5a5f917a5871c(() => {
    // If there is an effect currently running, continue to the next yield.
    if (effect.current) nextRef.current();
  });
  let queue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(fn => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [effect, nextRef]);
  return [value, queue];
}

var $7b1a72e750057d55$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export($7b1a72e750057d55$exports, "scrollIntoView", () => $7b1a72e750057d55$export$53a0910f038337bd);

function $7b1a72e750057d55$export$53a0910f038337bd(scrollView, element) {
  let offsetX = $7b1a72e750057d55$var$relativeOffset(scrollView, element, 'left');
  let offsetY = $7b1a72e750057d55$var$relativeOffset(scrollView, element, 'top');
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let maxX = x + scrollView.offsetWidth;
  let maxY = y + scrollView.offsetHeight;
  if (offsetX <= x) x = offsetX;else if (offsetX + width > maxX) x += offsetX + width - maxX;
  if (offsetY <= y) y = offsetY;else if (offsetY + height > maxY) y += offsetY + height - maxY;
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */


function $7b1a72e750057d55$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';
  let sum = 0;

  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) break;else if (child.offsetParent.contains(ancestor)) {
      // If the ancestor is not `position:relative`, then we stop at
      // _its_ offset parent, and we subtract off _its_ offset, so that
      // we end up with the proper offset from child to ancestor.
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }

  return sum;
}


;// CONCATENATED MODULE: ./src/collapse/collapse.tsx
var collapse_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/collapse/collapse.tsx";














const collapse_defaultProps = {
  shadow: false,
  divider: true,
  bordered: false,
  showArrow: true,
  animated: true,
  disabled: false,
  preventDefault: true,
  expanded: false
};
const preClass = 'nextui-collapse';

const Collapse = ({
  children,
  title,
  subtitle,
  expanded,
  shadow,
  className,
  divider,
  arrowIcon,
  showArrow,
  disabled,
  onChange,
  bordered,
  contentLeft,
  preventDefault,
  animated: animatedProp,
  borderWeight,
  index,
  ...props
}) => {
  const [visible, setVisible, visibleRef] = src_use_current_state(expanded);
  const {
    isDark
  } = src_use_theme();
  const {
    values,
    divider: groupDivider,
    animated: groupAnimated,
    updateValues
  } = useCollapseContext();
  const {
    isFocusVisible,
    focusProps
  } = $e974583017b16a4e$export$4e328f61c538687f();

  if (!title) {
    src_use_warning('"title" is required.', 'Collapse');
  }

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (visible !== expanded) {
      setVisible(expanded);
    }
  }, [expanded]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!values.length) return;
    const isActive = !!values.find(item => item === index);
    setVisible(isActive);
  }, [values.join(',')]);
  const ariaLabelledById = $4208ab27be92763a$export$f680877a34711e37();
  const ariaControlId = $4208ab27be92763a$export$f680877a34711e37();
  const arrowComponent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!showArrow) return null;
    return arrowIcon ? arrowIcon : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(collapse_icon, {}, void 0, false, {
      fileName: collapse_jsxFileName,
      lineNumber: 127,
      columnNumber: 36
    }, undefined);
  }, [arrowIcon, showArrow]);
  const withDivider = groupDivider === undefined ? divider : groupDivider;
  const animated = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return groupAnimated === undefined ? animatedProp : groupAnimated;
  }, [groupAnimated, animatedProp]);

  const handleChange = event => {
    if (disabled) return;
    const next = !visibleRef.current;
    setVisible(next);
    updateValues && updateValues(index, next);
    onChange && onChange(event, index, next);
  };

  const {
    bindings
  } = src_use_keyboard(event => {
    handleChange(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapse, {
    tabIndex: -1,
    shadow: shadow,
    bordered: bordered,
    animated: animated,
    divider: withDivider,
    borderWeight: borderWeight,
    visible: visible,
    "data-state": getState,
    className: clsx(className, preClass, `${preClass}--${getState}`),
    isDark: isDark,
    ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseView, {
      role: "button",
      tabIndex: disabled ? -1 : 0,
      id: ariaLabelledById,
      className: `${preClass}-view`,
      "data-state": getState,
      disabled: disabled,
      "aria-disabled": disabled,
      "aria-expanded": visible,
      "aria-controls": ariaControlId,
      isFocusVisible: isFocusVisible,
      onClick: handleChange,
      ...focusProps,
      ...bindings,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
        className: clsx(`${preClass}-title-container`),
        children: [contentLeft && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
          className: `${preClass}-title-content-left`,
          children: contentLeft
        }, void 0, false, {
          fileName: collapse_jsxFileName,
          lineNumber: 192,
          columnNumber: 13
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
          className: `${preClass}-title-content`,
          children: [/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(title) ? title : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("h3", {
            className: `${preClass}-title`,
            children: title
          }, void 0, false, {
            fileName: collapse_jsxFileName,
            lineNumber: 200,
            columnNumber: 15
          }, undefined), subtitle && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
            className: `${preClass}-subtitle`,
            children: subtitle
          }, void 0, false, {
            fileName: collapse_jsxFileName,
            lineNumber: 203,
            columnNumber: 15
          }, undefined)]
        }, void 0, true, {
          fileName: collapse_jsxFileName,
          lineNumber: 196,
          columnNumber: 11
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("div", {
          className: `${preClass}-title-content-right`,
          children: arrowComponent
        }, void 0, false, {
          fileName: collapse_jsxFileName,
          lineNumber: 206,
          columnNumber: 11
        }, undefined)]
      }, void 0, true, {
        fileName: collapse_jsxFileName,
        lineNumber: 190,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: collapse_jsxFileName,
      lineNumber: 175,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(utils_expand, {
      isExpanded: visible,
      animated: animated,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseContent, {
        role: "region",
        tabIndex: -1,
        id: ariaControlId,
        "aria-labelledby": ariaLabelledById,
        className: `${preClass}-content`,
        children: children
      }, void 0, false, {
        fileName: collapse_jsxFileName,
        lineNumber: 212,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: collapse_jsxFileName,
      lineNumber: 211,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: collapse_jsxFileName,
    lineNumber: 162,
    columnNumber: 5
  }, undefined);
};

Collapse.toString = () => '.nextui-collapse';

/* harmony default export */ const collapse = (with_defaults(Collapse, collapse_defaultProps));
;// CONCATENATED MODULE: ./src/collapse/collapse-group.tsx
var collapse_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/collapse/collapse-group.tsx";









const collapse_group_defaultProps = {
  accordion: true
};

const CollapseGroup = ({
  children,
  accordion,
  animated,
  divider,
  onChange,
  ...props
}) => {
  const [state, setState, stateRef] = src_use_current_state([]);
  const {
    isDark
  } = src_use_theme();

  const updateValues = (currentIndex, nextState) => {
    const hasChild = stateRef.current.find(val => val === currentIndex);
    onChange && onChange(currentIndex, nextState);

    if (accordion) {
      if (nextState) return setState([currentIndex]);
      return setState([]);
    }

    if (nextState) {
      // In a few cases, the user will set Collapse Component state manually.
      // If the user incorrectly set the state, Group component should ignore it.

      /* istanbul ignore if */
      if (hasChild) return;
      return setState([...stateRef.current, currentIndex]);
    }

    setState(stateRef.current.filter(item => item !== currentIndex));
  };

  const initialValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    values: state,
    updateValues,
    divider,
    animated
  }), [state.join(',')]);
  const hasIndexChildren = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => setChildrenIndex(children, [collapse]), [children]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(CollapseContext.Provider, {
    value: initialValue,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledCollapseGroup, {
      isDark: isDark,
      ...props,
      children: hasIndexChildren
    }, void 0, false, {
      fileName: collapse_group_jsxFileName,
      lineNumber: 79,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: collapse_group_jsxFileName,
    lineNumber: 78,
    columnNumber: 5
  }, undefined);
};

CollapseGroup.toString = () => '.nextui-collapse-group';

/* harmony default export */ const collapse_group = (with_defaults(CollapseGroup, collapse_group_defaultProps));
;// CONCATENATED MODULE: ./src/collapse/index.ts


collapse.Group = collapse_group; // export styled components


/* harmony default export */ const src_collapse = (collapse);
;// CONCATENATED MODULE: ./src/container/container.styles.ts

const StyledContainer = styled('div', {
  w: '100%',
  mr: 'auto',
  ml: 'auto',
  variants: {
    fluid: {
      true: {
        maxWidth: '100%'
      }
    },
    responsive: {
      true: {
        '@xs': {
          maxWidth: '$breakpoints$xs'
        },
        '@sm': {
          maxWidth: '$breakpoints$sm'
        },
        '@md': {
          maxWidth: '$breakpoints$md'
        },
        '@lg': {
          maxWidth: '$breakpoints$lg'
        },
        '@xl': {
          maxWidth: '$breakpoints$xl'
        }
      }
    }
  },
  defaultVariants: {
    fluid: false,
    responsive: true
  }
});
/* harmony default export */ const container_styles = (StyledContainer);
;// CONCATENATED MODULE: ./src/container/container.tsx
var container_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/container/container.tsx";



const container_defaultProps = {
  gap: 2,
  xs: false,
  sm: false,
  md: false,
  lg: false,
  xl: false,
  responsive: true,
  fluid: false,
  wrap: 'wrap',
  as: 'div',
  display: 'block'
};

const Container = ({
  xs,
  sm,
  md,
  lg,
  xl,
  wrap,
  gap,
  as,
  display,
  justify,
  direction,
  alignItems,
  alignContent,
  children,
  responsive,
  fluid,
  css,
  ...props
}) => {
  const gapUnit = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return `calc(${gap} * $space$sm)`;
  }, [gap]);

  const getMaxWidth = () => {
    if (xs) return '$breakpoints$xs';
    if (sm) return '$breakpoints$sm';
    if (md) return '$breakpoints$md';
    if (lg) return '$breakpoints$lg';
    if (xl) return '$breakpoints$xl';
    return '';
  };

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(container_styles, {
    css: {
      px: gapUnit,
      maxWidth: getMaxWidth(),
      alignItems,
      alignContent,
      flexWrap: wrap,
      display: display,
      justifyContent: justify,
      flexDirection: direction,
      ...css
    },
    responsive: responsive,
    fluid: fluid,
    ...props,
    children: children
  }, void 0, false, {
    fileName: container_jsxFileName,
    lineNumber: 84,
    columnNumber: 5
  }, undefined);
};

Container.toString = () => '.nextui-container';

Container.defaultProps = container_defaultProps;
/* harmony default export */ const container = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Container));
;// CONCATENATED MODULE: ./src/container/index.ts


/* harmony default export */ const src_container = (container);
;// CONCATENATED MODULE: ./src/utils/dimensions.ts
const getMargin = num => {
  return `calc(${num * 15.25}pt + 1px * ${num - 1})`;
};
;// CONCATENATED MODULE: ./src/divider/divider.styles.ts

const StyledDivider = styled('div', {
  width: '100%',
  maxWidth: '100%',
  position: 'relative',
  variants: {
    color: {
      default: {
        bg: '$border'
      },
      primary: {
        bg: '$primary'
      },
      secondary: {
        bg: '$secondary'
      },
      success: {
        bg: '$success'
      },
      warning: {
        bg: '$warning'
      },
      error: {
        bg: '$error'
      }
    }
  },
  defaultVariants: {
    color: 'default'
  }
});
const StyledDividerText = styled('span', {
  position: 'absolute',
  left: '50%',
  top: '50%',
  minHeight: '100%',
  display: 'inline-flex',
  jc: 'center',
  ai: 'center',
  transform: 'translate(-50%, -50%)',
  padding: '0 $lg',
  fontSize: '$base',
  fontWeight: 'bold',
  textTransform: 'capitalize',
  backgroundColor: '$background',
  zIndex: '$1',
  variants: {
    color: {
      default: {
        color: '$text'
      },
      primary: {
        color: '$primary'
      },
      secondary: {
        color: '$secondary'
      },
      success: {
        color: '$success'
      },
      warning: {
        color: '$warning'
      },
      error: {
        color: '$error'
      }
    }
  }
});
;// CONCATENATED MODULE: ./src/divider/divider.tsx
var divider_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/divider/divider.tsx";





const divider_defaultProps = {
  x: 0,
  y: 0,
  height: 1,
  align: 'center'
};

const Divider = ({
  height,
  x,
  y,
  align,
  children,
  textColor,
  css,
  ...props
}) => {
  const alignCss = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!align || align === 'center') return '';

    if (align === 'left' || align === 'start') {
      return {
        transform: 'translateY(-50%)',
        left: '7%'
      };
    }

    return {
      transform: 'translateY(-50%)',
      left: 'auto',
      right: '7%'
    };
  }, [align]);
  const top = y ? getMargin(y / 2) : 0;
  const left = x ? getMargin(x / 2) : 0;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDivider, {
    role: "separator",
    css: {
      margin: `${top} ${left}`,
      height: `calc(${height} * 1px)`,
      ...css
    },
    ...props,
    children: children && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledDividerText, {
      css: { ...alignCss
      },
      color: textColor,
      className: "nextui-divider-text",
      children: children
    }, void 0, false, {
      fileName: divider_jsxFileName,
      lineNumber: 68,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: divider_jsxFileName,
    lineNumber: 58,
    columnNumber: 5
  }, undefined);
};

Divider.toString = () => '.nextui-divider';

const MemoDivider = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Divider);
/* harmony default export */ const divider = (with_defaults(MemoDivider, divider_defaultProps));
;// CONCATENATED MODULE: ./src/divider/index.ts


/* harmony default export */ const src_divider = (divider);
;// CONCATENATED MODULE: ./src/grid/grid.styles.ts

const StyledGridContainer = styled('div', {});
const StyledGridItem = styled('div', {
  margin: 0,
  boxSizing: 'border-box',
  padding: '$$gridGapUnit'
});
;// CONCATENATED MODULE: ./src/grid/grid-item.tsx
var grid_item_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/grid/grid-item.tsx";





const grid_item_defaultProps = {
  xs: false,
  sm: false,
  md: false,
  lg: false,
  xl: false,
  className: ''
};

const getItemLayout = val => {
  const display = val === 0 ? 'none' : 'inherit';

  if (typeof val === 'number') {
    const width = 100 / 12 * val;
    const ratio = width > 100 ? '100%' : width < 0 ? '0' : `${width}%`;
    return {
      flexGrow: 0,
      display,
      maxWidth: ratio,
      flexBasis: ratio
    };
  }

  return {
    flexGrow: 1,
    display,
    maxWidth: '100%',
    flexBasis: '0'
  };
};

const GridItem = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  xs,
  sm,
  md,
  lg,
  xl,
  css,
  justify,
  direction,
  alignItems,
  alignContent,
  children,
  className,
  ...props
}, ref) => {
  const classes = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const breaks = {
      xs,
      sm,
      md,
      lg,
      xl
    };
    const classString = Object.keys(breaks).reduce((pre, name) => {
      if (breaks[name] !== undefined && breaks[name] !== false) return `${pre} ${name}`;
      return pre;
    }, '');
    return classString.trim();
  }, [xs, sm, md, lg, xl]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledGridItem, {
    ref: ref,
    className: clsx('nextui-grid-item', classes, className),
    css: {
      alignItems,
      alignContent,
      justifyContent: justify,
      flexDirection: direction,
      '&.xs': { ...getItemLayout(xs)
      },
      '@xsMax': {
        '&.xs': { ...getItemLayout(xs)
        }
      },
      '@sm': {
        '&.sm': { ...getItemLayout(sm)
        }
      },
      '@md': {
        '&.md': { ...getItemLayout(md)
        }
      },
      '@lg': {
        '&.lg': { ...getItemLayout(lg)
        }
      },
      '@xl': {
        '&.xl': { ...getItemLayout(xl)
        }
      },
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: grid_item_jsxFileName,
    lineNumber: 104,
    columnNumber: 7
  }, undefined);
});
GridItem.displayName = 'NextUI - Grid Item';

GridItem.toString = () => '.nextui-grid-item';

/* harmony default export */ const grid_item = (with_defaults(GridItem, grid_item_defaultProps));
;// CONCATENATED MODULE: ./src/grid/grid.tsx
var grid_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/grid/grid.tsx";



const Grid = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children,
  css,
  ...props
}, ref) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(grid_item, {
    ref: ref,
    css: { ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: grid_jsxFileName,
    lineNumber: 12,
    columnNumber: 5
  }, undefined);
});
Grid.displayName = 'NextUI - Grid';

Grid.toString = () => '.nextui-grid';

/* harmony default export */ const grid = (Grid);
;// CONCATENATED MODULE: ./src/grid/grid-container.tsx
var grid_container_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/grid/grid-container.tsx";





const grid_container_defaultProps = {
  gap: 0,
  wrap: 'wrap',
  className: ''
};
const GridContainer = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  gap,
  wrap,
  css,
  children,
  className,
  ...props
}, ref) => {
  const gapUnit = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return `calc(${gap} * $space$3)`;
  }, [gap]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(grid_item, {
    ref: ref,
    className: clsx('nextui-grid-container', className),
    css: {
      $$gridGapUnit: gapUnit,
      display: 'flex',
      flexWrap: wrap,
      boxZizing: 'border-box',
      margin: 'calc(-1 * $$gridGapUnit)',
      width: 'calc(100% + $$gridGapUnit * 2)',
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: grid_container_jsxFileName,
    lineNumber: 34,
    columnNumber: 5
  }, undefined);
});
GridContainer.displayName = 'NextUI - GridContainer';

GridContainer.toString = () => '.nextui-grid-container';

/* harmony default export */ const grid_container = (with_defaults(GridContainer, grid_container_defaultProps));
;// CONCATENATED MODULE: ./src/grid/index.ts



grid.Container = grid_container;
/* harmony default export */ const src_grid = (grid);
;// CONCATENATED MODULE: ./src/spacer/spacer.styles.ts

const StyledSpacer = styled('span', {
  size: '1px',
  variants: {
    inline: {
      true: {
        display: 'inline-block'
      },
      false: {
        display: 'block'
      }
    }
  },
  defaultVariants: {
    inline: false
  }
});
;// CONCATENATED MODULE: ./src/spacer/spacer.tsx
var spacer_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/spacer/spacer.tsx";





const spacer_defaultProps = {
  x: 1,
  y: 1
};

const Spacer = ({
  x,
  y,
  inline,
  css,
  ...props
}) => {
  const marginLeft = getMargin(x);
  const marginTop = getMargin(y);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpacer, {
    css: {
      marginLeft: `${marginLeft} !important`,
      marginTop: `${marginTop} !important`,
      ...css
    },
    "aria-hidden": "true",
    ...props
  }, void 0, false, {
    fileName: spacer_jsxFileName,
    lineNumber: 30,
    columnNumber: 5
  }, undefined);
};

Spacer.toString = () => '.nextui-spacer';

const MemoSpacer = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Spacer);
/* harmony default export */ const spacer = (with_defaults(MemoSpacer, spacer_defaultProps));
;// CONCATENATED MODULE: ./src/spacer/index.ts


/* harmony default export */ const src_spacer = (spacer);
// EXTERNAL MODULE: external {"root":"ReactDOM","commonjs2":"react-dom","commonjs":"react-dom","amd":"react-dom"}
var external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_ = __webpack_require__(156);
var external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default = /*#__PURE__*/__webpack_require__.n(external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_);
;// CONCATENATED MODULE: ./src/utils/css-transition.ts



const css_transition_defaultProps = {
  visible: false,
  enterTime: 60,
  leaveTime: 60,
  clearTime: 60,
  className: '',
  name: 'transition'
};

const CSSTransition = ({
  children,
  className,
  visible,
  enterTime,
  leaveTime,
  clearTime,
  name,
  ...props
}) => {
  const [classes, setClasses] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)('');
  const [renderable, setRenderable] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(visible);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const statusClassName = visible ? 'enter' : 'leave';
    const time = visible ? enterTime : leaveTime;

    if (visible && !renderable) {
      setRenderable(true);
    }

    setClasses(`${name}-${statusClassName}`); // set class to active

    const timer = setTimeout(() => {
      setClasses(`${name}-${statusClassName} ${name}-${statusClassName}-active`);
      clearTimeout(timer);
    }, time); // remove classess when animation over

    const clearClassesTimer = setTimeout(() => {
      if (!visible) {
        setClasses('');
        setRenderable(false);
      }

      clearTimeout(clearClassesTimer);
    }, time + clearTime);
    return () => {
      clearTimeout(timer);
      clearTimeout(clearClassesTimer);
    };
  }, [visible, renderable]);
  if (! /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(children) || !renderable) return null;
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().cloneElement(children, { ...props,
    className: clsx(children.props.className, className, classes)
  });
};

/* harmony default export */ const css_transition = (with_defaults(CSSTransition, css_transition_defaultProps));
;// CONCATENATED MODULE: ./src/tooltip/placement.ts
const defaultRect = {
  top: -1000,
  left: -1000,
  right: -1000,
  bottom: -1000,
  width: 0,
  height: 0
};
const getRect = ref => {
  if (!ref || !ref.current) return defaultRect;
  const rect = ref.current.getBoundingClientRect();
  return { ...rect,
    width: rect.width || rect.right - rect.left,
    height: rect.height || rect.bottom - rect.top,
    top: rect.top + document.documentElement.scrollTop,
    bottom: rect.bottom + document.documentElement.scrollTop,
    left: rect.left + document.documentElement.scrollLeft,
    right: rect.right + document.documentElement.scrollLeft
  };
};
const defaultTooltipPlacement = {
  top: '-1000px',
  left: '-1000px',
  transform: 'none'
};
const getPlacement = (placement, rect, offset) => {
  const placements = {
    top: {
      top: `${rect.top - offset}px`,
      left: `${rect.left + rect.width / 2}px`,
      transform: 'translate(-50%, -100%)'
    },
    topStart: {
      top: `${rect.top - offset}px`,
      left: `${rect.left}px`,
      transform: 'translate(0, -100%)'
    },
    topEnd: {
      top: `${rect.top - offset}px`,
      left: `${rect.left + rect.width}px`,
      transform: 'translate(-100%, -100%)'
    },
    bottom: {
      top: `${rect.bottom + offset}px`,
      left: `${rect.left + rect.width / 2}px`,
      transform: 'translate(-50%, 0)'
    },
    bottomStart: {
      top: `${rect.bottom + offset}px`,
      left: `${rect.left}px`,
      transform: 'translate(0, 0)'
    },
    bottomEnd: {
      top: `${rect.bottom + offset}px`,
      left: `${rect.left + rect.width}px`,
      transform: 'translate(-100%, 0)'
    },
    left: {
      top: `${rect.top + rect.height / 2}px`,
      left: `${rect.left - offset}px`,
      transform: 'translate(-100%, -50%)'
    },
    leftStart: {
      top: `${rect.top}px`,
      left: `${rect.left - offset}px`,
      transform: 'translate(-100%, 0)'
    },
    leftEnd: {
      top: `${rect.top + rect.height}px`,
      left: `${rect.left - offset}px`,
      transform: 'translate(-100%, -100%)'
    },
    right: {
      top: `${rect.top + rect.height / 2}px`,
      left: `${rect.right + offset}px`,
      transform: 'translate(0, -50%)'
    },
    rightStart: {
      top: `${rect.top}px`,
      left: `${rect.right + offset}px`,
      transform: 'translate(0, 0)'
    },
    rightEnd: {
      top: `${rect.top + rect.height}px`,
      left: `${rect.right + offset}px`,
      transform: 'translate(0, -100%)'
    }
  };
  return placements[placement] || placements.top;
};
const getIconPlacement = (placement, offset) => {
  const placements = {
    top: {
      top: 'auto',
      right: 'auto',
      left: '50%',
      bottom: '0px',
      transform: 'translate(-50%, 100%) rotate(45deg)'
    },
    topStart: {
      top: 'auto',
      right: 'auto',
      left: '8%',
      bottom: '0px',
      transform: 'translate(8%, 100%) rotate(45deg)'
    },
    topEnd: {
      top: 'auto',
      right: '8%',
      left: 'auto',
      bottom: '0px',
      transform: 'translate(8%, 100%) rotate(45deg)'
    },
    bottom: {
      top: `0px`,
      right: 'auto',
      left: '50%',
      bottom: 'auto',
      transform: 'translate(-50%, -100%) rotate(225deg)'
    },
    bottomStart: {
      top: `0px`,
      right: 'auto',
      left: '8%',
      bottom: 'auto',
      transform: 'translate(8%, -100%) rotate(225deg)'
    },
    bottomEnd: {
      top: `0px`,
      right: '8%',
      left: 'auto',
      bottom: 'auto',
      transform: 'translate(8%, -100%) rotate(225deg)'
    },
    left: {
      top: '50%',
      right: `-${offset - 1}px`,
      left: 'auto',
      bottom: 'auto',
      transform: 'translate(100%, -50%) rotate(-45deg)'
    },
    leftStart: {
      top: 'calc(15% + 1px)',
      right: `-${offset - 1}px`,
      left: 'auto',
      bottom: 'auto',
      transform: 'translate(100%, 0) rotate(-45deg)'
    },
    leftEnd: {
      top: 'auto',
      right: `-${offset - 1}px`,
      left: 'auto',
      bottom: 'calc(15% + 1px)',
      transform: 'translate(100%, 0) rotate(-45deg)'
    },
    right: {
      top: '50%',
      right: 'auto',
      left: `-${offset - 1}px`,
      bottom: 'auto',
      transform: 'translate(-100%, -50%) rotate(135deg)'
    },
    rightStart: {
      top: 'calc(15% + 1px)',
      right: 'auto',
      left: `-${offset - 1}px`,
      bottom: 'auto',
      transform: 'translate(-100%, 0) rotate(135deg)'
    },
    rightEnd: {
      top: 'auto',
      right: 'auto',
      left: `-${offset - 1}px`,
      bottom: 'calc(15% + 1px)',
      transform: 'translate(-100%, 0) rotate(135deg)'
    }
  };
  return placements[placement] || placements.top;
};
;// CONCATENATED MODULE: ./src/tooltip/tooltip.styles.ts

const StyledTooltipTrigger = styled('div', {
  width: 'max-content',
  display: 'inherit'
});
const StyledTooltipArrow = styled('span', {
  display: 'none',
  content: '',
  size: '$5',
  zIndex: '-2',
  background: '$$tooltipColor',
  br: '0px 0px 2px 0px',
  position: 'absolute'
});
const StyledTooltip = styled('div', {
  position: 'relative',
  fs: '$xs',
  padding: 0,
  variants: {
    hideArrow: {
      false: {
        [`& ${StyledTooltipArrow}`]: {
          display: 'block'
        }
      }
    }
  }
});
const StyledTooltipContent = styled('div', {
  position: 'absolute',
  width: 'auto',
  padding: '$3 $sm',
  opacity: 0,
  zIndex: '$10',
  br: '$lg',
  '@motion': {
    transition: 'none'
  },
  variants: {
    color: {
      default: {
        $$tooltipColor: '$colors$background',
        bg: '$$tooltipColor'
      },
      primary: {
        $$tooltipColor: '$colors$primary',
        bg: '$$tooltipColor'
      },
      secondary: {
        $$tooltipColor: '$colors$secondary',
        bg: '$$tooltipColor'
      },
      success: {
        $$tooltipColor: '$colors$success',
        bg: '$$tooltipColor'
      },
      warning: {
        $$tooltipColor: '$colors$warning',
        bg: '$$tooltipColor'
      },
      error: {
        $$tooltipColor: '$colors$error',
        bg: '$$tooltipColor'
      },
      invert: {
        $$tooltipColor: '$colors$foreground',
        bg: '$$tooltipColor'
      }
    },
    contentColor: {
      default: {
        $$tooltipTextColor: '$colors$text',
        color: '$$tooltipTextColor'
      },
      primary: {
        $$tooltipTextColor: '$colors$primary',
        color: '$$tooltipTextColor'
      },
      secondary: {
        $$tooltipTextColor: '$colors$secondary',
        color: '$$tooltipTextColor'
      },
      success: {
        $$tooltipTextColor: '$colors$success',
        color: '$$tooltipTextColor'
      },
      warning: {
        $$tooltipTextColor: '$colors$warning',
        color: '$$tooltipTextColor'
      },
      error: {
        $$tooltipTextColor: '$colors$error',
        color: '$$tooltipTextColor'
      },
      invert: {
        $$tooltipTextColor: '$colors$invert',
        color: '$$tooltipTextColor'
      }
    },
    rounded: {
      true: {
        br: '$pill'
      }
    },
    shadow: {
      true: {
        bs: '$md'
      }
    },
    animated: {
      true: {
        transition: 'opacity 0.25s ease 0s, top 0.25s ease 0s'
      },
      false: {
        transition: 'none'
      }
    }
  },
  compoundVariants: [// color='primary' && contentColor='default'
  {
    color: 'primary',
    contentColor: 'default',
    css: {
      $$tooltipTextColor: '$colors$white'
    }
  }, // color='secondary' && contentColor='default'
  {
    color: 'secondary',
    contentColor: 'default',
    css: {
      $$tooltipTextColor: '$colors$white'
    }
  }, // color='success' && contentColor='default'
  {
    color: 'success',
    contentColor: 'default',
    css: {
      $$tooltipTextColor: '$colors$white'
    }
  }, // color='error' && contentColor='default'
  {
    color: 'error',
    contentColor: 'default',
    css: {
      $$tooltipTextColor: '$colors$white'
    }
  }, // color='invert' && contentColor='default'
  {
    color: 'invert',
    contentColor: 'default',
    css: {
      $$tooltipTextColor: "$colors$background"
    }
  }],
  defaultVariants: {
    color: 'default',
    contentColor: 'default'
  }
});
;// CONCATENATED MODULE: ./src/tooltip/tooltip-content.tsx
var tooltip_content_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/tooltip/tooltip-content.tsx";











const tooltip_content_defaultProps = {
  placement: 'top',
  offset: 12,
  className: ''
};
const tooltip_content_preClass = 'nextui-tooltip';

const TooltipContent = ({
  children,
  parent,
  visible,
  offset,
  placement,
  rounded,
  animated,
  className,
  hideArrow,
  css,
  ...props
}) => {
  const el = src_use_portal('tooltip');
  const selfRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [rect, setRect] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultTooltipPlacement);
  if (!parent) return null;

  const updateRect = () => {
    const pos = getPlacement(placement, getRect(parent), offset);
    setRect(pos);
  };

  const {
    transform,
    top,
    left,
    right,
    bottom
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => getIconPlacement(placement, 5), [placement]);
  src_use_resize(updateRect);
  src_use_click_anywhere(() => updateRect());
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    updateRect();
  }, [visible]);

  const preventHandler = event => {
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
  };

  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  if (!el) return null;
  return /*#__PURE__*/(0,external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_.createPortal)( /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
    name: `${tooltip_content_preClass}-wrapper`,
    visible: visible,
    enterTime: 20,
    leaveTime: 20,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltipContent, {
      className: clsx(`${tooltip_content_preClass}-content`, `${tooltip_content_preClass}--${getState}`, className),
      "data-state": getState,
      ref: selfRef,
      onClick: preventHandler,
      animated: animated,
      css: {
        left: rect.left,
        top: `calc(${rect.top} + 6px)`,
        transform: rect.transform,
        [`&.${tooltip_content_preClass}-wrapper-enter-active`]: {
          opacity: 1,
          top: rect.top
        },
        ...css
      },
      ...props,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltip, {
        role: "tooltip",
        "data-state": getState,
        hideArrow: hideArrow,
        className: clsx(tooltip_content_preClass, {
          [`${tooltip_content_preClass}--with-arrow`]: !hideArrow
        }),
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltipArrow, {
          className: `${tooltip_content_preClass}-arrow`,
          css: {
            left,
            top,
            right,
            bottom,
            transform
          }
        }, void 0, false, {
          fileName: tooltip_content_jsxFileName,
          lineNumber: 140,
          columnNumber: 11
        }, undefined), children]
      }, void 0, true, {
        fileName: tooltip_content_jsxFileName,
        lineNumber: 132,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: tooltip_content_jsxFileName,
      lineNumber: 110,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: tooltip_content_jsxFileName,
    lineNumber: 104,
    columnNumber: 5
  }, undefined), el);
};

TooltipContent.toString = () => '.nextui-tooltip-content';

/* harmony default export */ const tooltip_content = (with_defaults(TooltipContent, tooltip_content_defaultProps));
;// CONCATENATED MODULE: ./src/tooltip/tooltip.tsx
var tooltip_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/tooltip/tooltip.tsx";






const tooltip_defaultProps = {
  initialVisible: false,
  hideArrow: false,
  animated: true,
  shadow: true,
  rounded: false,
  keepMounted: false,
  trigger: 'hover',
  enterDelay: 0,
  leaveDelay: 0,
  className: '',
  portalClassName: '',
  onVisibleChange: () => {}
};

const Tooltip = ({
  children,
  initialVisible,
  content,
  offset,
  placement,
  portalClassName,
  enterDelay,
  leaveDelay,
  trigger,
  rounded,
  animated,
  shadow,
  className,
  color,
  contentColor,
  onVisibleChange,
  hideArrow,
  css,
  triggerCss,
  onClick,
  keepMounted,
  visible: customVisible,
  ...props
}) => {
  const timer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  const ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [visible, setVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialVisible);
  const contentProps = {
    animated,
    visible,
    css,
    shadow,
    offset,
    placement,
    rounded,
    color,
    contentColor,
    hideArrow,
    parent: ref,
    className: portalClassName
  };

  const changeVisible = nextState => {
    const clear = () => {
      clearTimeout(timer.current);
      timer.current = undefined;
    };

    const handler = nextState => {
      setVisible(nextState);
      onVisibleChange(nextState);
      clear();
    };

    clear();

    if (nextState) {
      timer.current = window.setTimeout(() => handler(true), enterDelay);
      return;
    }

    timer.current = window.setTimeout(() => handler(false), leaveDelay);
  };

  const mouseEventHandler = next => {
    trigger === 'hover' && changeVisible(next);
  };

  const clickEventHandler = () => {
    trigger === 'click' && changeVisible(!visible);
    onClick == null ? void 0 : onClick();
  };

  src_use_click_away(ref, () => trigger === 'click' && !keepMounted && changeVisible(false));
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (customVisible === undefined) return;
    changeVisible(customVisible);
  }, [customVisible]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTooltipTrigger, {
    ref: ref,
    role: "button",
    tabIndex: -1,
    className: `nextui-tooltip-button ${className}`,
    onClick: clickEventHandler,
    onKeyUp: () => mouseEventHandler(true),
    onMouseEnter: () => mouseEventHandler(true),
    onMouseLeave: () => mouseEventHandler(false),
    onFocus: () => mouseEventHandler(true),
    onBlur: () => mouseEventHandler(false),
    css: { ...triggerCss
    },
    ...props,
    children: [children, content && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(tooltip_content, { ...contentProps,
      children: content
    }, void 0, false, {
      fileName: tooltip_jsxFileName,
      lineNumber: 160,
      columnNumber: 19
    }, undefined)]
  }, void 0, true, {
    fileName: tooltip_jsxFileName,
    lineNumber: 143,
    columnNumber: 5
  }, undefined);
};

Tooltip.toString = () => '.nextui-tooltip';

/* harmony default export */ const tooltip = (with_defaults(Tooltip, tooltip_defaultProps));
;// CONCATENATED MODULE: ./src/tooltip/index.ts


/* harmony default export */ const src_tooltip = (tooltip);
;// CONCATENATED MODULE: ./src/snippet/snippet.styles.ts

const StyledSnippet = styled('div', {
  display: 'flex',
  position: 'relative',
  width: 'initial',
  maxWidth: '100%',
  padding: 'calc($space$lg * 0.75) $space$lg',
  br: '$lg',
  bg: '$background',
  variants: {
    color: {
      default: {
        $$snippetBorderColor: '$border',
        $$snippetBgColor: '$background',
        color: '$text'
      },
      primary: {
        $$snippetBorderColor: '$border',
        $$snippetBgColor: '$primary',
        color: '$text'
      },
      success: {
        $$snippetBorderColor: '$success',
        $$snippetBgColor: '$background',
        color: '$success'
      },
      warning: {
        $$snippetBorderColor: '$warning',
        $$snippetBgColor: '$background',
        color: '$warning'
      },
      error: {
        $$snippetBorderColor: '$error',
        $$snippetBgColor: '$background',
        color: '$error'
      },
      secondary: {
        $$snippetBorderColor: '$secondary',
        $$snippetBgColor: '$background',
        color: '$secondary'
      },
      invert: {
        $$snippetBorderColor: '$foreground',
        $$snippetBgColor: '$foreground',
        color: '$background'
      }
    },
    borderWeight: {
      light: {
        $$borderWeight: '$light'
      },
      normal: {
        $$borderWeight: '$normal'
      },
      bold: {
        $$borderWeight: '$bold'
      },
      extrabold: {
        $$borderWeight: '$extrabold'
      },
      black: {
        $$borderWeight: '$black'
      }
    },
    bordered: {
      true: {
        border: '$$borderWeight solid $$snippetBorderColor'
      }
    },
    filled: {
      true: {
        backgroundColor: '$$snippetBgColor'
      }
    }
  },
  defaultVariants: {
    color: 'default',
    borderWeight: 'normal',
    filled: false
  }
});
const StyledSnippetPre = styled('pre', {
  margin: 0,
  padding: 0,
  border: 'none',
  br: 0,
  bgColor: 'transparent',
  color: 'inherit',
  fontSize: '$xs',
  '*': {
    margin: 0,
    padding: 0,
    fontSize: 'inherit',
    color: 'inherit'
  },
  variants: {
    withCopyButton: {
      true: {
        width: 'calc(100% - 2 * $lg)'
      },
      false: {
        width: '100%'
      }
    }
  }
});
const StyledSnippetCopyButtonIcon = styled('svg', {});
const StyledSnippetCopyButton = styled('button', {
  display: 'inline-flex',
  jc: 'center',
  border: 'none',
  ai: 'flex-start',
  bg: 'transparent',
  width: 'calc(2 * $space$lg)',
  br: '$xs',
  color: 'inherit',
  transition: 'opacity 0.2s ease 0s',
  cursor: 'pointer',
  us: 'none',
  '@motion': {
    transition: 'none'
  },
  '&:hover': {
    opacity: '0.7'
  },
  [`& ${StyledSnippetCopyButtonIcon}`]: {
    path: {
      fill: '$accents6'
    }
  }
}, sharedFocus);
;// CONCATENATED MODULE: ./src/snippet/snippet-icon.tsx
var snippet_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/snippet/snippet-icon.tsx";




const snippet_icon_defaultProps = {
  width: 18,
  height: 18
};

const Copy = ({
  size,
  fill,
  width,
  height,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetCopyButtonIcon, {
    xmlns: "http://www.w3.org/2000/svg",
    width: size || width,
    height: size || height,
    viewBox: "0 0 24 24",
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      fill: fill,
      d: "M20 2H10c-1.103 0-2 .897-2 2v4H4c-1.103 0-2 .897-2 2v10c0 1.103.897 2 2 2h10c1.103 0 2-.897 2-2v-4h4c1.103 0 2-.897 2-2V4c0-1.103-.897-2-2-2zM4 20V10h10l.002 10H4zm16-6h-4v-4c0-1.103-.897-2-2-2h-4V4h10v10z"
    }, void 0, false, {
      fileName: snippet_icon_jsxFileName,
      lineNumber: 33,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: snippet_icon_jsxFileName,
    lineNumber: 26,
    columnNumber: 5
  }, undefined);
};

Copy.toString = () => '.nextui-snippet-copy-icon';

const MemoCopy = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_.memo(Copy);
/* harmony default export */ const snippet_icon = (with_defaults(MemoCopy, snippet_icon_defaultProps));
;// CONCATENATED MODULE: ./src/snippet/snippet.tsx
var snippet_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/snippet/snippet.tsx";








const snippet_defaultProps = {
  symbol: '$',
  showTooltip: true,
  copy: 'default',
  tooltipColor: 'default',
  tooltipCopyText: 'Copy',
  tooltipCopiedText: 'Copied'
};

const textArrayToString = text => {
  return text.reduce((pre, current) => {
    if (!current) return pre;
    return pre ? `${pre}\n${current}` : current;
  }, '');
};

const Snippet = ({
  bordered,
  children,
  symbol,
  showTooltip,
  text,
  tooltipCopyText,
  tooltipCopiedText,
  tooltipColor,
  copy: copyType,
  ...props
}) => {
  const [copied, setCopied] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const {
    copy
  } = src_use_clipboard();
  const ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const isMultiLine = text && Array.isArray(text);
  const showCopyIcon = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => copyType !== 'prevent', [copyType]);
  const childText = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isMultiLine) return textArrayToString(text);
    if (!children) return text;
    if (!ref.current) return '';
    return ref.current.textContent;
  }, [ref.current, children, text]);
  const symbolBefore = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const str = symbol.trim();
    return str ? `${str} ` : '';
  }, [symbol]);

  const clickHandler = () => {
    if (!childText || !showCopyIcon) return;
    copy(childText);
    if (copyType === 'slient') return;
    setCopied(true);
  };

  const handleTooltipVisibleChange = () => {
    setTimeout(() => {
      copied && setCopied(false);
    }, 400);
  };

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippet, { ...props,
    children: [isMultiLine ? text.map((t, index) => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetPre, {
      css: {
        '&:before': {
          content: symbolBefore,
          us: 'none'
        }
      },
      className: "nextui-snippet-pre",
      children: t
    }, `${index}-${t}`, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 99,
      columnNumber: 11
    }, undefined)) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetPre, {
      css: {
        '&:before': {
          content: symbolBefore,
          us: 'none'
        }
      },
      className: "nextui-snippet-pre",
      ref: ref,
      children: children || text
    }, void 0, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 113,
      columnNumber: 9
    }, undefined), showCopyIcon && copyType !== 'slient' ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_tooltip, {
      hideArrow: true,
      rounded: true,
      color: tooltipColor,
      content: copied ? tooltipCopiedText : tooltipCopyText,
      onVisibleChange: handleTooltipVisibleChange,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetCopyButton, {
        className: "nextui-snippet-copy-button",
        onClick: clickHandler,
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(snippet_icon, {}, void 0, false, {
          fileName: snippet_jsxFileName,
          lineNumber: 138,
          columnNumber: 13
        }, undefined)
      }, void 0, false, {
        fileName: snippet_jsxFileName,
        lineNumber: 134,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 127,
      columnNumber: 9
    }, undefined) : copyType !== 'prevent' && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSnippetCopyButton, {
      className: "nextui-snippet-copy-button",
      onClick: clickHandler,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(snippet_icon, {}, void 0, false, {
        fileName: snippet_jsxFileName,
        lineNumber: 147,
        columnNumber: 13
      }, undefined)
    }, void 0, false, {
      fileName: snippet_jsxFileName,
      lineNumber: 143,
      columnNumber: 11
    }, undefined)]
  }, void 0, true, {
    fileName: snippet_jsxFileName,
    lineNumber: 96,
    columnNumber: 5
  }, undefined);
};

if (__DEV__) {
  Snippet.displayName = 'NextUI - Snippet';
}

Snippet.toString = () => '.nextui-snippet';

const MemoSnippet = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Snippet);
/* harmony default export */ const snippet = (with_defaults(MemoSnippet, snippet_defaultProps));
;// CONCATENATED MODULE: ./src/snippet/index.ts


/* harmony default export */ const src_snippet = (snippet);
;// CONCATENATED MODULE: ./src/row/row.styles.ts

const StyledRow = styled('div', {
  display: 'flex',
  position: 'relative',
  boxSizing: 'border-box',
  variants: {
    fluid: {
      true: {
        width: '100%'
      }
    }
  },
  defaultVariants: {
    fluid: true
  }
});
/* harmony default export */ const row_styles = (StyledRow);
;// CONCATENATED MODULE: ./src/row/row.tsx
var row_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/row/row.tsx";




const row_defaultProps = {
  gap: 0,
  wrap: 'nowrap',
  justify: 'flex-start',
  align: 'flex-start'
};

const Row = ({
  children,
  gap,
  justify,
  align,
  wrap,
  css,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(row_styles, {
    css: {
      flexWrap: wrap,
      $$rowGap: `calc(${gap} * $space$lg)`,
      marginLeft: `calc(${gap} * $space$lg / 2)`,
      marginRight: `calc(${gap} * $space$lg / 2)`,
      justifyContent: justify,
      alignItems: align,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: row_jsxFileName,
    lineNumber: 37,
    columnNumber: 5
  }, undefined);
};

Row.toString = () => '.nextui-row';

const MemoRow = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Row);
/* harmony default export */ const row = (with_defaults(MemoRow, row_defaultProps));
;// CONCATENATED MODULE: ./src/row/index.ts


/* harmony default export */ const src_row = (row);
;// CONCATENATED MODULE: ./src/utils/color.ts

const getCssVar = name => {
  if (typeof document !== 'undefined' || !name) {
    const property = isCssVar(name) ? name.replace('var(', '').replace(')', '') : `--${name}`;
    return getComputedStyle(document.documentElement).getPropertyValue(property);
  }

  return '';
};
const isCssVar = property => {
  return property && (property == null ? void 0 : property.indexOf('var(')) === 0 ? true : false;
};
/**
 * This function allows validate if a string is a hexadecimal
 * value
 * @param str [string] hexadecimal value
 * @returns result [boolean]
 */

const isHex = str => {
  const exp = /#[a-fA-F0-9]{3,6}/g;
  return exp.test(str);
};
/**
 *
 * @param hex [string]
 * @param alpha [number]
 * @returns [string]
 */

const hexToRGBA = (hex, alpha = 1) => {
  let r = 0,
      g = 0,
      b = 0; // 3 digits

  if (hex.length == 4) {
    r = '0x' + hex[1] + hex[1];
    g = '0x' + hex[2] + hex[2];
    b = '0x' + hex[3] + hex[3]; // 6 digits
  } else if (hex.length == 7) {
    r = '0x' + hex[1] + hex[2];
    g = '0x' + hex[3] + hex[4];
    b = '0x' + hex[5] + hex[6];
  }

  return `rgba(${+r}, ${+g},${+b},${alpha})`;
};
const isNormalColor = color => {
  let found = normalColors.find(el => el === color);
  return found !== undefined && found !== null;
};
/**
 * Function that checks color name support in the current browser
 * @param strColor
 * @returns boolean
 */

const isColor = strColor => {
  let s = new Option().style;
  s.color = strColor;
  return s.color == strColor;
};
const hexToRgb = color => {
  const fullReg = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  const full = color.replace(fullReg, (_, r, g, b) => `${r}${r}${g}${g}${b}${b}`);
  const values = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(full);

  if (!values) {
    throw new Error(`Next UI: Unsupported ${color} color.`);
  }

  return [Number.parseInt(values[1], 16), Number.parseInt(values[2], 16), Number.parseInt(values[3], 16)];
};
const hexFromString = (str, defaultColor = '', returnLast = false) => {
  const fullReg = /#[a-fA-F0-9]{6}|#[a-fA-F0-9]{3}$/g;
  const hexCodes = str.match(fullReg);

  if (hexCodes && hexCodes.length > 0) {
    return returnLast ? hexCodes[hexCodes.length - 1] : hexCodes;
  }

  return defaultColor;
};
const colorToRgbValues = colorProp => {
  const color = isCssVar(colorProp) ? getCssVar(colorProp) : colorProp;
  if (color.charAt(0) === '#') return hexToRgb(color);
  const safeColor = color.replace(/ /g, '');
  const colorType = color.substr(0, 4);
  const regArray = safeColor.match(/\((.+)\)/);

  if (!colorType.startsWith('rgb') || !regArray) {
    throw new Error(`Next UI: Only support ["RGB", "RGBA", "HEX"] color.`);
  }

  return regArray[1].split(',').map(str => Number.parseFloat(str));
};
const addColorAlpha = (colorProp, alpha = 1) => {
  if (!colorProp) return '';
  const color = isCssVar(colorProp) ? getCssVar(colorProp) : colorProp;

  if (isHex(color)) {
    return hexToRGBA(color, alpha);
  } else if (!/^#|rgb|RGB/.test(color)) {
    return color;
  }

  const [r, g, b] = colorToRgbValues(color);
  const safeAlpha = alpha > 1 ? 1 : alpha < 0 ? 0 : alpha;
  return `rgba(${r}, ${g}, ${b}, ${safeAlpha})`;
};

function padZero(str, len) {
  len = len || 2;
  var zeros = new Array(len).join('0');
  return (zeros + str).slice(-len);
}

const invertHex = (hexProp, smooth = true) => {
  let hex = isCssVar(hexProp) ? getCssVar(hexProp) : hexProp;

  if (hex.indexOf('#') === 0) {
    hex = hex.slice(1);
  } // convert 3-digit hex to 6-digits.


  if (hex.length === 3) {
    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
  }

  if (hex.length !== 6) {
    return hexProp;
  }

  let r = parseInt(hex.slice(0, 2), 16),
      g = parseInt(hex.slice(2, 4), 16),
      b = parseInt(hex.slice(4, 6), 16);

  if (smooth) {
    // http://stackoverflow.com/a/3943023/112731
    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? '#000000' : '#FFFFFF';
  } // invert color components


  r = 255 - r;
  g = 255 - g;
  b = 255 - b; // pad each with zeros and return

  return '#' + padZero(r.toString(16)) + padZero(g.toString(16)) + padZero(b.toString(16));
};
;// CONCATENATED MODULE: ./src/link/link.styles.ts
var _theme$colors, _theme$colors$link;



const StyledLinkIcon = styled('svg', {
  ml: '$1',
  as: 'center',
  display: 'inline-flex',
  color: 'currentColor'
});
const StyledLink = styled('a', {
  display: 'inline-flex',
  alignItems: 'baseline',
  lineHeight: 'inherit',
  textDecoration: 'none',
  width: 'fitContent',
  '&:hover': {
    opacity: 0.8
  },
  '@motion': {
    transition: 'none'
  },
  variants: {
    color: {
      default: {
        color: '$link'
      },
      text: {
        color: '$text'
      },
      primary: {
        color: '$primary'
      },
      secondary: {
        color: '$secondary'
      },
      success: {
        color: '$success'
      },
      warning: {
        color: '$warning'
      },
      error: {
        color: '$error'
      }
    },
    underline: {
      true: {
        '&:hover, &:active, &:focus': {
          textDecoration: 'underline'
        }
      }
    },
    block: {
      true: {
        padding: '$2 $4',
        borderRadius: '$base'
      }
    },
    animated: {
      true: {
        transition: '$default'
      }
    }
  },
  compoundVariants: [{
    color: 'default',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: addColorAlpha((_theme$colors = theme.colors) == null ? void 0 : (_theme$colors$link = _theme$colors.link) == null ? void 0 : _theme$colors$link.value, 0.2)
      }
    }
  }, {
    color: 'primary',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: '$primaryLight'
      }
    }
  }, {
    color: 'secondary',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: '$secondaryLight'
      }
    }
  }, {
    color: 'success',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: '$successLight'
      }
    }
  }, {
    color: 'warning',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: '$warningLight'
      }
    }
  }, {
    color: 'error',
    block: true,
    css: {
      '&:hover': {
        backgroundColor: '$errorLight'
      }
    }
  }],
  defaultVariants: {
    color: 'default',
    animated: true
  }
});
/* harmony default export */ const link_styles = (StyledLink);
;// CONCATENATED MODULE: ./src/link/icon.tsx
var icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/link/icon.tsx";



const LinkIcon = () => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLinkIcon, {
    viewBox: "0 0 24 24",
    width: "1em",
    height: "1em",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    fill: "none",
    shapeRendering: "geometricPrecision",
    className: "nextui-link-icon",
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M18 13v6a2 2 0 01-2 2H5a2 2 0 01-2-2V8a2 2 0 012-2h6"
    }, void 0, false, {
      fileName: icon_jsxFileName,
      lineNumber: 18,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M15 3h6v6"
    }, void 0, false, {
      fileName: icon_jsxFileName,
      lineNumber: 19,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M10 14L21 3"
    }, void 0, false, {
      fileName: icon_jsxFileName,
      lineNumber: 20,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: icon_jsxFileName,
    lineNumber: 6,
    columnNumber: 5
  }, undefined);
};

LinkIcon.toString = () => '.nextui-link-icon';

/* harmony default export */ const link_icon = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(LinkIcon));
;// CONCATENATED MODULE: ./src/link/link.tsx
var link_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/link/link.tsx";






const link_defaultProps = {
  icon: false
};
const Link = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children,
  icon,
  ...props
}, forwardedRef) => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(link_styles, { ...props,
  ref: forwardedRef,
  children: [children, icon && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(link_icon, {}, void 0, false, {
    fileName: link_jsxFileName,
    lineNumber: 28,
    columnNumber: 16
  }, undefined)]
}, void 0, true, {
  fileName: link_jsxFileName,
  lineNumber: 26,
  columnNumber: 5
}, undefined));

if (__DEV__) {
  Link.displayName = 'NextUI - Link';
}

Link.toString = () => '.nextui-link';

/* harmony default export */ const link_link = (with_defaults(Link, link_defaultProps));
;// CONCATENATED MODULE: ./src/link/index.ts


/* harmony default export */ const src_link = (link_link);
;// CONCATENATED MODULE: ./src/loading/loading.styles.ts

const loadingBlink = keyframes({
  '0%': {
    opacity: '0.2'
  },
  '20%': {
    opacity: 1
  },
  '100%': {
    opacity: '0.2'
  }
});
const rotate = keyframes({
  '0%': {
    transform: 'rotate(0deg)'
  },
  '100%': {
    transform: 'rotate(360deg)'
  }
});
const points = keyframes({
  '0%': {
    transform: 'translate(0px, 0px)'
  },
  '50%': {
    transform: 'translate(0, calc(-$$loadingSize * 1.4))'
  },
  '100%': {
    transform: 'translate(0px, 0px)'
  }
});
const spinner = keyframes({
  '0%': {
    opacity: 1
  },
  '100%': {
    opacity: 0.15
  }
});
const StyledLoadingContainer = styled('div', {
  d: 'inline-flex',
  fd: 'column',
  ai: 'center',
  position: 'relative',
  variants: {
    color: {
      white: {
        $$loadingColor: '$colors$white'
      },
      default: {
        $$loadingColor: '$colors$primary'
      },
      primary: {
        $$loadingColor: '$colors$primary'
      },
      secondary: {
        $$loadingColor: '$colors$secondary'
      },
      success: {
        $$loadingColor: '$colors$success'
      },
      warning: {
        $$loadingColor: '$colors$warning'
      },
      error: {
        $$loadingColor: '$colors$error'
      }
    },
    textColor: {
      white: {
        $$loadingTextColor: '$colors$white'
      },
      default: {
        $$loadingTextColor: '$colors$text'
      },
      primary: {
        $$loadingTextColor: '$colors$primary'
      },
      secondary: {
        $$loadingTextColor: '$colors$secondary'
      },
      success: {
        $$loadingTextColor: '$colors$success'
      },
      warning: {
        $$loadingTextColor: '$colors$warning'
      },
      error: {
        $$loadingTextColor: '$colors$error'
      }
    }
  },
  defaultVariants: {
    color: 'default',
    textColor: 'default'
  }
});
const StyledSpinnerContainer = styled('div', {
  size: '100%',
  position: 'relative',
  left: '50%',
  top: '50%'
});
const StyledSpinner = styled('div', {
  d: 'flex',
  fd: 'column',
  jc: 'center',
  ai: 'center',
  position: 'relative',
  variants: {
    size: {
      xs: {
        size: '$6'
      },
      sm: {
        size: '$8'
      },
      md: {
        size: '$9'
      },
      lg: {
        size: '$11'
      },
      xl: {
        size: '$12'
      }
    }
  }
});
const StyledSpinnerSpan = styled('span', {
  bg: '$$loadingColor',
  position: 'absolute',
  top: '-3.9%',
  width: '24%',
  height: '8%',
  left: '-10%',
  br: '$lg',
  animation: `${spinner} 1.2s linear 0s infinite normal none running`,
  '&:nth-child(1)': {
    animationDelay: '-1.2s',
    transform: 'rotate(0deg) translate(146%)'
  },
  '&:nth-child(2)': {
    animationDelay: '-1.1s',
    transform: 'rotate(30deg) translate(146%)'
  },
  '&:nth-child(3)': {
    animationDelay: '-1s',
    transform: 'rotate(60deg) translate(146%)'
  },
  '&:nth-child(4)': {
    animationDelay: '-0.9s',
    transform: 'rotate(90deg) translate(146%)'
  },
  '&:nth-child(5)': {
    animationDelay: '-0.8s',
    transform: 'rotate(120deg) translate(146%)'
  },
  '&:nth-child(6)': {
    animationDelay: '-0.7s',
    transform: 'rotate(150deg) translate(146%)'
  },
  '&:nth-child(7)': {
    animationDelay: '-0.6s',
    transform: 'rotate(180deg) translate(146%)'
  },
  '&:nth-child(8)': {
    animationDelay: '-0.5s',
    transform: 'rotate(210deg) translate(146%)'
  },
  '&:nth-child(9)': {
    animationDelay: '-0.4s',
    transform: 'rotate(240deg) translate(146%)'
  },
  '&:nth-child(10)': {
    animationDelay: '-0.3s',
    transform: 'rotate(270deg) translate(146%)'
  },
  '&:nth-child(11)': {
    animationDelay: '-0.2s',
    transform: 'rotate(300deg) translate(146%)'
  },
  '&:nth-child(12)': {
    animationDelay: '-0.1s',
    transform: 'rotate(330deg) translate(146%)'
  }
});
const StyledLoading = styled('span', {
  position: 'absolute',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  size: '100%',
  dflex: 'center',
  bgColor: 'transparent',
  us: 'none',
  variants: {
    size: {
      xs: {
        $$loadingSize: '$space$8',
        $$loadingBorder: '$space$1'
      },
      sm: {
        $$loadingSize: '$space$10',
        $$loadingBorder: '$space$1'
      },
      md: {
        $$loadingSize: '$space$12',
        $$loadingBorder: 'calc($space$1 * 1.5)'
      },
      lg: {
        $$loadingSize: '$space$15',
        $$loadingBorder: '$space$2'
      },
      xl: {
        $$loadingSize: '$space$18',
        $$loadingBorder: '$space$3'
      }
    },
    type: {
      default: {
        d: 'flex',
        br: '$rounded',
        position: 'relative',
        size: '$$loadingSize',
        i: {
          top: '0px',
          size: '100%',
          position: 'absolute',
          br: 'inherit'
        },
        '._1': {
          border: '$$loadingBorder solid $$loadingColor',
          borderTop: '$$loadingBorder solid transparent',
          borderLeft: '$$loadingBorder solid transparent',
          borderRight: '$$loadingBorder solid transparent',
          animation: `${rotate} 0.8s ease infinite`
        },
        '._2': {
          border: '$$loadingBorder dotted $$loadingColor',
          borderTop: '$$loadingBorder solid transparent',
          borderLeft: '$$loadingBorder solid transparent',
          borderRight: '$$loadingBorder solid transparent',
          animation: `${rotate} 0.8s linear infinite`,
          opacity: 0.5
        },
        '._3': {
          display: 'none'
        }
      },
      points: {
        d: 'flex',
        position: 'relative',
        transform: 'translate(0, calc($$loadingSize * 0.6))',
        i: {
          size: '$$loadingSize',
          margin: '0 3px',
          bg: '$$loadingColor'
        },
        '._1': {
          br: '$rounded',
          animation: `${points} 0.75s ease infinite`
        },
        '._2': {
          br: '$rounded',
          animation: `${points} 0.75s ease infinite 0.25s`
        },
        '._3': {
          br: '$rounded',
          animation: `${points} 0.75s ease infinite 0.5s`
        }
      },
      'points-opacity': {
        d: 'flex',
        position: 'relative',
        i: {
          display: 'inline-block',
          size: '$$loadingSize',
          br: '$rounded',
          bg: '$$loadingColor',
          margin: '0 1px',
          animation: `${loadingBlink} 1.4s infinite both`
        },
        '._2': {
          animationDelay: '0.2s'
        },
        '._3': {
          animationDelay: '0.4s'
        }
      },
      spinner: {},
      gradient: {
        display: 'flex',
        position: 'relative',
        size: '$$loadingSize',
        '._1': {
          position: 'absolute',
          size: '100%',
          border: '0px',
          animation: `${rotate} 1s linear infinite`,
          top: '0px',
          br: '$rounded',
          bg: 'linear-gradient(0deg, $background 33%,$$loadingColor 100%)'
        },
        '._2': {
          top: '2px',
          position: 'absolute',
          size: 'calc(100% - 4px)',
          border: '0px',
          bg: '$background',
          br: '$rounded'
        },
        '._3': {
          display: 'none'
        }
      }
    }
  },
  compoundVariants: [// points-opacity & xs size
  {
    size: 'xs',
    type: 'points-opacity',
    css: {
      $$loadingSize: '$space$1'
    }
  }, // points-opacity & sm size
  {
    size: 'sm',
    type: 'points-opacity',
    css: {
      $$loadingSize: '$space$2'
    }
  }, // points-opacity & md size
  {
    size: 'md',
    type: 'points-opacity',
    css: {
      $$loadingSize: '$space$3'
    }
  }, // points-opacity & lg size
  {
    size: 'lg',
    type: 'points-opacity',
    css: {
      $$loadingSize: '$space$4'
    }
  }, // points-opacity & xl size
  {
    size: 'xl',
    type: 'points-opacity',
    css: {
      $$loadingSize: '$space$5'
    }
  }, // points & xs size
  {
    size: 'xs',
    type: 'points',
    css: {
      $$loadingSize: '$space$1'
    }
  }, // points & sm size
  {
    size: 'sm',
    type: 'points',
    css: {
      $$loadingSize: '$space$2'
    }
  }, // points & md size
  {
    size: 'md',
    type: 'points',
    css: {
      $$loadingSize: '$space$3'
    }
  }, // points & lg size
  {
    size: 'lg',
    type: 'points',
    css: {
      $$loadingSize: '$space$4'
    }
  }, // points & xl size
  {
    size: 'xl',
    type: 'points',
    css: {
      $$loadingSize: '$space$5'
    }
  }],
  defaultVariants: {
    type: 'default'
  }
});
const StyledLoadingLabel = styled('label', {
  mt: '$1',
  color: '$$loadingTextColor',
  fontSize: '$$loadingSize',
  '*': {
    margin: 0
  },
  variants: {
    size: {
      xs: {
        fontSize: '$space$5',
        marginTop: '$2'
      },
      sm: {
        fontSize: '$space$6',
        marginTop: '$3'
      },
      md: {
        fontSize: '$base',
        marginTop: '$4'
      },
      lg: {
        fontSize: '$space$10',
        marginTop: '$4'
      },
      xl: {
        fontSize: '$space$11',
        marginTop: '$5'
      }
    }
  }
});
;// CONCATENATED MODULE: ./src/loading/spinner.tsx
var spinner_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/loading/spinner.tsx";





const Spinner = ({
  children,
  size,
  color,
  textColor,
  className,
  ...props
}) => {
  const isValidChildren = Array.isArray(children) ? (children == null ? void 0 : children.length) > 1 && children[0] !== undefined : children !== undefined;
  const ariaLabel = children && isValidChildren ? '' : 'Loading';
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpinner, {
    className: clsx('nextui-spinner', className),
    color: color,
    size: size,
    ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpinnerContainer, {
      className: "nextui-spinner-container",
      "aria-label": ariaLabel,
      children: [...new Array(12)].map((_, index) => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSpinnerSpan, {}, `nextui-spinner-${index}`, false, {
        fileName: spinner_jsxFileName,
        lineNumber: 52,
        columnNumber: 11
      }, undefined))
    }, void 0, false, {
      fileName: spinner_jsxFileName,
      lineNumber: 47,
      columnNumber: 7
    }, undefined), children && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoadingLabel, {
      size: size,
      color: textColor,
      children: children
    }, void 0, false, {
      fileName: spinner_jsxFileName,
      lineNumber: 56,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: spinner_jsxFileName,
    lineNumber: 41,
    columnNumber: 5
  }, undefined);
};

Spinner.toString = () => '.nextui-spinner';

/* harmony default export */ const loading_spinner = (Spinner);
;// CONCATENATED MODULE: ./src/loading/loading.tsx
var loading_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/loading/loading.tsx";






const loading_defaultProps = {
  size: 'md',
  type: 'default'
};
const loading_preClass = 'nextui-loading';

const Loading = ({
  children,
  size,
  gradientBackground,
  loadingCss,
  type,
  ...props
}) => {
  const ariaLabel = children ? '' : 'Loading';
  const loadingGradientCSS = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return type === 'gradient' ? {
      '._2': {
        bg: gradientBackground
      }
    } : {};
  }, [type]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoadingContainer, { ...props,
    children: type === 'spinner' ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(loading_spinner, {
      size: size,
      children: children
    }, void 0, false, {
      fileName: loading_jsxFileName,
      lineNumber: 52,
      columnNumber: 9
    }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoading, {
        className: `${loading_preClass} ${loading_preClass}-${type}`,
        css: { ...loadingCss,
          ...loadingGradientCSS
        },
        type: type,
        size: size,
        "aria-label": ariaLabel,
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("i", {
          className: "_1"
        }, void 0, false, {
          fileName: loading_jsxFileName,
          lineNumber: 65,
          columnNumber: 13
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("i", {
          className: "_2"
        }, void 0, false, {
          fileName: loading_jsxFileName,
          lineNumber: 66,
          columnNumber: 13
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("i", {
          className: "_3"
        }, void 0, false, {
          fileName: loading_jsxFileName,
          lineNumber: 67,
          columnNumber: 13
        }, undefined)]
      }, void 0, true, {
        fileName: loading_jsxFileName,
        lineNumber: 55,
        columnNumber: 11
      }, undefined), children && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledLoadingLabel, {
        size: size,
        className: `${loading_preClass}-label`,
        children: children
      }, void 0, false, {
        fileName: loading_jsxFileName,
        lineNumber: 70,
        columnNumber: 13
      }, undefined)]
    }, void 0, true)
  }, void 0, false, {
    fileName: loading_jsxFileName,
    lineNumber: 50,
    columnNumber: 5
  }, undefined);
};

Loading.toString = () => '.nextui-loading';

const MemoLoading = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Loading);
/* harmony default export */ const loading_loading = (with_defaults(MemoLoading, loading_defaultProps));
;// CONCATENATED MODULE: ./src/loading/index.ts

// export styled components


/* harmony default export */ const src_loading = (loading_loading);
;// CONCATENATED MODULE: ./src/radio/radio-context.ts

const radio_context_defaultContext = {
  color: 'primary',
  size: 'md',
  textColor: 'default',
  disabledAll: false,
  inGroup: false
};
const RadioContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(radio_context_defaultContext);
const useRadioContext = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(RadioContext);
;// CONCATENATED MODULE: ./src/radio/radio.styles.ts

const StyledRadioInput = styled('input', {}, sharedVisuallyHidden);
const StyledRadioLabel = styled('span', {
  fontSize: '$$radioSize',
  us: 'none',
  d: 'inline-flex',
  ai: 'center',
  variants: {
    color: {
      default: {
        color: '$text'
      },
      primary: {
        color: '$primary'
      },
      secondary: {
        color: '$secondary'
      },
      success: {
        color: '$success'
      },
      warning: {
        color: '$warning'
      },
      error: {
        color: '$error'
      }
    },
    disabled: {
      true: {
        color: '$accents4'
      }
    }
  }
});
const StyledRadioPoint = styled('span', {
  size: '$$radioSize',
  br: '$$radioRadii',
  position: 'relative',
  d: 'inline-block',
  mr: 'calc($$radioSize * 0.375)',
  '&:after': {
    content: '',
    d: 'block',
    position: 'absolute',
    size: '$$radioSize',
    br: '$$radioRadii',
    boxSizing: 'border-box',
    border: '2px solid $border'
  }
}, sharedFocus);
const StyledRadio = styled('label', {
  d: 'flex',
  w: 'initial',
  ai: 'flex-start',
  position: 'relative',
  fd: 'column',
  jc: 'flex-start',
  cursor: 'pointer',
  '@motion': {
    [`& ${StyledRadioPoint}`]: {
      transition: 'none',
      '&:after': {
        transition: 'none'
      }
    }
  },
  variants: {
    color: {
      default: {
        $$radioColor: '$colors$primary',
        $$radioColorHover: '$colors$primaryDark'
      },
      primary: {
        $$radioColor: '$colors$primary',
        $$radioColorHover: '$colors$primaryDark'
      },
      secondary: {
        $$radioColor: '$colors$secondary',
        $$radioColorHover: '$colors$secondaryDark'
      },
      success: {
        $$radioColor: '$colors$success',
        $$radioColorHover: '$colors$successDark'
      },
      warning: {
        $$radioColor: '$colors$warning',
        $$radioColorHover: '$colors$warningDark'
      },
      error: {
        $$radioColor: '$colors$error',
        $$radioColorHover: '$colors$errorDark'
      }
    },
    size: {
      xs: {
        $$radioSize: '$space$7'
      },
      sm: {
        $$radioSize: '$space$8'
      },
      md: {
        $$radioSize: '$space$9'
      },
      lg: {
        $$radioSize: '$space$10'
      },
      xl: {
        $$radioSize: '$space$11'
      }
    },
    disabled: {
      true: {
        cursor: 'not-allowed',
        $$radioColor: '$colors$accents4'
      }
    },
    squared: {
      true: {
        $$radioRadii: '$space$1'
      },
      false: {
        $$radioRadii: '$radii$rounded'
      }
    },
    active: {
      true: {
        [`& ${StyledRadioPoint}`]: {
          '&:after': {
            border: 'calc($$radioSize * 0.34) solid $$radioColor'
          }
        },
        '&:hover': {
          [`& ${StyledRadioPoint}`]: {
            '&:after': {
              border: 'calc($$radioSize * 0.34) solid $$radioColorHover'
            }
          }
        }
      }
    },
    animated: {
      true: {
        [`& ${StyledRadioPoint}`]: {
          transition: '$default',
          '&:after': {
            transition: '$default'
          }
        }
      },
      false: {
        [`& ${StyledRadioPoint}`]: {
          transition: 'none',
          '&:after': {
            transition: 'none'
          }
        }
      }
    }
  },
  defaultVariants: {
    size: 'md',
    squared: false,
    animated: true
  },
  compoundVariants: [{
    // !active && !disabled
    active: false,
    disabled: false,
    css: {
      '&:hover': {
        [`& ${StyledRadioPoint}`]: {
          bg: '$border'
        }
      }
    }
  }]
});
const StyledRadioGroup = styled('div', {
  border: 0,
  margin: 0,
  padding: 0,
  display: 'flex',
  fd: 'column',
  variants: {
    size: {
      xs: {
        $$radioGroupGap: '$space$7'
      },
      sm: {
        $$radioGroupGap: '$space$8'
      },
      md: {
        $$radioGroupGap: '$space$9'
      },
      lg: {
        $$radioGroupGap: '$space$10'
      },
      xl: {
        $$radioGroupGap: '$space$11'
      }
    },
    row: {
      true: {
        fd: 'row',
        [`& ${StyledRadio}`]: {
          marginTop: 0,
          marginRight: '$$radioGroupGap'
        }
      },
      false: {
        [`& ${StyledRadio}`]: {
          marginTop: '$$radioGroupGap',
          marginRight: 0
        }
      }
    }
  },
  defaultVariants: {
    row: false
  }
});
const StyledRadioDescription = styled('span', {
  color: '$accents4',
  fontSize: 'calc($$radioSize * 0.85)',
  paddingLeft: 'calc($$radioSize + $$radioSize * 0.375)'
}); // types
;// CONCATENATED MODULE: ./src/radio/radio.tsx
var radio_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/radio/radio.tsx";










const radio_defaultProps = {
  size: 'md',
  color: 'default',
  textColor: 'default',
  disabled: false,
  preventDefault: true
};
const radio_preClass = 'nextui-radio';

const Radio = ({
  checked,
  onChange,
  disabled,
  color,
  size,
  textColor,
  value: radioValue,
  preventDefault,
  children,
  ...props
}) => {
  const [selfChecked, setSelfChecked] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(!!checked);
  const {
    value: groupValue,
    disabledAll,
    inGroup,
    color: groupColor,
    size: groupSize,
    textColor: textGroupColor,
    updateState
  } = useRadioContext();
  const [withoutDescChildren, DescChildren] = pickChild(children, StyledRadioDescription);

  if (inGroup && __DEV__) {
    if (checked !== undefined) {
      src_use_warning('Remove props "checked" if in the Radio.Group.', 'Radio');
    }

    if (radioValue === undefined) {
      src_use_warning('Props "value" must be deinfed if in the Radio.Group.', 'Radio');
    }
  }

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    setSelfChecked(groupValue === radioValue);
  }, [groupValue, radioValue]);
  const isDisabled = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => disabled || disabledAll, [disabled, disabledAll]);
  const radioColor = color !== 'default' ? color : groupColor;
  const radioSize = size !== 'md' ? size : groupSize;
  const labelColor = textColor !== 'default' ? textColor : textGroupColor;

  const changeHandler = event => {
    if (isDisabled || inGroup && selfChecked) return;
    const selfEvent = {
      target: {
        checked: !selfChecked
      },
      stopPropagation: event.stopPropagation,
      preventDefault: event.preventDefault,
      nativeEvent: event
    };
    setSelfChecked(!selfChecked);

    if (inGroup) {
      updateState && updateState(radioValue);
    }

    onChange && onChange(selfEvent);
  };

  const {
    bindings
  } = src_use_keyboard(event => {
    changeHandler(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (checked === undefined) return;
    setSelfChecked(Boolean(checked));
  }, [checked]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadio, {
    "aria-checked": selfChecked,
    disabled: isDisabled,
    active: selfChecked,
    size: radioSize,
    color: radioColor,
    ...props,
    ...bindings,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioInput, {
      type: "radio",
      tabIndex: -1,
      value: radioValue,
      checked: selfChecked,
      onChange: changeHandler,
      className: `${radio_preClass}-input`,
      ...props
    }, void 0, false, {
      fileName: radio_jsxFileName,
      lineNumber: 158,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioLabel, {
      color: labelColor,
      disabled: isDisabled,
      className: `${radio_preClass}-name`,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioPoint, {
        tabIndex: isDisabled ? -1 : 0,
        className: clsx(`${radio_preClass}-point`, {
          [`${radio_preClass}-active`]: selfChecked,
          [`${radio_preClass}-disabled`]: isDisabled
        })
      }, void 0, false, {
        fileName: radio_jsxFileName,
        lineNumber: 172,
        columnNumber: 9
      }, undefined), withoutDescChildren]
    }, void 0, true, {
      fileName: radio_jsxFileName,
      lineNumber: 167,
      columnNumber: 7
    }, undefined), DescChildren && DescChildren]
  }, void 0, true, {
    fileName: radio_jsxFileName,
    lineNumber: 149,
    columnNumber: 5
  }, undefined);
};

Radio.defaultProps = radio_defaultProps;

if (__DEV__) {
  Radio.displayName = 'NextUI - Radio';
}

Radio.toString = () => '.nextui-radio';

/* harmony default export */ const radio_radio = (with_defaults(Radio, radio_defaultProps));
;// CONCATENATED MODULE: ./src/radio/radio-group.tsx
var radio_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/radio/radio-group.tsx";





const radio_group_defaultProps = {
  disabled: false,
  size: 'md',
  color: 'default',
  textColor: 'default'
};

const RadioGroup = ({
  disabled,
  onChange,
  value,
  size,
  color,
  textColor,
  children,
  initialValue,
  ...props
}) => {
  const [selfVal, setSelfVal] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialValue);

  const updateState = nextValue => {
    setSelfVal(nextValue);
    onChange && onChange(nextValue);
  };

  const providerValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return {
      updateState,
      disabledAll: disabled,
      inGroup: true,
      size,
      color,
      textColor,
      value: selfVal
    };
  }, [disabled, selfVal]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (value === undefined) return;
    setSelfVal(value);
  }, [value]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(RadioContext.Provider, {
    value: providerValue,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledRadioGroup, {
      role: "radiogroup",
      size: size,
      ...props,
      children: children
    }, void 0, false, {
      fileName: radio_group_jsxFileName,
      lineNumber: 70,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: radio_group_jsxFileName,
    lineNumber: 69,
    columnNumber: 5
  }, undefined);
};

RadioGroup.toString = () => '.nextui-radio-group';

/* harmony default export */ const radio_group = (with_defaults(RadioGroup, radio_group_defaultProps));
;// CONCATENATED MODULE: ./src/radio/index.ts



radio_radio.Group = radio_group;
radio_radio.Description = StyledRadioDescription;
radio_radio.Desc = StyledRadioDescription;

/* harmony default export */ const src_radio = (radio_radio);
;// CONCATENATED MODULE: ./src/text/text.styles.ts

const StyledText = styled('p', {
  variants: {
    weight: {
      hairline: {
        fontWeight: '$hairline'
      },
      thin: {
        fontWeight: '$thin'
      },
      light: {
        fontWeight: '$light'
      },
      normal: {
        fontWeight: '$normal'
      },
      medium: {
        fontWeight: '$medium'
      },
      semibold: {
        fontWeight: '$semibold'
      },
      bold: {
        fontWeight: '$bold'
      },
      extrabold: {
        fontWeight: '$extrabold'
      },
      black: {
        fontWeight: '$black'
      }
    }
  }
});
;// CONCATENATED MODULE: ./src/text/child.tsx
var child_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/text/child.tsx";





const child_defaultProps = {
  color: 'default'
};

const TextChild = ({
  children,
  tag,
  color: userColor,
  transform,
  margin: marginProp,
  size,
  css,
  ...props
}) => {
  const color = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isNormalColor(userColor)) {
      switch (userColor) {
        case 'default':
          return '$text';

        default:
          return `$${userColor}`;
      }
    }

    return userColor;
  }, [userColor]);
  const fontSize = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!size) return 'inherit';
    if (typeof size === 'number') return `${size}px`;
    return size;
  }, [size]);
  const margin = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!marginProp) return 'inherit';
    if (typeof marginProp === 'number') return `${size}px`;
    return marginProp;
  }, [marginProp]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledText, {
    as: tag,
    css: {
      color,
      fontSize: size ? fontSize : '',
      margin,
      tt: transform,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: child_jsxFileName,
    lineNumber: 66,
    columnNumber: 5
  }, undefined);
};

TextChild.toString = () => '.nextui-text-child';

const MemoTextChild = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(TextChild);
/* harmony default export */ const child = (with_defaults(MemoTextChild, child_defaultProps));
;// CONCATENATED MODULE: ./src/text/text.tsx
var text_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/text/text.tsx";




const text_defaultProps = {
  h1: false,
  h2: false,
  h3: false,
  h4: false,
  h5: false,
  h6: false,
  b: false,
  small: false,
  transform: 'none',
  i: false,
  span: false,
  del: false,
  em: false,
  blockquote: false,
  color: 'default'
};

const getModifierChild = (tags, children, size, transform) => {
  if (!tags.length) return children;
  const nextTag = tags.slice(1, tags.length);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(child, {
    tag: tags[0],
    size: size,
    transform: transform,
    children: getModifierChild(nextTag, children, size)
  }, void 0, false, {
    fileName: text_jsxFileName,
    lineNumber: 64,
    columnNumber: 5
  }, undefined);
};

const Text = ({
  h1,
  h2,
  h3,
  h4,
  h5,
  h6,
  b,
  small,
  i,
  span,
  del,
  em,
  blockquote,
  transform,
  size,
  margin,
  children,
  ...props
}) => {
  const elements = {
    h1,
    h2,
    h3,
    h4,
    h5,
    h6,
    blockquote
  };
  const inlineElements = {
    span,
    small,
    b,
    em,
    i,
    del
  };
  const names = Object.keys(elements).filter(name => elements[name]);
  const inlineNames = Object.keys(inlineElements).filter(name => inlineElements[name]);
  /**
   *  Render element "p" only if no element is found.
   *  If there is only one modifier, just rendered one modifier element
   *  e.g.
   *    <Text /> => <p />
   *    <Text em /> => <em />
   *    <Text b em /> => <b><em>children</em></b>
   */

  const tag = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (names[0]) return names[0];
    if (inlineNames[0]) return inlineNames[0];
    return 'p';
  }, [names, inlineNames]);
  const renderableChildElements = inlineNames.filter(name => name !== tag);
  const modifers = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (!renderableChildElements.length) return children;
    return getModifierChild(renderableChildElements, children, size, transform);
  }, [renderableChildElements, children, size, transform]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(child, {
    transform: transform,
    tag: tag,
    margin: margin,
    size: size,
    ...props,
    children: modifers
  }, void 0, false, {
    fileName: text_jsxFileName,
    lineNumber: 123,
    columnNumber: 5
  }, undefined);
};

Text.toString = () => '.nextui-text';

const MemoText = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Text);
/* harmony default export */ const text_text = (with_defaults(MemoText, text_defaultProps));
;// CONCATENATED MODULE: ./src/text/index.ts


/* harmony default export */ const src_text = (text_text);
;// CONCATENATED MODULE: ./src/switch/switch.styles.ts

const StyledSwitchContainer = styled('label', {
  WebkitTapHighlightColor: 'transparent',
  d: 'inline-block',
  verticalAlign: 'center',
  whiteSpace: 'nowrap',
  us: 'none',
  transition: '$default',
  padding: '$1 0',
  position: 'relative',
  cursor: 'pointer',
  '@motion': {
    transition: 'none'
  },
  variants: {
    color: {
      default: {
        $$switchColor: '$colors$primary',
        $$switchColorShadow: '$colors$primaryShadow',
        $$switchColorHover: '$colors$primaryDark'
      },
      primary: {
        $$switchColor: '$colors$primary',
        $$switchColorShadow: '$colors$primaryShadow',
        $$switchColorHover: '$colors$primaryDark'
      },
      secondary: {
        $$switchColor: '$colors$secondary',
        $$switchColorShadow: '$colors$secondaryShadow',
        $$switchColorHover: '$colors$secondaryDark'
      },
      success: {
        $$switchColor: '$colors$success',
        $$switchColorShadow: '$colors$successShadow',
        $$switchColorHover: '$colors$successDark'
      },
      warning: {
        $$switchColor: '$colors$warning',
        $$switchColorShadow: '$colors$warningShadow',
        $$switchColorHover: '$colors$warningDark'
      },
      error: {
        $$switchColor: '$colors$error',
        $$switchColorShadow: '$colors$errorShadow',
        $$switchColorHover: '$colors$errorDark'
      }
    },
    size: {
      xs: {
        $$switchWidth: '$space$12',
        $$switchHeight: '$space$9',
        width: ' $$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      sm: {
        $$switchWidth: '$space$14',
        $$switchHeight: '$space$10',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      md: {
        $$switchWidth: '$space$15',
        $$switchHeight: '$space$11',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      lg: {
        $$switchWidth: '$space$17',
        $$switchHeight: '$space$12',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      },
      xl: {
        $$switchWidth: '$space$18',
        $$switchHeight: '$space$13',
        width: '$$switchWidth',
        maxWidth: '$$switchWidth',
        height: '$$switchHeight'
      }
    },
    borderWeight: {
      light: {
        $$switchBorderW: '$borderWeights$light'
      },
      normal: {
        $$switchBorderW: '$borderWeights$normal'
      },
      bold: {
        $$switchBorderW: '$borderWeights$bold'
      },
      extrabold: {
        $$switchBorderW: '$borderWeights$extrabold'
      },
      black: {
        $$switchBorderW: '$borderWeights$black'
      }
    },
    disabled: {
      true: {
        cursor: 'not-allowed'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    }
  },
  defaultVariants: {
    color: 'default',
    size: 'md',
    borderWeight: 'normal'
  }
});
const StyledSwitchInput = styled('input', {}, sharedVisuallyHidden);
const StyledSwitchCircle = styled('span', {
  position: 'absolute',
  display: 'flex',
  size: 'calc($$switchHeight * 0.7)',
  jc: 'center',
  ai: 'center',
  top: '50%',
  transform: 'translateY(-50%)',
  left: 'calc($$switchWidth / 15)',
  transition: 'left 0.25s ease, width 0.2s ease',
  bg: '$background',
  br: '$pill',
  '& svg': {
    bg: 'transparent',
    size: 'calc($$switchHeight * 0.44)'
  },
  '@motion': {
    transition: 'none'
  }
});
const StyledSwitch = styled('div', {
  opacity: 1,
  width: '$$switchWidth',
  height: '$$switchHeight',
  transition: '$default',
  position: 'relative',
  overflow: 'hidden',
  padding: 0,
  br: '$pill',
  bg: '$accents2',
  '@motion': {
    transition: 'none'
  },
  variants: {
    checked: {
      true: {
        bg: '$$switchColor',
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc(100% - ($$switchWidth / 15) - $$switchHeight * 0.7)'
        },
        '&:hover:not(&:active)': {
          bg: '$$switchColorHover'
        }
      }
    },
    bordered: {
      true: {
        bg: 'transparent',
        border: '$$switchBorderW solid $border',
        '&:hover': {
          borderColor: '$$switchColor'
        },
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc(($$switchWidth / 15) - ($$switchBorderW / 2))',
          bg: '$accents2'
        }
      }
    },
    squared: {
      true: {
        br: '2px',
        [`& ${StyledSwitchCircle}`]: {
          br: '2px'
        }
      }
    },
    shadow: {
      true: {}
    },
    disabled: {
      true: {
        borderColor: '$accents2',
        bg: '$accents2',
        [`& ${StyledSwitchCircle}`]: {
          bg: '$accents3'
        }
      }
    },
    animated: {
      true: {
        '&:active': {
          [`& ${StyledSwitchCircle}`]: {
            width: 'calc($$switchHeight * 0.7 + ($$switchWidth / 10))'
          }
        }
      },
      false: {
        transition: 'none',
        [`& ${StyledSwitchCircle}`]: {
          transition: 'none'
        }
      }
    }
  },
  compoundVariants: [{
    // checked && disabled
    checked: true,
    disabled: true,
    css: {
      bg: '$accents3',
      [`& ${StyledSwitchCircle}`]: {
        bg: '$accents2'
      },
      '&:hover:not(&:active)': {
        bg: '$accents3'
      }
    }
  }, // shadow && checked
  {
    shadow: true,
    checked: true,
    css: {
      normalShadowVar: '$$switchColorShadow'
    }
  }, // animated && !checked
  {
    animated: true,
    checked: false,
    css: {
      '&:active': {
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc($$switchWidth / 7.5)'
        }
      }
    }
  }, // animated && checked
  {
    animated: true,
    checked: true,
    css: {
      '&:active': {
        [`& ${StyledSwitchCircle}`]: {
          left: 'calc(100% - ($$switchWidth / 5) - $$switchHeight * 0.7)'
        }
      }
    }
  }, // checked && bordered
  {
    checked: true,
    bordered: true,
    css: {
      bg: '$$switchColor',
      border: '$$switchBorderW solid transparent',
      '&:hover:not(&:active)': {
        borderColor: 'transparent'
      },
      [`& ${StyledSwitchCircle}`]: {
        left: 'calc(100% - ($$switchWidth / 15) - $$switchHeight * 0.7 + ($$switchBorderW / 2))',
        bg: '$background'
      }
    }
  }]
}, sharedFocus); // types
;// CONCATENATED MODULE: ./src/switch/switch.tsx
var switch_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/switch/switch.tsx";








const switch_defaultProps = {
  disabled: false,
  bordered: false,
  shadow: false,
  squared: false,
  animated: true,
  preventDefault: true,
  initialChecked: false
};
const switch_preClass = 'nextui-switch';

const Switch = ({
  initialChecked,
  checked,
  disabled,
  onChange,
  squared,
  bordered,
  shadow,
  icon,
  iconOn,
  iconOff,
  animated,
  preventDefault,
  ...props
}) => {
  const [selfChecked, setSelfChecked] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialChecked);

  if (icon && __DEV__ && (iconOn || iconOff)) {
    src_use_warning('Remove props "icon" if iconOn or iconOff exists.', 'Switch');
  }

  const changeHandle = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(ev => {
    if (disabled) return;
    const selfEvent = {
      target: {
        checked: !selfChecked
      },
      stopPropagation: ev.stopPropagation,
      preventDefault: ev.preventDefault,
      nativeEvent: ev
    };
    setSelfChecked(!selfChecked);
    onChange && onChange(selfEvent);
  }, [disabled, selfChecked, onChange]);
  const {
    bindings
  } = src_use_keyboard(event => {
    changeHandle(event);
  }, [KeyCode.Enter, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const circleIcon = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const hasIcon = icon || iconOn || iconOff;
    const hasIconOn = Boolean(iconOn);
    const hasIconOff = Boolean(iconOff);
    if (!hasIcon) return null;
    if (hasIconOn && selfChecked) return iconOn;
    if (hasIconOff && !selfChecked) return iconOff;
    return hasIcon;
  }, [selfChecked, icon, iconOn, iconOff]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (checked === undefined) return;
    setSelfChecked(checked);
  }, [checked]);
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return selfChecked ? 'checked' : 'unchecked';
  }, [selfChecked]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitchContainer, {
    "data-state": getState,
    disabled: disabled,
    animated: animated,
    ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitchInput, {
      tabIndex: -1,
      type: "checkbox",
      className: clsx(`${switch_preClass}-input`),
      "data-state": getState,
      disabled: disabled,
      checked: selfChecked,
      onChange: changeHandle
    }, void 0, false, {
      fileName: switch_jsxFileName,
      lineNumber: 137,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitch, {
      role: "switch",
      tabIndex: disabled ? -1 : 0,
      checked: selfChecked,
      "aria-checked": selfChecked,
      "aria-disabled": disabled,
      animated: animated,
      disabled: disabled,
      squared: squared,
      bordered: bordered,
      shadow: shadow,
      "data-state": getState,
      className: clsx(switch_preClass, `${switch_preClass}--${getState}`, {
        [`${switch_preClass}-checked`]: selfChecked,
        [`${switch_preClass}-disabled`]: disabled
      }),
      ...bindings,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSwitchCircle, {
        className: `${switch_preClass}-circle`,
        children: circleIcon
      }, void 0, false, {
        fileName: switch_jsxFileName,
        lineNumber: 164,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: switch_jsxFileName,
      lineNumber: 146,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: switch_jsxFileName,
    lineNumber: 131,
    columnNumber: 5
  }, undefined);
};

Switch.toString = () => '.nextui-switch';

const MemoSwitch = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Switch);
/* harmony default export */ const switch_switch = (with_defaults(MemoSwitch, switch_defaultProps));
;// CONCATENATED MODULE: ./src/switch/index.ts


/* harmony default export */ const src_switch = (switch_switch);
;// CONCATENATED MODULE: ./src/backdrop/backdrop.styles.ts

const StyledBackdropContent = styled('div', {
  position: 'relative',
  display: 'inline-block',
  zIndex: '$max',
  outline: 'none',
  width: '100%',
  margin: '$9 auto',
  verticalAlign: 'middle',
  '@sm': {
    width: '90%',
    maxWidth: '90%'
  }
});
const StyledBackdropLayer = styled('div', {
  position: 'fixed',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  size: '100%',
  pe: 'none',
  zIndex: '$max',
  '@motion': {
    transition: 'none'
  },
  variants: {
    blur: {
      true: {
        opacity: 1,
        transition: 'background 0.35s cubic-bezier(0.4, 0, 0.2, 1)',
        backdropFilter: 'saturate(180%) blur(20px)',
        bg: 'rgba(0, 0, 0, 0.1)'
      },
      false: {
        bg: '$black',
        opacity: '$$backdropOpacity',
        transition: 'opacity 0.35s cubic-bezier(0.4, 0, 0.2, 1)'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    }
  }
});
const StyledBackdrop = styled('div', {
  position: 'fixed',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  overflow: 'auto',
  zIndex: '$max',
  WebkitOverflowScrolling: 'touch',
  boxSizing: 'border-box',
  textAlign: 'center',
  '&:before': {
    content: '',
    display: 'inline-block',
    width: 0,
    height: '100%',
    verticalAlign: 'middle'
  },
  '.nextui-backdrop-wrapper-enter .nextui-backdrop-layer-default': {
    opacity: 0
  },
  '.nextui-backdrop-wrapper-enter-active .nextui-backdrop-layer-default': {
    opacity: '$$backdropOpacity'
  },
  '.nextui-backdrop-wrapper-leave .nextui-backdrop-layer-default': {
    opacity: '$$backdropOpacity'
  },
  '.nextui-backdrop-wrapper-leave-active .nextui-backdrop-layer-default': {
    opacity: 0
  },
  '.nextui-backdrop-wrapper-enter .nextui-backdrop-layer-blur': {
    bg: 'rgba(0, 0, 0, 0.1)'
  },
  '.nextui-backdrop-wrapper-enter-active .nextui-backdrop-layer-blur': {
    bg: 'rgba(0, 0, 0, 0.4)'
  },
  '.nextui-backdrop-wrapper-leave .nextui-backdrop-layer-blur': {
    bg: 'rgba(0, 0, 0, 0.4)'
  },
  '.nextui-backdrop-wrapper-leave-active .nextui-backdrop-layer-blur': {
    bg: 'rgba(0, 0, 0, 0.1)'
  },
  variants: {
    fullScreen: {
      true: {
        display: 'inline-flex',
        overflow: 'hidden',
        [`& ${StyledBackdropContent}`]: {
          width: '100vw',
          maxWidth: '100vw',
          height: '100vh',
          margin: 0
        },
        [`& ${StyledBackdropLayer}`]: {
          display: 'none'
        }
      }
    }
  },
  defaultVariants: {
    fullScreen: false
  }
});
;// CONCATENATED MODULE: ./src/backdrop/backdrop.tsx
var backdrop_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/backdrop/backdrop.tsx";

/* eslint-disable @typescript-eslint/no-explicit-any */










const backdrop_defaultProps = {
  onClick: () => {},
  visible: false,
  blur: false,
  animated: true,
  preventDefault: true,
  opacity: 0.5,
  className: ''
};
const backdrop_preClass = 'nextui-backdrop';
const Backdrop = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(({
  children,
  onClick,
  onKeyPress,
  visible,
  maxWidth,
  blur,
  animated,
  opacity,
  preventDefault,
  className,
  css,
  ...props
}) => {
  const [, setIsContentMouseDown, IsContentMouseDownRef] = src_use_current_state(false);

  const clickHandler = event => {
    if (IsContentMouseDownRef.current) return;
    onClick && onClick(event);
  };

  const childrenClickHandler = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(event => {
    event.stopPropagation();
  }, []);

  const mouseUpHandler = () => {
    if (!IsContentMouseDownRef.current) return;
    const timer = setTimeout(() => {
      setIsContentMouseDown(false);
      clearTimeout(timer);
    }, 0);
  };

  const {
    bindings
  } = src_use_keyboard(ev => {
    onKeyPress && onKeyPress(ev);
  }, [KeyCode.Escape, KeyCode.Space], {
    disableGlobalEvent: true,
    preventDefault
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  const renderChildren = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBackdrop, {
      tabIndex: -1,
      role: "button",
      "aria-hidden": true,
      "data-state": getState,
      onClick: clickHandler,
      onMouseUp: mouseUpHandler,
      css: {
        $$backdropOpacity: opacity,
        ...css
      },
      className: clsx(backdrop_preClass, `${backdrop_preClass}--${getState}`, className),
      ...bindings,
      ...props,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBackdropLayer, {
        className: clsx(`${backdrop_preClass}-layer`, blur ? `${backdrop_preClass}-layer-blur` : `${backdrop_preClass}-layer-default`),
        animated: animated,
        blur: blur
      }, void 0, false, {
        fileName: backdrop_jsxFileName,
        lineNumber: 117,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBackdropContent, {
        className: `${backdrop_preClass}-content`,
        onClick: childrenClickHandler,
        css: {
          maxWidth
        },
        onMouseDown: () => setIsContentMouseDown(true),
        children: children
      }, void 0, false, {
        fileName: backdrop_jsxFileName,
        lineNumber: 125,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: backdrop_jsxFileName,
      lineNumber: 102,
      columnNumber: 9
    }, undefined);
  }, [children]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
    children: animated ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
      name: `${backdrop_preClass}-wrapper`,
      visible: visible,
      enterTime: 20,
      leaveTime: 20,
      clearTime: 150,
      children: renderChildren
    }, void 0, false, {
      fileName: backdrop_jsxFileName,
      lineNumber: 142,
      columnNumber: 11
    }, undefined) : visible ? renderChildren : null
  }, void 0, false);
});

if (__DEV__) {
  Backdrop.displayName = 'NextUI - Backdrop';
}

Backdrop.toString = () => '.nextui-backdrop';

/* harmony default export */ const backdrop = (with_defaults(Backdrop, backdrop_defaultProps));
;// CONCATENATED MODULE: ./src/backdrop/index.ts


/* harmony default export */ const src_backdrop = (backdrop);
;// CONCATENATED MODULE: ./src/user/user.styles.ts

const StyledUser = styled('div', {
  d: 'inline-flex',
  p: '0 $sm',
  jc: 'center',
  ai: 'center',
  w: 'max-content',
  maxWidth: '100%'
});
const StyledUserInfo = styled('div', {
  ml: '$sm',
  d: 'inline-flex',
  fd: 'column',
  whiteSpace: 'nowrap'
});
const StyledUserName = styled('span', {
  fontSize: '$xs',
  color: '$text',
  lh: '$sm',
  tt: 'capitalize',
  fontWeight: '$medium',
  maxW: '$60',
  to: 'ellipsis',
  // text overflow
  ov: 'hidden' // overflow

});
const StyledUserDesc = styled('span', {
  fontSize: '$tiny',
  color: '$accents4',
  '*:first-child': {
    mt: 0
  },
  '*:last-child': {
    mb: 0
  }
});
const StyledUserLink = styled('a', {
  a: {
    '&:hover': {
      opacity: 0.7
    }
  }
});
;// CONCATENATED MODULE: ./src/user/user.tsx
var user_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/user/user.tsx";




const user_defaultProps = {
  size: 'lg',
  squared: false,
  bordered: false
};
const user_preClass = 'nextui-user';

const User = ({
  src,
  text,
  name,
  children,
  altText,
  color,
  squared,
  bordered,
  size,
  description,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUser, { ...props,
    children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_avatar, {
      className: `${user_preClass}-avatar`,
      src: src,
      color: color,
      squared: squared,
      zoomed: props.zoomed,
      pointer: props.pointer,
      bordered: bordered,
      text: text,
      size: size,
      alt: altText
    }, void 0, false, {
      fileName: user_jsxFileName,
      lineNumber: 56,
      columnNumber: 7
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUserInfo, {
      className: `${user_preClass}-info`,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUserName, {
        className: `${user_preClass}-name`,
        children: name
      }, void 0, false, {
        fileName: user_jsxFileName,
        lineNumber: 69,
        columnNumber: 9
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUserDesc, {
        className: `${user_preClass}-desc`,
        children: description || children
      }, void 0, false, {
        fileName: user_jsxFileName,
        lineNumber: 70,
        columnNumber: 9
      }, undefined)]
    }, void 0, true, {
      fileName: user_jsxFileName,
      lineNumber: 68,
      columnNumber: 7
    }, undefined)]
  }, void 0, true, {
    fileName: user_jsxFileName,
    lineNumber: 55,
    columnNumber: 5
  }, undefined);
};

User.toString = () => '.nextui-user';

/* harmony default export */ const user = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(User));
;// CONCATENATED MODULE: ./src/user/user-link.tsx
var user_link_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/user/user-link.tsx";





const UserLink = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  href,
  className,
  children,
  ...props
}, ref) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledUserLink, { ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_link, {
      ref: ref,
      href: href,
      color: "primary",
      target: "_blank",
      rel: "noopener",
      children: children
    }, void 0, false, {
      fileName: user_link_jsxFileName,
      lineNumber: 23,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: user_link_jsxFileName,
    lineNumber: 22,
    columnNumber: 7
  }, undefined);
});

if (__DEV__) {
  UserLink.displayName = 'NextUI - UserLink';
}

UserLink.toString = () => '.nextui-user-link';

const MemoUserLink = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(UserLink);
/* harmony default export */ const user_link = (MemoUserLink);
;// CONCATENATED MODULE: ./src/user/index.ts


user.Link = user_link;

/* harmony default export */ const src_user = (user);
;// CONCATENATED MODULE: ./src/progress/progress.styles.ts

const indeterminateAnimation = keyframes({
  '0%': {
    left: '-40%'
  },
  '100%': {
    left: '100%'
  }
});
const StyledProgress = styled('div', {
  margin: 0,
  padding: 0,
  width: '100%',
  position: 'relative',
  overflow: 'visible',
  variants: {
    color: {
      default: {
        $$progressColor: '$colors$primary',
        $$progressShadowColor: '$colors$primaryShadow'
      },
      primary: {
        $$progressColor: '$colors$primary',
        $$progressShadowColor: '$colors$primaryShadow'
      },
      secondary: {
        $$progressColor: '$colors$secondary',
        $$progressShadowColor: '$colors$secondaryShadow'
      },
      success: {
        $$progressColor: '$colors$success',
        $$progressShadowColor: '$colors$successShadow'
      },
      warning: {
        $$progressColor: '$colors$warning',
        $$progressShadowColor: '$colors$warningShadow'
      },
      error: {
        $$progressColor: '$colors$error',
        $$progressShadowColor: '$colors$errorShadow'
      },
      gradient: {
        $$progressColor: '$colors$gradient',
        $$progressShadowColor: '$colors$primaryShadow'
      }
    },
    status: {
      default: {
        bg: '$accents2'
      },
      primary: {
        bg: '$primaryLight'
      },
      secondary: {
        bg: '$secondaryLight'
      },
      success: {
        bg: '$successLight'
      },
      warning: {
        bg: '$warningLight'
      },
      error: {
        bg: '$errorLight'
      }
    },
    size: {
      xs: {
        $$progressHeight: '$space$2',
        height: '$$progressHeight',
        br: '$$progressHeight'
      },
      sm: {
        $$progressHeight: '$space$4',
        height: '$$progressHeight',
        br: '$$progressHeight'
      },
      md: {
        $$progressHeight: '$space$8',
        height: '$$progressHeight',
        br: '$$progressHeight'
      },
      lg: {
        $$progressHeight: '$space$10',
        height: '$$progressHeight',
        br: '$$progressHeight'
      },
      xl: {
        $$progressHeight: '$space$11',
        height: '$$progressHeight',
        br: '$$progressHeight'
      }
    },
    indeterminated: {
      true: {
        overflow: 'hidden'
      }
    },
    squared: {
      true: {
        br: 'calc($$progressHeight * 0.25)'
      }
    }
  },
  defaultVariants: {
    color: 'defuault',
    status: 'default',
    size: 'md'
  }
});
const StyledProgressBar = styled('div', {
  margin: 0,
  padding: 0,
  width: 0,
  opacity: 0,
  height: '100%',
  minWidth: 'inherit',
  bg: '$$progressColor',
  br: 'inherit',
  transition: 'width 0.5s cubic-bezier(0.4, 0, 0.2, 1)',
  '@motion': {
    transition: 'none'
  },
  variants: {
    animated: {
      false: {
        transition: 'none'
      }
    },
    shadow: {
      true: {
        normalShadowVar: '$$progressShadowColor'
      }
    },
    striped: {
      true: {
        backgroundImage: 'linear-gradient(45deg, rgba(0, 0, 0, 0.1) 25%, transparent 25%, transparent 50%, rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0.1) 75%, transparent 75%, transparent)',
        backgroundSize: '$space$lg $space$lg'
      }
    },
    indeterminated: {
      true: {
        position: 'absolute',
        width: '0%',
        transitionProperty: 'background-color, width, left, border-color,opacity, shadow, transform',
        transitionDuration: '300ms',
        willChange: 'left',
        minWidth: '50%',
        animation: `1s ease 0s infinite normal none running ${indeterminateAnimation}`
      }
    }
  }
});
;// CONCATENATED MODULE: ./src/progress/progress.tsx
var progress_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/progress/progress.tsx";








const progress_defaultProps = {
  striped: false,
  animated: true,
  shadow: false,
  indeterminated: false,
  value: 0,
  min: 0,
  max: 100
};
const progress_preClass = 'nextui-progress';

const Progress = ({
  value: valueProp,
  max,
  min,
  striped,
  animated,
  shadow,
  indeterminated,
  css,
  ...props
}) => {
  const value = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => valueProp > max ? max : valueProp < min ? min : valueProp, [valueProp, min, max]);
  const percent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => valueToPercent(value, min, max), [value, min, max]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledProgress, {
    role: "progressbar",
    indeterminated: indeterminated,
    css: {
      'nextui-progress-wrapper-enter': {
        opacity: 0
      },
      '.nextui-progress-wrapper-enter-active': {
        opacity: 1,
        width: `${percent}%`
      },
      ...css
    },
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
      visible: true,
      name: `${progress_preClass}-wrapper`,
      enterTime: 10,
      leaveTime: 20,
      clearTime: 300,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledProgressBar, {
        className: clsx(`${progress_preClass}-bar`, {
          [`${progress_preClass}-striped`]: striped,
          [`${progress_preClass}-indeterminated`]: indeterminated
        }),
        "aria-valuenow": value,
        "aria-valuemin": min,
        "aria-valuemax": max,
        striped: striped,
        animated: animated,
        shadow: shadow,
        indeterminated: indeterminated,
        ...props
      }, void 0, false, {
        fileName: progress_jsxFileName,
        lineNumber: 94,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: progress_jsxFileName,
      lineNumber: 87,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: progress_jsxFileName,
    lineNumber: 72,
    columnNumber: 5
  }, undefined);
};

if (__DEV__) {
  Progress.displayName = 'NextUI - Progress';
}

Progress.toString = () => '.nextui-progress';

const MemoProgress = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Progress);
/* harmony default export */ const progress = (with_defaults(MemoProgress, progress_defaultProps));
;// CONCATENATED MODULE: ./src/progress/index.ts


/* harmony default export */ const src_progress = (progress);
;// CONCATENATED MODULE: ./src/utils/clear-icon.tsx
var clear_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/utils/clear-icon.tsx";



const clear_icon_defaultProps = {
  width: 24,
  height: 24,
  plain: false,
  className: ''
};

const Close = ({
  size,
  fill,
  plain,
  width,
  height,
  className,
  ...props
}) => {
  if (plain) {
    return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
      width: size || width,
      height: size || height,
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: fill,
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round",
      className: className,
      ...props,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M18 6L6 18M6 6l12 12"
      }, void 0, false, {
        fileName: clear_icon_jsxFileName,
        lineNumber: 43,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: clear_icon_jsxFileName,
      lineNumber: 31,
      columnNumber: 7
    }, undefined);
  }

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
    width: size || width,
    height: size || height,
    viewBox: "0 0 24 24",
    className: className,
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
      d: "M12 2a10 10 0 1010 10A10.016 10.016 0 0012 2zm3.36 12.3a.754.754 0 010 1.06.748.748 0 01-1.06 0l-2.3-2.3-2.3 2.3a.748.748 0 01-1.06 0 .754.754 0 010-1.06l2.3-2.3-2.3-2.3A.75.75 0 019.7 8.64l2.3 2.3 2.3-2.3a.75.75 0 011.06 1.06l-2.3 2.3z",
      fill: fill
    }, void 0, false, {
      fileName: clear_icon_jsxFileName,
      lineNumber: 55,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: clear_icon_jsxFileName,
    lineNumber: 48,
    columnNumber: 5
  }, undefined);
};

const MemoClose = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_.memo(Close);
/* harmony default export */ const clear_icon = (with_defaults(MemoClose, clear_icon_defaultProps));
;// CONCATENATED MODULE: ./src/modal/modal.styles.ts

const reboundAnimation = keyframes({
  '0%': {
    transform: 'scale(0.95)'
  },
  '40%': {
    transform: 'scale(1.02)'
  },
  '80%': {
    transform: 'scale(0.98)'
  },
  '100%': {
    transform: 'scale(1)'
  }
});
const appearanceIn = keyframes({
  '0%': {
    opacity: 0,
    transform: 'scale(0.95)'
  },
  '60%': {
    opacity: 0.75,
    transform: 'scale(1.02)'
  },
  '100%': {
    opacity: 1,
    transform: 'scale(1)'
  }
});
const appearanceOut = keyframes({
  '0%': {
    opacity: 1,
    transform: 'scale(1)'
  },
  '100%': {
    opacity: 0,
    transform: 'scale(0.95)'
  }
});
const StyledModalHideTab = styled('div', {
  outline: 'none',
  overflow: 'hidden',
  width: 0,
  height: 0,
  opacity: 0
});
const StyledModalCloseButton = styled('button', {
  position: 'absolute',
  background: 'transparent',
  border: 'none',
  zIndex: '$1',
  top: '$space$3',
  right: '$space$2',
  margin: 0,
  d: 'inline-flex',
  ai: 'center',
  height: 'auto',
  cursor: 'pointer',
  boxSizing: 'border-box',
  transition: '$default',
  padding: 'calc($space$sm * 0.5)',
  color: '$accents4',
  br: '$space$5',
  svg: {
    color: 'currentColor'
  },
  '&:hover': {
    svg: {
      opacity: 0.8
    }
  },
  variants: {
    disabled: {
      true: {
        cursor: 'not-allowed'
      }
    }
  }
}, sharedFocus);
const StyledModalHeader = styled('div', {
  display: 'flex',
  flexShrink: 0,
  ai: 'center',
  ov: 'hidden',
  color: 'inherit',
  padding: '$sm $10',
  fs: '$xs',
  variants: {
    noPadding: {
      true: {
        padding: 0
      }
    },
    autoMargin: {
      true: {
        '> *:first-child': {
          mt: 0
        },
        '> *:last-child': {
          mb: 0
        }
      }
    }
  }
});
const StyledModalBody = styled('div', {
  display: 'flex',
  flexDirection: 'column',
  flex: '1 1 auto',
  padding: '$sm $10',
  oy: 'auto',
  position: 'relative',
  ta: 'left',
  variants: {
    noPadding: {
      true: {
        flex: 1,
        padding: 0
      }
    },
    autoMargin: {
      true: {
        '> *:first-child': {
          mt: 0
        },
        '> *': {
          mb: '$8'
        },
        '> *:last-child': {
          mb: 0
        }
      }
    }
  }
});
const StyledModalFooter = styled('div', {
  d: 'flex',
  flexWrap: 'wrap',
  flexShrink: 0,
  overflow: 'hidden',
  color: 'inherit',
  ai: 'center',
  fs: '$xs',
  padding: '$sm $lg',
  variants: {
    noPadding: {
      true: {
        padding: 0
      }
    },
    autoMargin: {
      true: {
        '> *': {
          m: '$2'
        }
      }
    }
  }
});
const StyledModal = styled('section', {
  maxWidth: '100%',
  verticalAlign: 'middle',
  overflow: 'hidden',
  height: 'fit-content(20em)',
  maxHeight: 'inherit',
  display: 'flex',
  outline: 'none',
  flexDirection: 'column',
  position: 'relative',
  boxSizing: 'border-box',
  color: '$foreground',
  br: '$lg',
  boxShadow: '$lg',
  bg: '$background',
  animationFillMode: 'forwards',
  '&.nextui-modal-wrapper-enter:not(.nextui-modal-rendered)': {
    animationName: appearanceIn,
    animationDuration: '200ms',
    animationTimingFunction: 'ease-in',
    animationDirection: 'normal'
  },
  '&.nextui-modal-wrapper-leave': {
    animationName: appearanceOut,
    animationDuration: '50ms',
    animationTimingFunction: 'ease-out'
  },
  variants: {
    fullScreen: {
      true: {
        size: '100%',
        maxHeight: '100%'
      },
      false: {
        '&.nextui-modal-rebound': {
          animationDuration: '250ms',
          animationName: reboundAnimation,
          animationTimingFunction: 'ease',
          animationFillMode: 'forwards'
        }
      }
    },
    scroll: {
      true: {
        maxHeight: 'calc(100vh - 200px)'
      }
    },
    closeButton: {
      true: {
        paddingTop: '$lg',
        [`& ${StyledModalCloseButton}`]: {
          svg: {
            size: '$10'
          }
        }
      }
    },
    isDark: {
      true: {
        bg: '$accents1'
      }
    }
  },
  compoundVariants: [{
    // scroll && fullScreen
    scroll: true,
    fullScreen: true,
    css: {
      maxHeight: '100%'
    }
  }]
});
;// CONCATENATED MODULE: ./src/modal/modal-close-button.tsx
var modal_close_button_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-close-button.tsx";





const ModalCloseButton = ({
  onClick,
  ...props
}) => {
  const clickHandler = event => {
    event.preventDefault();
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
    onClick && onClick(event);
  };

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalCloseButton, {
    type: "button",
    onClick: clickHandler,
    className: "nextui-modal-close-icon",
    "aria-label": "Close",
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(clear_icon, {
      plain: true,
      size: 18,
      className: "nextui-modal-close-icon-svg",
      fill: "currentColor",
      "aria-hidden": true
    }, void 0, false, {
      fileName: modal_close_button_jsxFileName,
      lineNumber: 39,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: modal_close_button_jsxFileName,
    lineNumber: 32,
    columnNumber: 5
  }, undefined);
};

ModalCloseButton.toString = () => '.nextui-modal-close-icon';

const MemoModalCloseButton = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalCloseButton);
/* harmony default export */ const modal_close_button = (MemoModalCloseButton);
;// CONCATENATED MODULE: ./src/modal/modal-wrapper.tsx
var modal_wrapper_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-wrapper.tsx";











const modal_wrapper_defaultProps = {
  className: '',
  visible: false,
  rebound: false
};
const modal_wrapper_preClass = 'nextui-modal';

const ModalWrapper = ({
  className,
  children,
  visible,
  fullScreen,
  closeButton,
  rebound,
  animated,
  onCloseButtonClick,
  scroll,
  ...props
}) => {
  const modalContent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const tabStart = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const tabEnd = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [rendered, setRendered] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const {
    isDark
  } = src_use_theme();
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    const timer = setTimeout(() => {
      setRendered(true);
      clearTimeout(timer);
    }, 300);
    return () => clearTimeout(timer);
  }, []);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!visible) return;
    const activeElement = document.activeElement;
    const isChild = isChildElement(modalContent.current, activeElement);
    if (isChild) return;
    tabStart.current && tabStart.current.focus();
  }, [visible]);

  const onKeyDown = event => {
    const isTabDown = event.keyCode === KeyCode.Tab;
    if (!visible || !isTabDown) return;
    const activeElement = document.activeElement;

    if (event.shiftKey) {
      if (activeElement === tabStart.current) {
        tabEnd.current && tabEnd.current.focus();
      }
    } else {
      if (activeElement === tabEnd.current) {
        tabStart.current && tabStart.current.focus();
      }
    }
  };

  const handleClose = () => {
    onCloseButtonClick && onCloseButtonClick();
  };

  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return visible ? 'open' : 'closed';
  }, [visible]);
  const renderChildren = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return (
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions
      (0,jsx_dev_runtime.jsxDEV)(StyledModal, {
        role: "dialog",
        tabIndex: -1,
        "aria-modal": visible,
        ref: modalContent,
        "data-state": getState,
        fullScreen: fullScreen,
        scroll: scroll,
        closeButton: closeButton,
        isDark: isDark,
        className: clsx(modal_wrapper_preClass, `${modal_wrapper_preClass}--${getState}`, {
          [`${modal_wrapper_preClass}-fullscreen`]: fullScreen,
          [`${modal_wrapper_preClass}-with-close-button`]: closeButton,
          [`${modal_wrapper_preClass}-rebound`]: rebound,
          [`${modal_wrapper_preClass}-rendered`]: rendered
        }, className),
        ...props,
        onKeyDown: onKeyDown,
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalHideTab, {
          role: "button",
          tabIndex: 0,
          className: `${modal_wrapper_preClass}-hide-tab`,
          "aria-hidden": "true",
          ref: tabStart
        }, void 0, false, {
          fileName: modal_wrapper_jsxFileName,
          lineNumber: 127,
          columnNumber: 9
        }, undefined), closeButton && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(modal_close_button, {
          onClick: handleClose
        }, void 0, false, {
          fileName: modal_wrapper_jsxFileName,
          lineNumber: 134,
          columnNumber: 25
        }, undefined), children, /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalHideTab, {
          role: "button",
          tabIndex: 0,
          className: `${modal_wrapper_preClass}-hide-tab`,
          "aria-hidden": "true",
          ref: tabEnd
        }, void 0, false, {
          fileName: modal_wrapper_jsxFileName,
          lineNumber: 136,
          columnNumber: 9
        }, undefined)]
      }, void 0, true, {
        fileName: modal_wrapper_jsxFileName,
        lineNumber: 103,
        columnNumber: 7
      }, undefined)
    );
  }, [rebound, children]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
    children: animated ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(css_transition, {
      name: `${modal_wrapper_preClass}-wrapper`,
      visible: visible,
      enterTime: 20,
      leaveTime: 20,
      clearTime: 300,
      children: renderChildren
    }, void 0, false, {
      fileName: modal_wrapper_jsxFileName,
      lineNumber: 150,
      columnNumber: 9
    }, undefined) : visible ? renderChildren : null
  }, void 0, false);
};

ModalWrapper.toString = () => '.nextui-modal-wrapper';

/* harmony default export */ const modal_wrapper = (with_defaults(ModalWrapper, modal_wrapper_defaultProps));
;// CONCATENATED MODULE: ./src/modal/modal-context.ts

const modal_context_defaultContext = {};
const ModalContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(modal_context_defaultContext);
const useModalContext = () => React.useContext(ModalContext);
;// CONCATENATED MODULE: ./src/modal/modal.tsx
var modal_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal.tsx";











const modal_defaultProps = {
  width: '400px',
  className: '',
  preventClose: false,
  fullScreen: false,
  closeButton: false,
  animated: true,
  blur: false,
  scroll: false,
  noPadding: false
};

const Modal = ({
  children,
  onClose,
  onOpen,
  open,
  autoMargin,
  width: wrapperWidth,
  className,
  preventClose,
  blur,
  animated,
  fullScreen,
  noPadding,
  ...props
}) => {
  const portal = src_use_portal('modal');
  const [, setBodyHidden] = src_use_body_scroll(null, {
    scrollLayer: true
  });
  const [visible, setVisible, visibleRef] = src_use_current_state(false);
  const [rebound, setRebound] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);

  const closeModal = () => {
    onClose && onClose();
    setVisible(false);
    setBodyHidden(false);
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (open === undefined) return;

    if (open) {
      onOpen && onOpen();
    }

    if (!open && visibleRef.current) {
      onClose && onClose();
    }

    setVisible(open);
    setBodyHidden(open);
  }, [open]);

  const toggleRebound = () => {
    setRebound(true);
    const timer = setTimeout(() => {
      setRebound(false);
      clearTimeout(timer);
    }, 300);
  };

  const {
    bindings
  } = src_use_keyboard(() => {
    if (preventClose) {
      toggleRebound();
      return;
    }

    closeModal();
  }, KeyCode.Escape, {
    disableGlobalEvent: true,
    preventDefault: true
  });

  const closeFromBackdrop = () => {
    if (preventClose) {
      toggleRebound();
      return;
    }

    closeModal();
  };

  const modalConfig = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    close: closeModal,
    autoMargin,
    noPadding
  }), []);
  if (!portal) return null;
  return /*#__PURE__*/(0,external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_.createPortal)( /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(ModalContext.Provider, {
    value: modalConfig,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_backdrop, {
      onClick: closeFromBackdrop,
      visible: visible,
      maxWidth: wrapperWidth,
      fullScreen: fullScreen,
      blur: blur,
      animated: animated,
      ...bindings,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(modal_wrapper, {
        visible: visible,
        onCloseButtonClick: closeModal,
        className: className,
        fullScreen: fullScreen,
        rebound: rebound,
        animated: animated,
        ...props,
        children: children
      }, void 0, false, {
        fileName: modal_jsxFileName,
        lineNumber: 142,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: modal_jsxFileName,
      lineNumber: 133,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: modal_jsxFileName,
    lineNumber: 132,
    columnNumber: 5
  }, undefined), portal);
};

if (__DEV__) {
  src_backdrop.displayName = 'NextUI - Modal';
}

Modal.toString = () => '.nextui-modal';

Modal.defaultProps = modal_defaultProps;
/* harmony default export */ const modal = (Modal);
;// CONCATENATED MODULE: ./src/modal/modal-header.tsx
var modal_header_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-header.tsx";






const modal_header_defaultProps = {
  className: '',
  justify: 'center',
  autoMargin: true
};
const modal_header_preClass = 'nextui-modal-header';

const ModalHeader = ({
  children,
  className,
  justify,
  autoMargin: autoMarginProp,
  css,
  ...props
}) => {
  const {
    autoMargin: autoMarginContext,
    noPadding
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(ModalContext);
  const autoMargin = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return autoMarginContext !== undefined ? autoMarginContext : autoMarginProp;
  }, [autoMarginProp, autoMarginContext]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalHeader, {
    className: clsx(modal_header_preClass, {
      [`${modal_header_preClass}-auto-margin`]: autoMargin,
      [`${modal_header_preClass}-no-padding`]: noPadding
    }, className),
    noPadding: noPadding,
    autoMargin: autoMargin,
    css: {
      justifyContent: justify,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: modal_header_jsxFileName,
    lineNumber: 47,
    columnNumber: 5
  }, undefined);
};

ModalHeader.toString = () => '.nextui-modal-header';

const MemoModalHeader = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalHeader);
/* harmony default export */ const modal_header = (with_defaults(MemoModalHeader, modal_header_defaultProps));
;// CONCATENATED MODULE: ./src/modal/modal-body.tsx
var modal_body_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-body.tsx";






const modal_body_defaultProps = {
  className: '',
  autoMargin: true
};
const modal_body_preClass = 'nextui-modal-body';

const ModalBody = ({
  className,
  children,
  autoMargin: autoMarginProp,
  ...props
}) => {
  const {
    autoMargin: autoMarginContext,
    noPadding
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(ModalContext);
  const autoMargin = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return autoMarginContext !== undefined ? autoMarginContext : autoMarginProp;
  }, [autoMarginProp, autoMarginContext]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalBody, {
    className: clsx(modal_body_preClass, {
      [`${modal_body_preClass}-auto-margin`]: autoMargin,
      [`${modal_body_preClass}-no-padding`]: noPadding
    }, className),
    autoMargin: autoMargin,
    noPadding: noPadding,
    ...props,
    children: children
  }, void 0, false, {
    fileName: modal_body_jsxFileName,
    lineNumber: 41,
    columnNumber: 5
  }, undefined);
};

ModalBody.toString = () => '.nextui-modal-body';

const MemoModalBody = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalBody);
/* harmony default export */ const modal_body = (with_defaults(MemoModalBody, modal_body_defaultProps));
;// CONCATENATED MODULE: ./src/modal/modal-footer.tsx
var modal_footer_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/modal/modal-footer.tsx";






const modal_footer_defaultProps = {
  className: '',
  justify: 'flex-end',
  autoMargin: true
};
const modal_footer_preClass = 'nextui-modal-footer';

const ModalFooter = ({
  children,
  className,
  justify,
  autoMargin: autoMarginProp,
  css,
  ...props
}) => {
  const {
    autoMargin: autoMarginContext,
    noPadding
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(ModalContext);
  const autoMargin = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return autoMarginContext !== undefined ? autoMarginContext : autoMarginProp;
  }, [autoMarginProp, autoMarginContext]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledModalFooter, {
    className: clsx(modal_footer_preClass, {
      [`${modal_footer_preClass}-auto-margin`]: autoMargin,
      [`${modal_footer_preClass}-no-padding`]: noPadding
    }, className),
    noPadding: noPadding,
    autoMargin: autoMargin,
    css: {
      justifyContent: justify,
      ...css
    },
    ...props,
    children: children
  }, void 0, false, {
    fileName: modal_footer_jsxFileName,
    lineNumber: 46,
    columnNumber: 5
  }, undefined);
};

ModalFooter.toString = () => '.nextui-modal-footer';

const MemoModalFooter = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(ModalFooter);
/* harmony default export */ const modal_footer = (with_defaults(MemoModalFooter, modal_footer_defaultProps));
;// CONCATENATED MODULE: ./src/modal/index.ts




modal.Header = modal_header;
modal.Body = modal_body;
modal.Footer = modal_footer;

/* harmony default export */ const src_modal = (modal);
;// CONCATENATED MODULE: ./src/modal/use-modal.ts


const useModal = (initialVisible = false) => {
  const [visible, setVisible, currentRef] = src_use_current_state(initialVisible);
  return {
    visible,
    setVisible,
    currentRef,
    bindings: {
      open: visible,
      onClose: () => setVisible(false)
    }
  };
};

/* harmony default export */ const use_modal = (useModal);
;// CONCATENATED MODULE: ./src/pagination/pagination.styles.ts

const paginationAnimation = keyframes({
  '0%': {
    transform: 'scale(1)'
  },
  '60%': {
    transform: 'scale($$paginationScaleTransform)'
  },
  '100%': {
    transform: 'scale(1)'
  }
});
const StyledPaginationEllipsis = styled('svg', {
  color: 'currentColor',
  stroke: 'currentColor',
  variants: {
    isEllipsis: {
      true: {
        transform: '0deg'
      }
    },
    isBefore: {
      true: {}
    }
  },
  compoundVariants: [{
    // isEllipsis && isBefore
    isEllipsis: true,
    isBefore: true,
    css: {
      transform: 'rotate(180deg)'
    }
  }]
});
const StyledPaginationIcon = styled('svg', {
  transform: 'rotate(180deg)',
  variants: {
    isPrev: {
      true: {
        transform: 'rotate(0deg)'
      }
    }
  }
});
const StyledPaginationItemContent = styled('span', {
  position: 'relative',
  display: 'inline-flex',
  alignItems: 'center',
  top: 0,
  left: 0,
  zIndex: '$2'
});
const StyledPaginationItem = styled('button', {
  border: 'none',
  position: 'relative',
  display: 'inline-flex',
  margin: '0 $$paginationItemMargin',
  ai: 'center',
  jc: 'center',
  padding: 0,
  boxSizing: 'border-box',
  tt: 'capitalize',
  us: 'none',
  whiteSpace: 'nowrap',
  ta: 'center',
  verticalAlign: 'middle',
  bs: 'none',
  outline: 'none',
  height: '$$paginationSize',
  minWidth: '$$paginationSize',
  fs: 'inherit',
  cursor: 'pointer',
  br: '$$paginationItemRadius',
  color: '$text',
  bg: '$accents1',
  '@motion': {
    transition: 'none'
  },
  '&:hover': {
    bg: '$accents2'
  },
  [`& ${StyledPaginationIcon}`]: {
    size: '$$paginationFontSize'
  },
  [`& ${StyledPaginationEllipsis}`]: {
    size: '$$paginationFontSize'
  },
  variants: {
    active: {
      true: {
        fontWeight: '$bold',
        cursor: 'default',
        boxShadow: '$sm',
        [`& ${StyledPaginationItemContent}`]: {
          color: '$white'
        }
      }
    },
    disabled: {
      true: {
        color: '$accents4',
        cursor: 'not-allowed'
      }
    },
    bordered: {
      true: {
        bg: 'transparent',
        border: '$$paginationItemBorderWeight solid $accents2'
      }
    },
    onlyDots: {
      true: {}
    },
    preserveContent: {
      true: {}
    },
    animated: {
      true: {
        transition: 'transform 0.25s ease 0s, background 0.25s ease 0s, box-shadow 0.25s ease 0s'
      },
      false: {
        transition: 'none'
      }
    }
  },
  compoundVariants: [// onlyDots && !preserveContent
  {
    onlyDots: true,
    preserveContent: false,
    css: {
      [`& ${StyledPaginationItemContent}`]: {
        display: 'none'
      }
    }
  }, // animated && !disabled && !active
  {
    animated: true,
    disabled: false,
    active: false,
    css: {
      '&:active': {
        transform: 'scale($$paginationScaleTransform)',
        fs: 'calc($$paginationFontSize * 0.9)'
      }
    }
  }]
}, sharedFocus);
const StyledPaginationHighlight = styled('div', {
  position: 'absolute',
  contain: 'strict',
  top: '0px',
  zIndex: '$1',
  bg: '$$paginationColor',
  br: '$$paginationItemRadius',
  height: '$$paginationSize',
  minWidth: '$$paginationSize',
  animationName: `${paginationAnimation}`,
  animationDirection: 'normal',
  '&.nextui-pagination-highlight--moving': {
    transform: 'scale($$paginationScaleTransform)'
  },
  '@motion': {
    transition: 'none',
    '&.nextui-pagination-highlight--moving': {
      transform: 'scale(1)'
    }
  },
  variants: {
    animated: {
      true: {
        animationDuration: '350ms',
        animationTimingFunction: 'ease',
        transition: 'left 350ms ease 0s, transform 300ms ease 0s'
      },
      false: {
        animationDuration: 'none',
        animationTimingFunction: 'none',
        transition: 'none',
        '&.nextui-pagination-highlight--moving': {
          transform: 'scale(1)'
        }
      }
    },
    noMargin: {
      true: {
        br: '$squared'
      }
    },
    rounded: {
      true: {}
    },
    shadow: {
      true: {
        normalShadowVar: '$$paginationShadowColor'
      }
    }
  },
  compoundVariants: [{
    // rounded && noMargin
    rounded: true,
    noMargin: true,
    css: {
      br: '$pill'
    }
  }]
});
const StyledPagination = styled('nav', {
  m: 0,
  p: 0,
  d: 'inline-flex',
  position: 'relative',
  fontVariant: 'tabular-nums',
  fontFeatureSettings: 'tnum',
  variants: {
    color: {
      default: {
        $$paginationColor: '$colors$primary',
        $$paginationShadowColor: '$colors$primaryShadow'
      },
      primary: {
        $$paginationColor: '$colors$primary',
        $$paginationShadowColor: '$colors$primaryShadow'
      },
      secondary: {
        $$paginationColor: '$colors$secondary',
        $$paginationShadowColor: '$colors$secondaryShadow'
      },
      success: {
        $$paginationColor: '$colors$success',
        $$paginationShadowColor: '$colors$successShadow'
      },
      warning: {
        $$paginationColor: '$colors$warning',
        $$paginationShadowColor: '$colors$warningShadow'
      },
      error: {
        $$paginationColor: '$colors$error',
        $$paginationShadowColor: '$colors$errorShadow'
      },
      gradient: {
        $$paginationColor: '$colors$gradient',
        $$paginationShadowColor: '$colors$primaryShadow'
      }
    },
    size: {
      xs: {
        $$paginationWidth: '$space$10',
        $$paginationFontSize: '$space$5',
        fs: '$$paginationFontSize'
      },
      sm: {
        $$paginationWidth: '$space$12',
        $$paginationFontSize: '$space$6',
        fs: '$$paginationFontSize'
      },
      md: {
        $$paginationWidth: '$space$13',
        $$paginationFontSize: '$space$7',
        fs: '$$paginationFontSize'
      },
      lg: {
        $$paginationWidth: '$space$14',
        $$paginationFontSize: '$space$8',
        fs: '$$paginationFontSize'
      },
      xl: {
        $$paginationWidth: '$space$15',
        $$paginationFontSize: '$space$9',
        fs: '$$paginationFontSize'
      }
    },
    borderWeight: {
      light: {
        $$paginationItemBorderWeight: '$borderWeights$light'
      },
      normal: {
        $$paginationItemBorderWeight: '$borderWeights$normal'
      },
      bold: {
        $$paginationItemBorderWeight: '$borderWeights$bold'
      },
      extrabold: {
        $$paginationItemBorderWeight: '$borderWeights$extrabold'
      },
      black: {
        $$paginationItemBorderWeight: '$borderWeights$black'
      }
    },
    bordered: {
      true: {}
    },
    onlyDots: {
      true: {
        $$paginationSize: 'calc($$paginationWidth / 2)',
        $$paginationItemRadius: '$radii$pill',
        $$paginationScaleTransform: 1.05
      },
      false: {
        $$paginationSize: '$$paginationWidth',
        $$paginationScaleTransform: 1.1
      }
    },
    rounded: {
      true: {
        $$paginationItemRadius: '$radii$pill'
      },
      false: {
        $$paginationItemRadius: '$radii$squared'
      }
    },
    noMargin: {
      true: {
        $$paginationItemRadius: '0px',
        $$paginationItemMargin: '0',
        [`& ${StyledPaginationItem}:first-of-type`]: {
          btlr: '$squared',
          bblr: '$squared'
        },
        [`& ${StyledPaginationItem}:last-of-type`]: {
          btrr: '$squared',
          bbrr: '$squared'
        }
      },
      false: {
        $$paginationItemMargin: '$space$1'
      }
    }
  },
  compoundVariants: [{
    // bordered && noMargin
    bordered: true,
    noMargin: true,
    css: {
      [`& ${StyledPaginationItem}:not(:last-child)`]: {
        borderRight: 0
      }
    }
  }, {
    // noMargin && rounded
    noMargin: true,
    rounded: true,
    css: {
      $$paginationItemRadius: '0px'
    }
  }],
  defaultVariants: {
    color: 'default',
    size: 'md',
    borderWeight: 'normal',
    onlyDots: false,
    noMargin: false,
    rounded: false
  }
});
;// CONCATENATED MODULE: ./src/pagination/pagination-item.tsx
var pagination_item_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-item.tsx";






const pagination_item_defaultProps = {
  preserveContent: false
};

const getItemAriaLabel = page => {
  if (!page) return;

  switch (page) {
    case DOTS:
      return 'dots element';

    case '<':
      return 'previous page button';

    case '>':
      return 'next page button';

    case 'first':
      return 'first page button';

    case 'last':
      return 'last page button';

    default:
      return `${page} item`;
  }
};

const pagination_item_preClass = 'nextui-pagination-item';

const PaginationItem = ({
  active,
  value,
  children,
  disabled,
  animated,
  bordered,
  onClick,
  onlyDots,
  preserveContent,
  ...props
}) => {
  const ariaLabel = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => active ? `${getItemAriaLabel(value)} active` : getItemAriaLabel(value), [value, active]);

  const clickHandler = event => {
    if (disabled) return;
    onClick && onClick(event);
  };

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationItem, {
    className: clsx(pagination_item_preClass, {
      [`${pagination_item_preClass}-active`]: active,
      [`${pagination_item_preClass}-animated`]: animated,
      [`${pagination_item_preClass}-disabled`]: disabled,
      [`${pagination_item_preClass}-bordered`]: bordered,
      [`${pagination_item_preClass}-only-dots`]: onlyDots,
      [`${pagination_item_preClass}-preserve-content`]: preserveContent
    }),
    animated: animated,
    active: active,
    disabled: disabled,
    bordered: bordered,
    onlyDots: onlyDots,
    preserveContent: preserveContent,
    onClick: clickHandler,
    "aria-label": ariaLabel,
    tabIndex: disabled ? -1 : 0,
    ...props,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationItemContent, {
      className: `${pagination_item_preClass}-content`,
      children: children
    }, void 0, false, {
      fileName: pagination_item_jsxFileName,
      lineNumber: 100,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: pagination_item_jsxFileName,
    lineNumber: 80,
    columnNumber: 5
  }, undefined);
};

PaginationItem.toString = () => '.nextui-pagination-item';

/* harmony default export */ const pagination_item = (with_defaults(PaginationItem, pagination_item_defaultProps));
;// CONCATENATED MODULE: ./src/pagination/pagination-ellipsis.tsx
var pagination_ellipsis_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-ellipsis.tsx";





const PaginationEllipsis = ({
  value,
  isBefore,
  onlyDots,
  animated,
  bordered,
  onClick
}) => {
  const [showMore, setShowMore] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_item, {
    value: value,
    onlyDots: onlyDots,
    animated: animated,
    bordered: bordered,
    onClick: e => onClick && onClick(e),
    onMouseEnter: () => setShowMore(true),
    onMouseLeave: () => setShowMore(false),
    children: showMore ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationEllipsis, {
      role: "presentation",
      focusable: "false",
      viewBox: "0 0 24 24",
      stroke: "currentColor",
      strokeWidth: "1.5",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      fill: "none",
      shapeRendering: "geometricPrecision",
      className: "nextui-pagination-ellipsis",
      isEllipsis: true,
      isBefore: isBefore,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M13 17l5-5-5-5"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 49,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M6 17l5-5-5-5"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 50,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: pagination_ellipsis_jsxFileName,
      lineNumber: 35,
      columnNumber: 9
    }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationEllipsis, {
      viewBox: "0 0 24 24",
      strokeWidth: "1.5",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      fill: "none",
      shapeRendering: "geometricPrecision",
      isEllipsis: false,
      isBefore: isBefore,
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "12",
        cy: "12",
        r: "1",
        fill: "currentColor"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 63,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "19",
        cy: "12",
        r: "1",
        fill: "currentColor"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 64,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "5",
        cy: "12",
        r: "1",
        fill: "currentColor"
      }, void 0, false, {
        fileName: pagination_ellipsis_jsxFileName,
        lineNumber: 65,
        columnNumber: 11
      }, undefined)]
    }, void 0, true, {
      fileName: pagination_ellipsis_jsxFileName,
      lineNumber: 53,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: pagination_ellipsis_jsxFileName,
    lineNumber: 25,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ const pagination_ellipsis = (PaginationEllipsis);
;// CONCATENATED MODULE: ./src/pagination/pagination-icon.tsx
var pagination_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-icon.tsx";





const PaginationIcon = ({
  isPrev,
  disabled,
  onlyDots,
  animated,
  bordered,
  onClick,
  ...props
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_item, {
    preserveContent: true,
    value: isPrev ? '<' : '>',
    bordered: bordered,
    animated: animated,
    onlyDots: onlyDots,
    disabled: disabled,
    onClick: e => onClick && onClick(e),
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationIcon, {
      role: "presentation",
      focusable: "false",
      viewBox: "0 0 24 24",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      className: "nextui-pagination-icon",
      isPrev: isPrev,
      ...props,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M15.5 19l-7-7 7-7",
        stroke: "currentColor",
        strokeWidth: 1.5,
        strokeLinecap: "round",
        strokeLinejoin: "round"
      }, void 0, false, {
        fileName: pagination_icon_jsxFileName,
        lineNumber: 48,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: pagination_icon_jsxFileName,
      lineNumber: 38,
      columnNumber: 7
    }, undefined)
  }, void 0, false, {
    fileName: pagination_icon_jsxFileName,
    lineNumber: 29,
    columnNumber: 5
  }, undefined);
};

PaginationIcon.toString = () => '.nextui-pagination-icon';

const MemoPaginationIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(PaginationIcon);
/* harmony default export */ const pagination_icon = (MemoPaginationIcon);
;// CONCATENATED MODULE: ./src/pagination/pagination-highlight.tsx
var pagination_highlight_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination-highlight.tsx";





const pagination_highlight_preClass = 'nextui-pagination-highlight';

const PaginationHighlight = ({
  active,
  shadow,
  noMargin,
  rounded,
  css,
  ...props
}) => {
  const [selfActive, setSelfActive] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(active);
  const [moveClassName, setMoveClassName] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)('');
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (active !== selfActive) {
      setSelfActive(active);
      setMoveClassName(`${pagination_highlight_preClass}--moving`);
      const timer = setTimeout(() => {
        setMoveClassName('');
        clearTimeout(timer);
      }, 350);
    }
  }, [active]);
  const leftValue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => noMargin ? `var(--nextui--paginationSize) * ${selfActive}` : `var(--nextui--paginationSize) * ${selfActive} + ${selfActive * 4 + 2}px`, [selfActive, noMargin]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPaginationHighlight, {
    "aria-hidden": true,
    shadow: shadow,
    rounded: rounded,
    className: clsx(pagination_highlight_preClass, moveClassName, {
      [`${pagination_highlight_preClass}--rounded`]: rounded,
      [`${pagination_highlight_preClass}--active`]: active,
      [`${pagination_highlight_preClass}--no-margin`]: noMargin,
      [`${pagination_highlight_preClass}--shadow`]: shadow
    }, props.className),
    noMargin: noMargin,
    style: $699afe8e9e0f66de$export$9d1611c77c2fe928({
      '--nextui--paginationLeft': `calc(${leftValue})`
    }, (props == null ? void 0 : props.style) || {}),
    css: {
      left: 'var(--nextui--paginationLeft)',
      ...css
    },
    ...props
  }, void 0, false, {
    fileName: pagination_highlight_jsxFileName,
    lineNumber: 60,
    columnNumber: 5
  }, undefined);
};

PaginationHighlight.toString = () => '.nextui-pagination-highlight';

/* harmony default export */ const pagination_highlight = (PaginationHighlight);
;// CONCATENATED MODULE: ./src/pagination/pagination.tsx
var pagination_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/pagination/pagination.tsx";










const pagination_defaultProps = {
  shadow: false,
  controls: true,
  bordered: false,
  initialPage: 1,
  siblings: 1,
  boundaries: 1,
  dotsJump: 5,
  total: 1,
  loop: false,
  animated: true,
  onlyDots: false,
  noMargin: false,
  rounded: false
};
const pagination_preClass = 'nextui-pagination';

const Pagination = ({
  page,
  initialPage,
  onlyDots,
  total,
  loop,
  siblings,
  boundaries,
  shadow,
  animated,
  bordered,
  dotsJump,
  controls,
  noMargin,
  onChange,
  rounded,
  ...props
}) => {
  const {
    range,
    active,
    setPage,
    previous,
    next,
    first,
    last
  } = use_pagination({
    page,
    initialPage,
    siblings: onlyDots ? 10 : siblings,
    boundaries: onlyDots ? 10 : boundaries,
    total,
    onChange
  });
  const renderItem = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((value, index) => {
    if (value === DOTS) {
      const isBefore = index < range.indexOf(active);
      return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_ellipsis, {
        value: value,
        bordered: bordered,
        animated: animated,
        isBefore: isBefore,
        onlyDots: onlyDots,
        onClick: () => isBefore ? setPage(active - dotsJump >= 1 ? active - dotsJump : 1) : setPage(active + dotsJump <= total ? active + dotsJump : total)
      }, `${pagination_preClass}-item-${value}-${index}`, false, {
        fileName: pagination_jsxFileName,
        lineNumber: 90,
        columnNumber: 11
      }, undefined);
    }

    return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_item, {
      value: value,
      animated: animated,
      bordered: bordered,
      active: value === active,
      onClick: () => value !== active && setPage(value),
      onlyDots: onlyDots,
      children: value
    }, `${pagination_preClass}-item-${value}-${index}`, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 108,
      columnNumber: 9
    }, undefined);
  }, [total, onlyDots, active, bordered, animated]);

  const handleNext = () => {
    if (loop && active === total) {
      return first();
    }

    return next();
  };

  const handlePrevious = () => {
    if (loop && active === 1) {
      return last();
    }

    return previous();
  };

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledPagination, {
    noMargin: noMargin,
    bordered: bordered,
    rounded: rounded,
    onlyDots: onlyDots,
    className: clsx(pagination_preClass, {
      [`${pagination_preClass}--no-margin`]: noMargin,
      [`${pagination_preClass}--bordered`]: bordered,
      [`${pagination_preClass}--shadow`]: shadow,
      [`${pagination_preClass}--rounded`]: rounded
    }),
    ...props,
    children: [controls && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_icon, {
      isPrev: true,
      bordered: bordered,
      animated: animated,
      onlyDots: onlyDots,
      onClick: handlePrevious,
      disabled: !loop && active === 1
    }, void 0, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 153,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_highlight, {
      noMargin: noMargin,
      animated: animated,
      shadow: shadow,
      rounded: rounded,
      active: controls ? range.indexOf(active) + 1 : range.indexOf(active)
    }, void 0, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 162,
      columnNumber: 7
    }, undefined), range.map(renderItem), controls && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(pagination_icon, {
      bordered: bordered,
      animated: animated,
      onlyDots: onlyDots,
      onClick: handleNext,
      disabled: !loop && active === total
    }, void 0, false, {
      fileName: pagination_jsxFileName,
      lineNumber: 171,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: pagination_jsxFileName,
    lineNumber: 139,
    columnNumber: 5
  }, undefined);
};

Pagination.defaultProps = pagination_defaultProps;

if (__DEV__) {
  Pagination.displayName = 'NextUI - Pagination';
}

Pagination.toString = () => '.nextui-pagination';

/* harmony default export */ const pagination = (/*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(Pagination));
;// CONCATENATED MODULE: ./src/pagination/index.ts


/* harmony default export */ const src_pagination = (pagination);
;// CONCATENATED MODULE: ../../node_modules/@react-aria/utils/dist/module.js





function node_modules_react_aria_utils_dist_module_$parcel$export_0(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var module_$bdb11010cef70236$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$bdb11010cef70236$exports, "useId", () => module_$bdb11010cef70236$export$f680877a34711e37);
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$bdb11010cef70236$exports, "mergeIds", () => module_$bdb11010cef70236$export$cd8c9cb68f842629);
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$bdb11010cef70236$exports, "useSlotId", () => module_$bdb11010cef70236$export$b4cc09c592e8fdb8);
var module_$f0a04ccd8dbdd83b$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$f0a04ccd8dbdd83b$exports, "useLayoutEffect", () => module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c);
const module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== 'undefined' ? (external_root_React_commonjs2_react_commonjs_react_amd_react_default()).useLayoutEffect : () => {};
let module_$bdb11010cef70236$var$idsUpdaterMap = new Map();

function module_$bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let isRendering = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(true);
  isRendering.current = true;
  let [value, setValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultId);
  let nextId = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let res = $9d939cbc98267846$export$619500959fc48b26(value); // don't memo this, we want it new each render so that the Effects always run

  let updateValue = val => {
    if (!isRendering.current) setValue(val);else nextId.current = val;
  };

  module_$bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    isRendering.current = false;
  }, [updateValue]);
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let r = res;
    return () => {
      module_$bdb11010cef70236$var$idsUpdaterMap.delete(r);
    };
  }, [res]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let newId = nextId.current;

    if (newId) {
      setValue(newId);
      nextId.current = null;
    }
  }, [setValue, updateValue]);
  return res;
}

function module_$bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB) return idA;
  let setIdA = module_$bdb11010cef70236$var$idsUpdaterMap.get(idA);

  if (setIdA) {
    setIdA(idB);
    return idB;
  }

  let setIdB = module_$bdb11010cef70236$var$idsUpdaterMap.get(idB);

  if (setIdB) {
    setIdB(idA);
    return idA;
  }

  return idB;
}

function module_$bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = module_$bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = module_$1dbecbe27a04f9af$export$14d238f342723f25(id);
  let updateId = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : null;
    });
  }, [id, setResolvedId]);
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(updateId, [id, updateId, ...depArray]);
  return resolvedId;
}

var module_$ff5963eb1fccf552$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$ff5963eb1fccf552$exports, "chain", () => module_$ff5963eb1fccf552$export$e08e3b67e392101e);

function module_$ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks) if (typeof callback === 'function') callback(...args);
  };
}

var module_$3ef42575df84b30b$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$3ef42575df84b30b$exports, "mergeProps", () => module_$3ef42575df84b30b$export$9d1611c77c2fe928);

function module_$3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  // Start with a base clone of the first argument. This is a lot faster than starting
  // with an empty object and adding properties as we go.
  let result = { ...args[0]
  };

  for (let i = 1; i < args.length; i++) {
    let props = args[i];

    for (let key in props) {
      let a = result[key];
      let b = props[key]; // Chain events

      if (typeof a === 'function' && typeof b === 'function' && // This is a lot faster than a regex.
      key[0] === 'o' && key[1] === 'n' && key.charCodeAt(2) >=
      /* 'A' */
      65 && key.charCodeAt(2) <=
      /* 'Z' */
      90) result[key] = module_$ff5963eb1fccf552$export$e08e3b67e392101e(a, b);else if ((key === 'className' || key === 'UNSAFE_className') && typeof a === 'string' && typeof b === 'string') result[key] = clsx_m(a, b);else if (key === 'id' && a && b) result.id = module_$bdb11010cef70236$export$cd8c9cb68f842629(a, b);else result[key] = b !== undefined ? b : a;
    }
  }

  return result;
}

var module_$65484d02dcb7eb3e$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$65484d02dcb7eb3e$exports, "filterDOMProps", () => module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f);
const module_$65484d02dcb7eb3e$var$DOMPropNames = new Set(['id']);
const module_$65484d02dcb7eb3e$var$labelablePropNames = new Set(['aria-label', 'aria-labelledby', 'aria-describedby', 'aria-details']);
const module_$65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;

function module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let {
    labelable: labelable,
    propNames: propNames
  } = opts;
  let filteredProps = {};

  for (const prop in props) if (Object.prototype.hasOwnProperty.call(props, prop) && (module_$65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && module_$65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || module_$65484d02dcb7eb3e$var$propRe.test(prop))) filteredProps[prop] = props[prop];

  return filteredProps;
}

var module_$7215afc6de606d6b$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$7215afc6de606d6b$exports, "focusWithoutScrolling", () => module_$7215afc6de606d6b$export$de79e2c695e052f3);

function module_$7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if (module_$7215afc6de606d6b$var$supportsPreventScroll()) element.focus({
    preventScroll: true
  });else {
    let scrollableElements = module_$7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}

let module_$7215afc6de606d6b$var$supportsPreventScrollCached = null;

function module_$7215afc6de606d6b$var$supportsPreventScroll() {
  if (module_$7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    module_$7215afc6de606d6b$var$supportsPreventScrollCached = false;

    try {
      var focusElem = document.createElement('div');
      focusElem.focus({
        get preventScroll() {
          module_$7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }

      });
    } catch (e) {// Ignore
    }
  }

  return module_$7215afc6de606d6b$var$supportsPreventScrollCached;
}

function module_$7215afc6de606d6b$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;

  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth) scrollableElements.push({
      element: parent,
      scrollTop: parent.scrollTop,
      scrollLeft: parent.scrollLeft
    });
    parent = parent.parentNode;
  }

  if (rootScrollingElement instanceof HTMLElement) scrollableElements.push({
    element: rootScrollingElement,
    scrollTop: rootScrollingElement.scrollTop,
    scrollLeft: rootScrollingElement.scrollLeft
  });
  return scrollableElements;
}

function module_$7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let {
    element: element,
    scrollTop: scrollTop,
    scrollLeft: scrollLeft
  } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}

var module_$ab71dadb03a6fb2e$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$ab71dadb03a6fb2e$exports, "getOffset", () => module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d);

function module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = 'horizontal') {
  let rect = element.getBoundingClientRect();
  if (reverse) return orientation === 'horizontal' ? rect.right : rect.bottom;
  return orientation === 'horizontal' ? rect.left : rect.top;
}

var module_$103b0e103f1b5952$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$103b0e103f1b5952$exports, "clamp", () => $48d9f1d165180307$export$7d15b64cf5a3a4c4);
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$103b0e103f1b5952$exports, "snapValueToStep", () => $48d9f1d165180307$export$cb6e0bb50bc19463);
var module_$bbed8b41f857bcc0$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$bbed8b41f857bcc0$exports, "runAfterTransition", () => module_$bbed8b41f857bcc0$export$24490316f764c430);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// We store a global list of elements that are currently transitioning,
// mapped to a set of CSS properties that are transitioning for that element.
// This is necessary rather than a simple count of transitions because of browser
// bugs, e.g. Chrome sometimes fires both transitionend and transitioncancel rather
// than one or the other. So we need to track what's actually transitioning so that
// we can ignore these duplicate events.

let module_$bbed8b41f857bcc0$var$transitionsByElement = new Map(); // A list of callbacks to call once there are no transitioning elements.

let module_$bbed8b41f857bcc0$var$transitionCallbacks = new Set();

function module_$bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === 'undefined') return;

  let onTransitionStart = e => {
    // Add the transitioning property to the list for this element.
    let transitions = module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);

    if (!transitions) {
      transitions = new Set();
      module_$bbed8b41f857bcc0$var$transitionsByElement.set(e.target, transitions); // The transitioncancel event must be registered on the element itself, rather than as a global
      // event. This enables us to handle when the node is deleted from the document while it is transitioning.
      // In that case, the cancel event would have nowhere to bubble to so we need to handle it directly.

      e.target.addEventListener('transitioncancel', onTransitionEnd);
    }

    transitions.add(e.propertyName);
  };

  let onTransitionEnd = e => {
    // Remove property from list of transitioning properties.
    let properties = module_$bbed8b41f857bcc0$var$transitionsByElement.get(e.target);
    if (!properties) return;
    properties.delete(e.propertyName); // If empty, remove transitioncancel event, and remove the element from the list of transitioning elements.

    if (properties.size === 0) {
      e.target.removeEventListener('transitioncancel', onTransitionEnd);
      module_$bbed8b41f857bcc0$var$transitionsByElement.delete(e.target);
    } // If no transitioning elements, call all of the queued callbacks.


    if (module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of module_$bbed8b41f857bcc0$var$transitionCallbacks) cb();

      module_$bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };

  document.body.addEventListener('transitionrun', onTransitionStart);
  document.body.addEventListener('transitionend', onTransitionEnd);
}

if (typeof document !== 'undefined') {
  if (document.readyState !== 'loading') module_$bbed8b41f857bcc0$var$setupGlobalEvents();else document.addEventListener('DOMContentLoaded', module_$bbed8b41f857bcc0$var$setupGlobalEvents);
}

function module_$bbed8b41f857bcc0$export$24490316f764c430(fn) {
  // Wait one frame to see if an animation starts, e.g. a transition on mount.
  requestAnimationFrame(() => {
    // If no transitions are running, call the function immediately.
    // Otherwise, add it to a list of callbacks to run at the end of the animation.
    if (module_$bbed8b41f857bcc0$var$transitionsByElement.size === 0) fn();else module_$bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}

var module_$9cc09df9fd7676be$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$9cc09df9fd7676be$exports, "useDrag1D", () => module_$9cc09df9fd7676be$export$7bbed75feba39706); // Keep track of elements that we are currently handling dragging for via useDrag1D.
// If there's an ancestor and a descendant both using useDrag1D(), and the user starts
// dragging the descendant, we don't want useDrag1D events to fire for the ancestor.

const module_$9cc09df9fd7676be$var$draggingElements = [];

function module_$9cc09df9fd7676be$export$7bbed75feba39706(props) {
  console.warn('useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html');
  let {
    containerRef: containerRef,
    reverse: reverse,
    orientation: orientation,
    onHover: onHover,
    onDrag: onDrag,
    onPositionChange: onPositionChange,
    onIncrement: onIncrement,
    onDecrement: onDecrement,
    onIncrementToMax: onIncrementToMax,
    onDecrementToMin: onDecrementToMin,
    onCollapseToggle: onCollapseToggle
  } = props;

  let getPosition = e => orientation === 'horizontal' ? e.clientX : e.clientY;

  let getNextOffset = e => {
    let containerOffset = module_$ab71dadb03a6fb2e$export$622cea445a1c5b7d(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };

  let dragging = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(false);
  let prevPosition = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(0); // Keep track of the current handlers in a ref so that the events can access them.

  let handlers = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    onPositionChange: onPositionChange,
    onDrag: onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;

  let onMouseDragged = e => {
    e.preventDefault();
    let nextOffset = getNextOffset(e);

    if (!dragging.current) {
      dragging.current = true;
      if (handlers.current.onDrag) handlers.current.onDrag(true);
      if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    }

    if (prevPosition.current === nextOffset) return;
    prevPosition.current = nextOffset;
    if (onPositionChange) onPositionChange(nextOffset);
  };

  let onMouseUp = e => {
    const target = e.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e);
    if (handlers.current.onDrag) handlers.current.onDrag(false);
    if (handlers.current.onPositionChange) handlers.current.onPositionChange(nextOffset);
    module_$9cc09df9fd7676be$var$draggingElements.splice(module_$9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);
    window.removeEventListener('mouseup', onMouseUp, false);
    window.removeEventListener('mousemove', onMouseDragged, false);
  };

  let onMouseDown = e => {
    const target = e.currentTarget; // If we're already handling dragging on a descendant with useDrag1D, then
    // we don't want to handle the drag motion on this target as well.

    if (module_$9cc09df9fd7676be$var$draggingElements.some(elt => target.contains(elt))) return;
    module_$9cc09df9fd7676be$var$draggingElements.push(target);
    window.addEventListener('mousemove', onMouseDragged, false);
    window.addEventListener('mouseup', onMouseUp, false);
  };

  let onMouseEnter = () => {
    if (onHover) onHover(true);
  };

  let onMouseOut = () => {
    if (onHover) onHover(false);
  };

  let onKeyDown = e => {
    switch (e.key) {
      case 'Left':
      case 'ArrowLeft':
        if (orientation === 'horizontal') {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }

        break;

      case 'Up':
      case 'ArrowUp':
        if (orientation === 'vertical') {
          e.preventDefault();
          if (onDecrement && !reverse) onDecrement();else if (onIncrement && reverse) onIncrement();
        }

        break;

      case 'Right':
      case 'ArrowRight':
        if (orientation === 'horizontal') {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }

        break;

      case 'Down':
      case 'ArrowDown':
        if (orientation === 'vertical') {
          e.preventDefault();
          if (onIncrement && !reverse) onIncrement();else if (onDecrement && reverse) onDecrement();
        }

        break;

      case 'Home':
        e.preventDefault();
        if (onDecrementToMin) onDecrementToMin();
        break;

      case 'End':
        e.preventDefault();
        if (onIncrementToMax) onIncrementToMax();
        break;

      case 'Enter':
        e.preventDefault();
        if (onCollapseToggle) onCollapseToggle();
        break;
    }
  };

  return {
    onMouseDown: onMouseDown,
    onMouseEnter: onMouseEnter,
    onMouseOut: onMouseOut,
    onKeyDown: onKeyDown
  };
}

var module_$03deb23ff14920c4$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$03deb23ff14920c4$exports, "useGlobalListeners", () => module_$03deb23ff14920c4$export$4eaf04e54aa8eed6);

function module_$03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(new Map());
  let addGlobalListener = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((eventTarget, type, listener, options) => {
    // Make sure we remove the listener after it is called with the `once` option.
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type: type,
      eventTarget: eventTarget,
      fn: fn,
      options: options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((eventTarget, type, listener, options) => {
    var ref;
    let fn = ((ref = globalListeners.current.get(listener)) === null || ref === void 0 ? void 0 : ref.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [removeGlobalListener]); // eslint-disable-next-line arrow-body-style

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return removeAllGlobalListeners;
  }, [removeAllGlobalListeners]);
  return {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  };
}

var module_$313b98861ee5dd6c$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$313b98861ee5dd6c$exports, "useLabels", () => module_$313b98861ee5dd6c$export$d6875122194c7b44);

function module_$313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let {
    id: id,
    'aria-label': label,
    'aria-labelledby': labelledBy
  } = props; // If there is both an aria-label and aria-labelledby,
  // combine them by pointing to the element itself.

  id = module_$bdb11010cef70236$export$f680877a34711e37(id);

  if (labelledBy && label) {
    let ids = new Set([...labelledBy.trim().split(/\s+/), id]);
    labelledBy = [...ids].join(' ');
  } else if (labelledBy) labelledBy = labelledBy.trim().split(/\s+/).join(' '); // If no labels are provided, use the default


  if (!label && !labelledBy && defaultLabel) label = defaultLabel;
  return {
    id: id,
    'aria-label': label,
    'aria-labelledby': labelledBy
  };
}

var module_$df56164dff5785e2$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$df56164dff5785e2$exports, "useObjectRef", () => module_$df56164dff5785e2$export$4338b53315abf666);

function module_$df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  /**
  * We're using `useLayoutEffect` here instead of `useEffect` because we want
  * to make sure that the `ref` value is up to date before other places in the
  * the execution cycle try to read it.
  */

  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (!forwardedRef) return;
    if (typeof forwardedRef === 'function') forwardedRef(objRef.current);else forwardedRef.current = objRef.current;
  }, [forwardedRef]);
  return objRef;
}

var module_$4f58c5f72bcf79f7$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$4f58c5f72bcf79f7$exports, "useUpdateEffect", () => module_$4f58c5f72bcf79f7$export$496315a1608d9602);

function module_$4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(true);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isInitialMount.current) isInitialMount.current = false;else effect(); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, dependencies);
}

var module_$9daab02d461809db$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$9daab02d461809db$exports, "useResizeObserver", () => module_$9daab02d461809db$export$683480f191c0e3ea);

function module_$9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== 'undefined';
}

function module_$9daab02d461809db$export$683480f191c0e3ea(options) {
  const {
    ref: ref,
    onResize: onResize
  } = options;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element) return;

    if (!module_$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener('resize', onResize, false);
      return () => {
        window.removeEventListener('resize', onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver(entries => {
        if (!entries.length) return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element) resizeObserverInstance.unobserve(element);
      };
    }
  }, [onResize, ref]);
}

var module_$e7801be82b4b2a53$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$e7801be82b4b2a53$exports, "useSyncRef", () => module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e);

function module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [context, ref]);
}

var module_$62d8ded9296f3872$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$62d8ded9296f3872$exports, "getScrollParent", () => module_$62d8ded9296f3872$export$cfa2225e87938781);

function module_$62d8ded9296f3872$export$cfa2225e87938781(node) {
  while (node && !module_$62d8ded9296f3872$var$isScrollable(node)) node = node.parentElement;

  return node || document.scrollingElement || document.documentElement;
}

function module_$62d8ded9296f3872$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}

var module_$5df64b3807dc15ee$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$5df64b3807dc15ee$exports, "useViewportSize", () => module_$5df64b3807dc15ee$export$d699905dd57c73ca); // @ts-ignore

let module_$5df64b3807dc15ee$var$visualViewport = typeof window !== 'undefined' && window.visualViewport;

function module_$5df64b3807dc15ee$export$d699905dd57c73ca() {
  let [size1, setSize] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(() => module_$5df64b3807dc15ee$var$getViewportSize());
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    // Use visualViewport api to track available height even on iOS virtual keyboard opening
    let onResize = () => {
      setSize(size => {
        let newSize = module_$5df64b3807dc15ee$var$getViewportSize();
        if (newSize.width === size.width && newSize.height === size.height) return size;
        return newSize;
      });
    };

    if (!module_$5df64b3807dc15ee$var$visualViewport) window.addEventListener('resize', onResize);else module_$5df64b3807dc15ee$var$visualViewport.addEventListener('resize', onResize);
    return () => {
      if (!module_$5df64b3807dc15ee$var$visualViewport) window.removeEventListener('resize', onResize);else module_$5df64b3807dc15ee$var$visualViewport.removeEventListener('resize', onResize);
    };
  }, []);
  return size1;
}

function module_$5df64b3807dc15ee$var$getViewportSize() {
  return {
    width: (module_$5df64b3807dc15ee$var$visualViewport === null || module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : module_$5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
    height: (module_$5df64b3807dc15ee$var$visualViewport === null || module_$5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : module_$5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
  };
}

var module_$ef06256079686ba0$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$ef06256079686ba0$exports, "useDescription", () => module_$ef06256079686ba0$export$f8aeda7b10753fa1);
let module_$ef06256079686ba0$var$descriptionId = 0;
const module_$ef06256079686ba0$var$descriptionNodes = new Map();

function module_$ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id1, setId] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(null);
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (!description) return;
    let desc = module_$ef06256079686ba0$var$descriptionNodes.get(description);

    if (!desc) {
      let id = `react-aria-description-${module_$ef06256079686ba0$var$descriptionId++}`;
      setId(id);
      let node = document.createElement('div');
      node.id = id;
      node.style.display = 'none';
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      module_$ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else setId(desc.element.id);

    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        module_$ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [description]);
  return {
    'aria-describedby': description ? id1 : undefined
  };
}

var module_$c87311424ea30a05$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$c87311424ea30a05$exports, "isMac", () => module_$c87311424ea30a05$export$9ac100e40613ea10);
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$c87311424ea30a05$exports, "isIPhone", () => module_$c87311424ea30a05$export$186c6964ca17d99);
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$c87311424ea30a05$exports, "isIPad", () => module_$c87311424ea30a05$export$7bef049ce92e4224);
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$c87311424ea30a05$exports, "isIOS", () => module_$c87311424ea30a05$export$fedb369cb70207f1);
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$c87311424ea30a05$exports, "isAppleDevice", () => module_$c87311424ea30a05$export$e1865c3bedcd822b);
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$c87311424ea30a05$exports, "isWebKit", () => module_$c87311424ea30a05$export$78551043582a6a98);
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$c87311424ea30a05$exports, "isChrome", () => module_$c87311424ea30a05$export$6446a186d09e379e);
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$c87311424ea30a05$exports, "isAndroid", () => module_$c87311424ea30a05$export$a11b0059900ceec8);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

function module_$c87311424ea30a05$var$testUserAgent(re) {
  var ref;
  if (typeof window === 'undefined' || window.navigator == null) return false;
  return ((ref = window.navigator['userAgentData']) === null || ref === void 0 ? void 0 : ref.brands.some(brand => re.test(brand.brand))) || re.test(window.navigator.userAgent);
}

function module_$c87311424ea30a05$var$testPlatform(re) {
  return typeof window !== 'undefined' && window.navigator != null ? re.test((window.navigator['userAgentData'] || window.navigator).platform) : false;
}

function module_$c87311424ea30a05$export$9ac100e40613ea10() {
  return module_$c87311424ea30a05$var$testPlatform(/^Mac/i);
}

function module_$c87311424ea30a05$export$186c6964ca17d99() {
  return module_$c87311424ea30a05$var$testPlatform(/^iPhone/i);
}

function module_$c87311424ea30a05$export$7bef049ce92e4224() {
  return module_$c87311424ea30a05$var$testPlatform(/^iPad/i) || module_$c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}

function module_$c87311424ea30a05$export$fedb369cb70207f1() {
  return module_$c87311424ea30a05$export$186c6964ca17d99() || module_$c87311424ea30a05$export$7bef049ce92e4224();
}

function module_$c87311424ea30a05$export$e1865c3bedcd822b() {
  return module_$c87311424ea30a05$export$9ac100e40613ea10() || module_$c87311424ea30a05$export$fedb369cb70207f1();
}

function module_$c87311424ea30a05$export$78551043582a6a98() {
  return module_$c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !module_$c87311424ea30a05$export$6446a186d09e379e();
}

function module_$c87311424ea30a05$export$6446a186d09e379e() {
  return module_$c87311424ea30a05$var$testUserAgent(/Chrome/i);
}

function module_$c87311424ea30a05$export$a11b0059900ceec8() {
  return module_$c87311424ea30a05$var$testUserAgent(/Android/i);
}

var module_$e9faafb641e167db$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$e9faafb641e167db$exports, "useEvent", () => module_$e9faafb641e167db$export$90fc3a17d93f704c);

function module_$e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler1, options) {
  let handlerRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(handler1);
  handlerRef.current = handler1;
  let isDisabled = handler1 == null;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isDisabled) return;
    let element = ref.current;

    let handler = e => handlerRef.current.call(this, e);

    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [ref, event, options, isDisabled]);
}

var module_$1dbecbe27a04f9af$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$1dbecbe27a04f9af$exports, "useValueEffect", () => module_$1dbecbe27a04f9af$export$14d238f342723f25);

function module_$1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(defaultValue);
  let valueRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(value);
  let effect = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  valueRef.current = value; // Store the function in a ref so we can always access the current version
  // which has the proper `value` in scope.

  let nextRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);

  nextRef.current = () => {
    // Run the generator to the next yield.
    let newValue = effect.current.next(); // If the generator is done, reset the effect.

    if (newValue.done) {
      effect.current = null;
      return;
    } // If the value is the same as the current value,
    // then continue to the next yield. Otherwise,
    // set the value in state and wait for the next layout effect.


    if (value === newValue.value) nextRef.current();else setValue(newValue.value);
  };

  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    // If there is an effect currently running, continue to the next yield.
    if (effect.current) nextRef.current();
  });
  let queue = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(fn => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [effect, nextRef]);
  return [value, queue];
}

var module_$2f04cbc44ee30ce0$exports = {};
node_modules_react_aria_utils_dist_module_$parcel$export_0(module_$2f04cbc44ee30ce0$exports, "scrollIntoView", () => module_$2f04cbc44ee30ce0$export$53a0910f038337bd);

function module_$2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'left');
  let offsetY = module_$2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, 'top');
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x = scrollView.scrollLeft;
  let y = scrollView.scrollTop;
  let maxX = x + scrollView.offsetWidth;
  let maxY = y + scrollView.offsetHeight;
  if (offsetX <= x) x = offsetX;else if (offsetX + width > maxX) x += offsetX + width - maxX;
  if (offsetY <= y) y = offsetY;else if (offsetY + height > maxY) y += offsetY + height - maxY;
  scrollView.scrollLeft = x;
  scrollView.scrollTop = y;
}
/**
 * Computes the offset left or top from child to ancestor by accumulating
 * offsetLeft or offsetTop through intervening offsetParents.
 */


function module_$2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === 'left' ? 'offsetLeft' : 'offsetTop';
  let sum = 0;

  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor) break;else if (child.offsetParent.contains(ancestor)) {
      // If the ancestor is not `position:relative`, then we stop at
      // _its_ offset parent, and we subtract off _its_ offset, so that
      // we end up with the proper offset from child to ancestor.
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }

  return sum;
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/label/dist/module.js


function label_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $c796961545123cf9$exports = {};
label_dist_module_$parcel$export($c796961545123cf9$exports, "useField", () => $c796961545123cf9$export$294aa081a6c6f55d);
var $a25d9b7703051f71$exports = {};
label_dist_module_$parcel$export($a25d9b7703051f71$exports, "useLabel", () => $a25d9b7703051f71$export$8467354a121f1b9f);

function $a25d9b7703051f71$export$8467354a121f1b9f(props) {
  let {
    id: id,
    label: label,
    'aria-labelledby': ariaLabelledby,
    'aria-label': ariaLabel,
    labelElementType = 'label'
  } = props;
  id = module_$bdb11010cef70236$export$f680877a34711e37(id);
  let labelId = module_$bdb11010cef70236$export$f680877a34711e37();
  let labelProps = {};

  if (label) {
    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;
    labelProps = {
      id: labelId,
      htmlFor: labelElementType === 'label' ? id : undefined
    };
  } else if (!ariaLabelledby && !ariaLabel) console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');

  let fieldProps = module_$313b98861ee5dd6c$export$d6875122194c7b44({
    id: id,
    'aria-label': ariaLabel,
    'aria-labelledby': ariaLabelledby
  });
  return {
    labelProps: labelProps,
    fieldProps: fieldProps
  };
}

function $c796961545123cf9$export$294aa081a6c6f55d(props) {
  let {
    description: description,
    errorMessage: errorMessage,
    validationState: validationState
  } = props;
  let {
    labelProps: labelProps,
    fieldProps: fieldProps
  } = $a25d9b7703051f71$export$8467354a121f1b9f(props);
  let descriptionId = module_$bdb11010cef70236$export$b4cc09c592e8fdb8([Boolean(description), Boolean(errorMessage), validationState]);
  let errorMessageId = module_$bdb11010cef70236$export$b4cc09c592e8fdb8([Boolean(description), Boolean(errorMessage), validationState]);
  fieldProps = module_$3ef42575df84b30b$export$9d1611c77c2fe928(fieldProps, {
    'aria-describedby': [descriptionId, // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
    errorMessageId, props['aria-describedby']].filter(Boolean).join(' ') || undefined
  });
  return {
    labelProps: labelProps,
    fieldProps: fieldProps,
    descriptionProps: {
      id: descriptionId
    },
    errorMessageProps: {
      id: errorMessageId
    }
  };
}


;// CONCATENATED MODULE: ./src/input/input-props.ts
const input_props_defaultProps = {
  disabled: false,
  bordered: false,
  readOnly: false,
  clearable: false,
  rounded: false,
  animated: true,
  underlined: false,
  shadow: true,
  fullWidth: false,
  contentClickable: false,
  contentRightStyling: true,
  contentLeftStyling: true,
  required: false,
  width: 'initial',
  size: 'md',
  color: 'default',
  helperColor: 'default',
  status: 'default',
  borderWeight: 'normal',
  autoComplete: 'off',
  className: '',
  placeholder: '',
  initialValue: ''
};
;// CONCATENATED MODULE: ./src/input/input.styles.ts

const baseInputValues = {
  $$inputColor: '$colors$accents1',
  $$inputTextColor: '$colors$text',
  $$inputPlaceholderColor: '$colors$accents3',
  $$inputPlaceholderOpacity: 1,
  $$inputShadow: '$shadows$sm',
  $$inputBorderColor: '$colors$border',
  $$inputHoverBorderColor: '$colors$foreground',
  $$inputLabelColor: '$$inputHoverBorderColor'
};
const StyledInputMainContainer = styled('div', { ...baseInputValues,
  display: 'inline-flex',
  flexDirection: 'column',
  justifyContent: 'center',
  position: 'relative',
  boxSizing: 'border-box',
  WebkitBoxAlign: 'center',
  variants: {
    color: {
      default: {},
      primary: {
        $$inputHoverBorderColor: '$colors$primary',
        $$inputLabelColor: '$colors$primary'
      },
      secondary: {
        $$inputHoverBorderColor: '$colors$secondary',
        $$inputLabelColor: '$colors$secondary'
      },
      success: {
        $$inputHoverBorderColor: '$colors$success',
        $$inputLabelColor: '$colors$success'
      },
      warning: {
        $$inputHoverBorderColor: '$colors$warning',
        $$inputLabelColor: '$colors$warning'
      },
      error: {
        $$inputHoverBorderColor: '$colors$error',
        $$inputLabelColor: '$colors$error'
      }
    },
    status: {
      default: {},
      primary: {
        $$inputColor: '$colors$primaryLight',
        $$inputPlaceholderColor: '$colors$primary',
        $$inputTextColor: '$colors$primary',
        $$inputLabelColor: '$$inputTextColor',
        $$inputHoverBorderColor: '$colors$primary',
        $$inputPlaceholderOpacity: 0.5
      },
      secondary: {
        $$inputColor: '$colors$secondaryLight',
        $$inputPlaceholderColor: '$colors$secondary',
        $$inputTextColor: '$colors$secondary',
        $$inputLabelColor: '$$inputTextColor',
        $$inputHoverBorderColor: '$colors$secondary',
        $$inputPlaceholderOpacity: 0.5
      },
      success: {
        $$inputColor: '$colors$successLight',
        $$inputPlaceholderColor: '$colors$success',
        $$inputTextColor: '$colors$success',
        $$inputLabelColor: '$$inputTextColor',
        $$inputHoverBorderColor: '$colors$success',
        $$inputPlaceholderOpacity: 0.5
      },
      warning: {
        $$inputColor: '$colors$warningLight',
        $$inputPlaceholderColor: '$colors$warning',
        $$inputTextColor: '$colors$warning',
        $$inputLabelColor: '$$inputTextColor',
        $$inputHoverBorderColor: '$colors$warning',
        $$inputPlaceholderOpacity: 0.5
      },
      error: {
        $$inputColor: '$colors$errorLight',
        $$inputPlaceholderColor: '$colors$error',
        $$inputTextColor: '$colors$error',
        $$inputLabelColor: '$$inputTextColor',
        $$inputHoverBorderColor: '$colors$error',
        $$inputPlaceholderOpacity: 0.5
      }
    },
    helperColor: {
      default: {
        $$inputHelperColor: '$colors$text'
      },
      primary: {
        $$inputHelperColor: '$colors$primary'
      },
      secondary: {
        $$inputHelperColor: '$colors$secondary'
      },
      success: {
        $$inputHelperColor: '$colors$success'
      },
      warning: {
        $$inputHelperColor: '$colors$warning'
      },
      error: {
        $$inputHelperColor: '$colors$error'
      }
    },
    borderWeight: {
      light: {
        $$inputBorderWeight: '$borderWeights$light'
      },
      normal: {
        $$inputBorderWeight: '$borderWeights$normal'
      },
      bold: {
        $$inputBorderWeight: '$borderWeights$bold'
      },
      extrabold: {
        $$inputBorderWeight: '$borderWeights$extrabold'
      },
      black: {
        $$inputBorderWeight: '$borderWeights$black'
      }
    },
    size: {
      xs: {
        $$inputBorderRadius: '$space$3',
        $$inputFontSize: '$fontSizes$tiny',
        $$inputHeightRatio: '1.2',
        br: '$$inputBorderRadius'
      },
      sm: {
        $$inputBorderRadius: '$space$4',
        $$inputFontSize: '$fontSizes$tiny',
        $$inputHeightRatio: '1.6',
        br: '$$inputBorderRadius'
      },
      md: {
        $$inputBorderRadius: '$space$6',
        $$inputFontSize: '$fontSizes$xs',
        $$inputHeightRatio: '2',
        br: '$$inputBorderRadius'
      },
      lg: {
        $$inputBorderRadius: '$space$7',
        $$inputFontSize: '$fontSizes$base',
        $$inputHeightRatio: '2.2',
        br: '$$inputBorderRadius'
      },
      xl: {
        $$inputBorderRadius: '$space$8',
        $$inputFontSize: '$fontSizes$sm',
        $$inputHeightRatio: '2.6',
        br: '$$inputBorderRadius'
      }
    },
    rounded: {
      true: {
        $$inputBorderRadius: '$radii$pill'
      }
    },
    disabled: {
      true: {
        $$inputColor: '$colors$accents2',
        $$inputTextColor: '$colors$accents3',
        $$inputPlaceholderColor: '$colors$accents3',
        $$inputShadow: '$shadows$sm'
      }
    }
  }
});
const StyledInputContainer = styled('div', {
  width: '100%',
  br: '$$inputBorderRadius',
  '@motion': {
    transition: 'none'
  },
  variants: {
    isTextarea: {
      false: {
        display: 'inline-flex',
        alignItems: 'center',
        height: 'calc($$inputHeightRatio * $9)'
      }
    },
    focused: {
      true: {}
    },
    isReadOnly: {
      false: {}
    },
    underlined: {
      true: {}
    },
    animated: {
      true: {
        transition: '$default'
      },
      false: {
        transition: 'none'
      }
    }
  },
  compoundVariants: [{
    // underlined && !isReadOnly
    isReadOnly: false,
    underlined: true,
    css: {
      transform: 'none'
    }
  }, {
    // focused && animated && !isReadOnly && !underlined
    focused: true,
    animated: true,
    isReadOnly: false,
    underlined: false,
    css: {
      transform: 'translateY(-$space$1)'
    }
  }]
});
const StyledInput = styled('input', {
  padding: 0,
  fontSize: '$$inputFontSize',
  bg: 'transparent',
  border: 'none',
  color: '$$inputTextColor',
  br: 0,
  outline: 'none',
  size: '100%',
  minWidth: 0,
  WebkitAppearance: 'none',
  '::placeholder': {
    color: '$$inputPlaceholderColor',
    transition: 'opacity 0.25s ease 0s',
    MozTransition: 'opacity 0.25s ease 0s',
    MsTransition: 'opacity 0.25s ease 0s',
    WebkitTransition: 'opacity 0.25s ease 0s'
  },
  '@motion': {
    transition: 'none',
    '&::placeholder': {
      transition: 'none'
    }
  },
  '&:disabled': {
    pe: 'none',
    color: '$accents4',
    cursor: 'not-allowed'
  },
  variants: {
    isTextarea: {
      true: {
        boxShadow: 'none',
        display: 'block',
        size: '100%',
        resize: 'none',
        border: 'none',
        outline: 'none'
      }
    },
    focused: {
      true: {
        '&::placeholder': {
          opacity: 0,
          transition: 'opacity 0.25s ease 0s'
        }
      }
    },
    bordered: {
      true: {
        padding: '0 $3'
      }
    },
    rounded: {
      true: {
        padding: '0 $3'
      }
    },
    animated: {
      false: {
        transition: 'none',
        '::placeholder': {
          transition: 'none'
        }
      }
    },
    hasLeftContent: {
      true: {
        ml: 0
      }
    },
    hasRightContent: {
      true: {
        mr: 0
      }
    }
  }
});
const StyledInputWrapper = styled('div', {
  flex: 1,
  position: 'relative',
  br: '$$inputBorderRadius',
  bg: '$$inputColor',
  display: 'inline-flex',
  verticalAlign: 'middle',
  alignItems: 'center',
  userSelect: 'none',
  '@motion': {
    transition: 'none',
    '&:before': {
      transition: 'none'
    },
    '&:after': {
      transition: 'none'
    }
  },
  variants: {
    focused: {
      true: {}
    },
    isReadOnly: {
      true: {}
    },
    bordered: {
      true: {
        bg: 'transparent',
        border: 'none',
        boxShadow: '0 0 0 $$inputBorderWeight $$inputBorderColor',
        transition: 'box-shadow 0.25s ease'
      }
    },
    shadow: {
      true: {
        transition: '$default'
      }
    },
    disabled: {
      true: {
        cursor: 'not-allowed'
      }
    },
    underlined: {
      true: {
        bg: 'transparent',
        [`& ${StyledInput}`]: {
          margin: '$2 $3'
        },
        '&:before': {
          content: '',
          position: 'absolute',
          zIndex: '$2',
          width: 0,
          bottom: 0,
          height: '$1',
          left: '50%',
          transform: 'translate(-50%)',
          background: '$$inputHoverBorderColor',
          transition: 'width 0.25s ease'
        },
        '&:after': {
          content: '',
          position: 'absolute',
          zIndex: '$1',
          bottom: 0,
          width: '100%',
          height: '$$inputBorderWeight',
          bg: '$$inputBorderColor'
        }
      },
      false: {
        [`& ${StyledInput}`]: {
          margin: '$2 $5'
        }
      }
    },
    animated: {
      false: {
        transition: 'none',
        '&:before': {
          transition: 'none'
        },
        '&:after': {
          transition: 'none'
        }
      }
    },
    isTextarea: {
      true: {
        boxSizing: 'border-box',
        width: '100%',
        maxWidth: '100%',
        height: 'auto'
      },
      false: {
        height: '100%'
      }
    }
  },
  compoundVariants: [{
    // underlined && bordered
    bordered: true,
    underlined: true,
    css: {
      boxShadow: '0 0 0 0px $$inputBorderColor'
    }
  }, {
    // focused && underlined
    focused: true,
    underlined: true,
    css: {
      '&:before': {
        width: '100%'
      }
    }
  }, // focused && shadow && !readOnly
  {
    focused: true,
    shadow: true,
    isReadOnly: false,
    underlined: false,
    css: {
      boxShadow: '$$inputShadow'
    }
  }, // focused && bordered && !readOnly && !underlined
  {
    focused: true,
    bordered: true,
    isReadOnly: false,
    underlined: false,
    css: {
      boxShadow: '0 0 0 $$inputBorderWeight $$inputHoverBorderColor'
    }
  }, //  bordered && !readOnly && !underlined
  {
    bordered: true,
    isReadOnly: false,
    underlined: false,
    css: {
      '&:hover': {
        boxShadow: '0 0 0 $$inputBorderWeight $$inputHoverBorderColor'
      }
    }
  }, // isTextarea  && !underlined
  {
    isTextarea: true,
    underlined: false,
    css: {
      [`& ${StyledInput}`]: {
        margin: '$xs $sm'
      }
    }
  }]
});
const StyledHelperTextContainer = styled('div', {
  position: 'absolute',
  opacity: 0,
  bottom: 'calc($$inputHeightRatio * -$space$5)',
  '@motion': {
    transition: 'none'
  },
  variants: {
    animated: {
      true: {
        transition: 'opacity 0.25s ease'
      },
      false: {
        transition: 'none'
      }
    },
    withValue: {
      true: {
        opacity: 1
      }
    }
  }
});
const StyledHelperText = styled('p', {
  margin: '$1 0 0 $5',
  fontSize: '$space$5',
  color: '$$inputHelperColor'
});
const StyledInputPlaceholder = styled('span', {}, sharedVisuallyHidden); /// Input accessories

const StyledInputBlockLabel = styled('label', {
  d: 'block',
  fontWeight: '$normal',
  color: '$$inputLabelColor',
  p: '0 0 0 $2',
  mb: '$3',
  fs: '$$inputFontSize',
  lh: '$md',
  WebkitTouchCallout: 'none'
  /* iOS Safari */
  ,
  WebkitUserSelect: 'none'
  /* Safari */
  ,
  KhtmlUserSelect: 'none'
  /* Konqueror HTML */
  ,
  MozUserSelect: 'none'
  /* Firefox */
  ,
  MsUserSelect: 'none'
  /* Internet Explorer/Edge */
  ,
  us: 'none'
  /* Non-prefixed version, currently supported by Chrome and Opera */
  ,
  '> *:first-child': {
    marginTop: 0
  },
  '> *:last-child': {
    mb: 0
  },
  '@motion': {
    transition: 'none'
  },
  variants: {
    rounded: {
      true: {
        padding: '0 0 0 $3'
      }
    },
    asPlaceholder: {
      true: {
        position: 'absolute',
        padding: 0,
        zIndex: '$1',
        left: '$space$6',
        top: '20%',
        mb: 0,
        cursor: 'text',
        color: '$$inputPlaceholderColor',
        transition: 'left 0.25s ease 0s, color 0.25s ease 0s, top 0.25s ease 0s'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    },
    focused: {
      true: {
        color: '$$inputHoverBorderColor'
      }
    },
    underlined: {
      true: {}
    },
    withValue: {
      true: {}
    },
    isTextarea: {
      true: {}
    },
    bordered: {
      true: {}
    },
    hasContentLeft: {
      true: {}
    }
  },
  compoundVariants: [// underlined && asPlaceholder
  {
    underlined: true,
    asPlaceholder: true,
    css: {
      left: '$space$2'
    }
  }, // asPlaceholder && focused && !underlined
  {
    asPlaceholder: true,
    focused: true,
    underlined: false,
    isTextarea: false,
    css: {
      top: '-72%',
      left: '$2',
      cursor: 'inherit'
    }
  }, // asPlaceholder && focused && underlined
  {
    asPlaceholder: true,
    focused: true,
    underlined: true,
    isTextarea: false,
    css: {
      top: '-72%',
      left: '0px',
      cursor: 'inherit'
    }
  }, // asPlaceholder && focused && withValue && !underlined
  {
    asPlaceholder: true,
    withValue: true,
    underlined: false,
    isTextarea: false,
    css: {
      color: '$$inputTextColor',
      top: '-72%',
      left: '$2',
      cursor: 'inherit'
    }
  }, // asPlaceholder && focused && withValue && underlined
  {
    asPlaceholder: true,
    withValue: true,
    underlined: true,
    isTextarea: false,
    css: {
      color: '$$inputTextColor',
      top: '-72%',
      left: '0px',
      cursor: 'inherit'
    }
  }, // asPlaceholder && isTextarea
  {
    asPlaceholder: true,
    isTextarea: true,
    css: {
      top: '$5'
    }
  }, // asPlaceholder && hasContentLeft
  {
    asPlaceholder: true,
    hasContentLeft: true,
    css: {
      left: 'calc($space$6 + $$inputHeightRatio * $space$7)'
    }
  }, // asPlaceholder && isTextarea && focused
  {
    asPlaceholder: true,
    isTextarea: true,
    focused: true,
    css: {
      top: 'calc(-$space$10 - $space$3)',
      left: '$2'
    }
  }, // asPlaceholder && isTextarea && withValue
  {
    asPlaceholder: true,
    isTextarea: true,
    withValue: true,
    css: {
      top: '-$11'
    }
  }, // focused && asPlaceholder && isTextarea && bordered
  {
    asPlaceholder: true,
    focused: true,
    isTextarea: true,
    bordered: true,
    css: {
      top: '-$12'
    }
  }],
  defaultVariants: {
    asPlaceholder: false
  }
});
const StyledInputLabel = styled('span', {
  position: 'relative',
  display: 'inline-flex',
  width: 'initial',
  height: '100%',
  fontWeight: '$medium',
  ai: 'center',
  pe: 'none',
  margin: 0,
  padding: '0 $sm',
  color: '$$inputPlaceholderColor',
  fontSize: '$$inputFontSize',
  lineHeight: '$xs',
  variants: {
    isRight: {
      true: {
        btrr: '$$inputBorderRadius',
        bbrr: '$$inputBorderRadius'
      },
      false: {
        btlr: '$$inputBorderRadius',
        bblr: '$$inputBorderRadius'
      }
    },
    isDark: {
      true: {}
    },
    isDefaultStatus: {
      true: {}
    },
    underlined: {
      true: {
        bg: 'transparent'
      }
    },
    bordered: {
      true: {
        '&:after': {
          display: 'none'
        },
        '&:before': {
          display: 'none'
        }
      }
    }
  },
  compoundVariants: [// isRight && underlined
  {
    isRight: true,
    underlined: true,
    css: {
      borderLeftColor: '$$inputPlaceholderColor',
      borderLeftStyle: 'solid',
      marginLeft: '$2',
      borderLeftWidth: 'calc($$inputBorderWeight / 2)',
      height: '40%'
    }
  }, // !isRight && underlined
  {
    isRight: false,
    underlined: true,
    css: {
      borderRightColor: '$$inputPlaceholderColor',
      borderRightStyle: 'solid',
      marginRight: '$2',
      borderRightWidth: 'calc($$inputBorderWeight / 1)',
      height: '40%'
    }
  }, // isDefaultStatus && !bordered && !underlined
  {
    isDefaultStatus: true,
    bordered: false,
    underlined: false,
    css: {
      bg: '$accents2'
    }
  }, // isDefaultStatus && !bordered && !underlined && isDark
  {
    isDefaultStatus: true,
    bordered: false,
    underlined: false,
    isDark: true,
    css: {
      color: '$accents6'
    }
  }, // !isDefaultStatus && !bordered && !underlined
  {
    isDefaultStatus: false,
    bordered: true,
    underlined: false,
    css: {
      bg: '$$inputColor'
    }
  }, // bordered && isRight
  {
    bordered: true,
    isRight: true,
    css: {
      peddingRight: '$sm',
      paddingLeft: 0
    }
  }, // bordered && !isRight
  {
    bordered: true,
    isRight: false,
    css: {
      peddingLeft: '$sm',
      paddingRight: 0
    }
  }],
  defaultVariants: {
    isRight: false
  }
});
const StyledInputContent = styled('span', {
  variants: {
    applyStyles: {
      true: {
        display: 'flex',
        boxSizing: 'content-box',
        width: 'calc($$inputHeightRatio * $space$4)',
        height: '100%',
        alignItems: 'center',
        verticalAlign: 'center',
        margin: 0,
        padding: '0 calc($$inputHeightRatio * $3)',
        color: '$$inputTextColor',
        lineHeight: '$xs',
        position: 'relative',
        cursor: 'default',
        pe: 'none'
      }
    },
    clickable: {
      true: {
        cursor: 'pointer',
        pe: 'auto'
      }
    }
  }
});
const StyledInputClearButton = styled('button', {
  position: 'absolute',
  right: 0,
  margin: 0,
  d: 'inline-flex',
  ai: 'center',
  border: 'none',
  bg: 'transparent',
  width: 'auto',
  height: 'auto',
  cursor: 'pointer',
  boxSizing: 'border-box',
  transition: 'color 250ms ease 0s, transform 250ms ease 0s, opacity 250ms ease 0s',
  color: '$$inputPlaceholderColor',
  visibility: 'hidden',
  transform: 'translateX(20%)',
  opacity: 0,
  '&:hover': {
    opacity: 0.85
  },
  svg: {
    color: 'currentColor',
    size: 'calc($space$5 * $$inputHeightRatio)'
  },
  '@motion': {
    transition: 'none'
  },
  variants: {
    visible: {
      true: {
        visibility: 'visible',
        transform: 'translateX(0)',
        opacity: 1
      }
    },
    underlined: {
      true: {
        padding: '0 $1'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    },
    hasContentRight: {
      true: {
        padding: 0,
        position: 'relative',
        transform: 'translateX(30%)'
      }
    },
    disabled: {
      true: {
        cursor: 'not-allowed',
        '&:hover': {
          color: '$accents3'
        }
      }
    }
  }
}); // types
;// CONCATENATED MODULE: ./src/input/input.tsx
var input_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/input/input.tsx";











const simulateChangeEvent = (el, event) => {
  return { ...event,
    target: el,
    currentTarget: el
  };
};

const input_preClass = 'nextui-input';
const Input = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  as: Component = 'input',
  label,
  labelPlaceholder,
  labelLeft,
  labelRight,
  size,
  helperText,
  color,
  helperColor,
  status,
  contentLeft,
  contentRight,
  contentClickable,
  contentLeftStyling,
  contentRightStyling,
  onContentClick,
  initialValue,
  onChange,
  readOnly,
  value,
  onClearClick,
  clearable,
  shadow,
  animated,
  required,
  width: widthProp,
  className,
  onBlur,
  onFocus,
  autoComplete,
  placeholder,
  fullWidth,
  borderWeight,
  disabled,
  bordered,
  underlined,
  rounded,
  css,
  ...props
}, ref) => {
  const inputRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => inputRef.current);
  const [selfValue, setSelfValue] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(initialValue);
  const [hover, setHover] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  const {
    isDark
  } = src_use_theme();
  const isControlledComponent = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => value !== undefined, [value]);
  const inputLabel = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => label || labelPlaceholder, [label, labelPlaceholder]);
  const inputPlaceholder = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => labelPlaceholder ? '' : placeholder, [placeholder, labelPlaceholder]);
  const width = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (fullWidth) return '100%';
    if (widthProp) return widthProp;
    return 'initial';
  }, [fullWidth, widthProp]);

  if (underlined && __DEV__) {
    bordered && src_use_warning('Using underlined and bordered at the same time will have no effect.');
    rounded && src_use_warning('Using underlined and rounded at the same time will have no effect.');
  }

  const changeHandler = event => {
    if (disabled || readOnly) return;
    setSelfValue(event.target.value);
    onChange && onChange(event);
  };

  const clearHandler = event => {
    event.preventDefault();
    event.stopPropagation();
    event.nativeEvent.stopImmediatePropagation();
    setSelfValue('');
    onClearClick && onClearClick(event);
    /* istanbul ignore next */

    if (!inputRef.current) return;
    const changeEvent = simulateChangeEvent(inputRef.current, event);
    changeEvent.target.value = '';
    onChange && onChange(changeEvent);
    inputRef.current.focus();
  };

  const focusHandler = e => {
    setHover(true);
    onFocus && onFocus(e);
  };

  const blurHandler = e => {
    setHover(false);
    onBlur && onBlur(e);
  };

  const contentClickHandler = (key, e) => {
    if (disabled) return;
    onContentClick && onContentClick(key, e);
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isControlledComponent) {
      setSelfValue(value);
    }
  });
  const isTextarea = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => Component === 'textarea', [Component]);
  const controlledValue = isControlledComponent ? {
    value: selfValue
  } : {
    defaultValue: initialValue
  };
  const inputProps = { ...props,
    ...controlledValue
  };
  const {
    labelProps,
    fieldProps
  } = $a25d9b7703051f71$export$8467354a121f1b9f({ ...inputProps,
    label: inputLabel
  });
  const getState = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    return hover ? 'hover' : disabled ? 'disabled' : readOnly ? 'read-only' : selfValue ? 'with-value' : 'normal';
  }, [hover, disabled, readOnly, selfValue]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputMainContainer, {
    color: color,
    "data-state": getState,
    helperColor: helperColor,
    borderWeight: borderWeight,
    status: status,
    size: size,
    rounded: rounded,
    disabled: disabled,
    css: {
      width,
      ...css
    },
    className: clsx(`${input_preClass}-main-container`, `${input_preClass}-main-container--${getState}`),
    children: [inputLabel && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputBlockLabel, {
      id: labelProps.id,
      className: `${input_preClass}-block-label`,
      htmlFor: labelProps.htmlFor,
      isTextarea: isTextarea,
      underlined: underlined,
      animated: animated,
      bordered: bordered,
      rounded: rounded,
      hasContentLeft: !!contentLeft,
      withValue: !!selfValue,
      asPlaceholder: !!labelPlaceholder,
      focused: hover,
      children: inputLabel
    }, void 0, false, {
      fileName: input_jsxFileName,
      lineNumber: 229,
      columnNumber: 11
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputContainer, {
      animated: animated,
      isTextarea: isTextarea,
      underlined: underlined,
      isReadOnly: readOnly,
      focused: hover,
      className: clsx(`${input_preClass}-container`, `${input_preClass}-container--${getState}`, {
        [`${input_preClass}-container--input`]: !isTextarea,
        [`${input_preClass}-container--textarea`]: isTextarea,
        [`${input_preClass}-container--read-only`]: readOnly
      }, className),
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputWrapper, {
        as: inputLabel ? 'div' : 'label',
        animated: animated,
        bordered: bordered,
        shadow: shadow,
        disabled: disabled,
        focused: hover,
        isReadOnly: readOnly,
        underlined: underlined,
        isTextarea: isTextarea,
        className: clsx(`${input_preClass}-wrapper`, `${input_preClass}-wrapper--${getState}`, {
          [`${input_preClass}-wrapper--bordered`]: bordered,
          [`${input_preClass}-wrapper--underlined`]: underlined,
          [`${input_preClass}-wrapper--shadow`]: shadow
        }),
        children: [!inputLabel && placeholder && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputPlaceholder, {
          className: `${input_preClass}-placeholder`,
          children: placeholder
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 284,
          columnNumber: 15
        }, undefined), labelLeft && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputLabel, {
          className: `${input_preClass}-label--left`,
          isDefaultStatus: status === 'default',
          underlined: underlined,
          bordered: bordered,
          isDark: isDark,
          children: labelLeft
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 289,
          columnNumber: 15
        }, undefined), contentLeft && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputContent, {
          className: clsx(`${input_preClass}-content`, `${input_preClass}-content--left`),
          applyStyles: contentLeftStyling,
          clickable: contentClickable,
          onClick: e => contentClickHandler('left', e),
          children: contentLeft
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 300,
          columnNumber: 15
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInput, {
          type: "text",
          as: Component,
          ref: inputRef,
          className: clsx({
            [`${input_preClass}`]: !isTextarea,
            [`${input_preClass}-textarea`]: isTextarea,
            [`${input_preClass}-disabled`]: disabled,
            [`${input_preClass}-rounded`]: rounded,
            [`${input_preClass}-${input_preClass}-right-content`]: contentRight,
            [`${input_preClass}-left-content`]: contentLeft
          }),
          isTextarea: isTextarea,
          focused: hover,
          bordered: bordered,
          placeholder: inputPlaceholder,
          disabled: disabled,
          readOnly: readOnly,
          onFocus: focusHandler,
          onBlur: blurHandler,
          onChange: changeHandler,
          autoComplete: autoComplete,
          hasLeftContent: !!contentLeft,
          hasRightContent: !!contentRight,
          "data-state": getState,
          "aria-placeholder": inputPlaceholder,
          "aria-readonly": readOnly,
          "aria-required": required,
          "aria-multiline": isTextarea,
          ...inputProps,
          ...fieldProps
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 314,
          columnNumber: 13
        }, undefined), clearable && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputClearButton, {
          type: "button",
          className: `${input_preClass}-clear-button`,
          animated: animated,
          underlined: underlined,
          visible: Boolean(selfValue),
          hasContentRight: !!contentRight,
          disabled: disabled || readOnly,
          onClick: clearHandler,
          children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(clear_icon, {
            fill: "currentColor"
          }, void 0, false, {
            fileName: input_jsxFileName,
            lineNumber: 357,
            columnNumber: 17
          }, undefined)
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 347,
          columnNumber: 15
        }, undefined), contentRight && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputContent, {
          className: clsx(`${input_preClass}-content`, `${input_preClass}-content--right`),
          applyStyles: contentRightStyling,
          clickable: contentClickable,
          onClick: e => contentClickHandler('right', e),
          children: contentRight
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 361,
          columnNumber: 15
        }, undefined), labelRight && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledInputLabel, {
          className: `${input_preClass}-label--right`,
          isDefaultStatus: status === 'default',
          underlined: underlined,
          bordered: bordered,
          isRight: true,
          isDark: isDark,
          children: labelRight
        }, void 0, false, {
          fileName: input_jsxFileName,
          lineNumber: 376,
          columnNumber: 15
        }, undefined)]
      }, void 0, true, {
        fileName: input_jsxFileName,
        lineNumber: 263,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: input_jsxFileName,
      lineNumber: 246,
      columnNumber: 9
    }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledHelperTextContainer, {
      className: `${input_preClass}-helper-text-container`,
      withValue: !!helperText,
      children: helperText && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledHelperText, {
        className: `${input_preClass}-helper-text`,
        children: helperText
      }, void 0, false, {
        fileName: input_jsxFileName,
        lineNumber: 394,
        columnNumber: 13
      }, undefined)
    }, void 0, false, {
      fileName: input_jsxFileName,
      lineNumber: 389,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: input_jsxFileName,
    lineNumber: 210,
    columnNumber: 7
  }, undefined);
});
Input.displayName = 'NextUI - Input';
Input.defaultProps = input_props_defaultProps;

Input.toString = () => '.nextui-input';

/* harmony default export */ const input = (Input);
;// CONCATENATED MODULE: ./src/textarea/utils.ts

const SIZING_STYLE = ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth', 'boxSizing', 'fontFamily', 'fontSize', 'fontStyle', 'fontWeight', 'letterSpacing', 'lineHeight', 'paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop', 'tabSize', 'textIndent', 'textRendering', 'textTransform', 'width', 'wordBreak'];
const HIDDEN_TEXTAREA_STYLE = {
  'min-height': '0',
  'max-height': 'none',
  height: '0',
  visibility: 'hidden',
  overflow: 'hidden',
  position: 'absolute',
  'z-index': '-1000',
  top: '0',
  right: '0'
};
const isIE = typeof document !== 'undefined' ? !!document.documentElement.currentStyle : false;
const forceHiddenStyles = node => {
  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(key => {
    node.style.setProperty(key, HIDDEN_TEXTAREA_STYLE[key], 'important');
  });
};
const getSizingData = node => {
  const style = window.getComputedStyle(node);

  if (style === null) {
    return null;
  }

  const sizingStyle = pick(SIZING_STYLE, style);
  const {
    boxSizing
  } = sizingStyle; // probably node is detached from DOM, can't read computed dimensions

  if (boxSizing === '') {
    return null;
  } // IE (Edge has already correct behaviour) returns content width as computed width
  // so we need to add manually padding and border widths


  if (isIE && boxSizing === 'border-box') {
    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + 'px';
  }

  const paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);
  const borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);
  return {
    sizingStyle,
    paddingSize,
    borderSize
  };
}; // TODO: use labelled tuples once they are avaiable:
//   export type CalculatedNodeHeights = [height: number, rowHeight: number];
// https://github.com/microsoft/TypeScript/issues/28259

let hiddenTextarea = null;

const getHeight = (node, sizingData) => {
  const height = node.scrollHeight;

  if (sizingData.sizingStyle.boxSizing === 'border-box') {
    // border-box: add border, since height = content + padding + border
    return height + sizingData.borderSize;
  } // remove padding, since height = content


  return height - sizingData.paddingSize;
};

const calculateNodeHeight = (sizingData, value, minRows = 1, maxRows = Infinity) => {
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement('textarea');
    hiddenTextarea.setAttribute('tabindex', '-1');
    hiddenTextarea.setAttribute('aria-hidden', 'true');
    forceHiddenStyles(hiddenTextarea);
  }

  if (hiddenTextarea.parentNode === null) {
    document.body.appendChild(hiddenTextarea);
  }

  const {
    paddingSize,
    borderSize,
    sizingStyle
  } = sizingData;
  const {
    boxSizing
  } = sizingStyle;
  Object.keys(sizingStyle).forEach(_key => {
    const key = _key;
    hiddenTextarea.style[key] = sizingStyle[key];
  });
  forceHiddenStyles(hiddenTextarea);
  hiddenTextarea.value = value;
  let height = getHeight(hiddenTextarea, sizingData); // measure height of a textarea with a single row

  hiddenTextarea.value = 'x';
  const rowHeight = hiddenTextarea.scrollHeight - paddingSize;
  let minHeight = rowHeight * minRows;

  if (boxSizing === 'border-box') {
    minHeight = minHeight + paddingSize + borderSize;
  }

  height = Math.max(minHeight, height);
  let maxHeight = rowHeight * maxRows;

  if (boxSizing === 'border-box') {
    maxHeight = maxHeight + paddingSize + borderSize;
  }

  height = Math.min(maxHeight, height);
  return [height, rowHeight];
};
;// CONCATENATED MODULE: ./src/textarea/textarea.tsx
var textarea_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/textarea/textarea.tsx";









const textarea_defaultProps = {
  minRows: 3,
  maxRows: 6,
  cacheMeasurements: true,
  initialValue: ''
};
const Textarea = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((textareaProps, ref) => {
  const textareaRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const heightRef = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useRef(0);
  const measurementsCacheRef = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useRef();
  const {
    cacheMeasurements,
    rows,
    maxRows,
    minRows,
    onChange,
    onHeightChange,
    css,
    ...props
  } = textareaProps;
  Object.keys(props).forEach(propNameKey => {
    if (excludedInputPropsForTextarea.indexOf(propNameKey) > -1) {
      // @ts-ignored
      delete props[propNameKey];
    }
  });
  const isControlled = props.value !== undefined;

  if (__DEV__ && props.style) {
    if ('maxHeight' in props.style) {
      src_use_warning('Using `style.maxHeight` for <Textarea/> is not supported. Please use `maxRows`.');
    }

    if ('minHeight' in props.style) {
      src_use_warning('Using `style.minHeight` for <Textarea/> is not supported. Please use `minRows`.');
    }
  }

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => textareaRef.current);

  const resizeTextarea = () => {
    const node = textareaRef.current;
    const nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData(node);

    if (!nodeSizingData) {
      return;
    }

    measurementsCacheRef.current = nodeSizingData;
    const [height, rowHeight] = calculateNodeHeight(nodeSizingData, node.value || node.placeholder || 'x', rows || minRows, rows || maxRows);

    if (heightRef.current !== height) {
      heightRef.current = height;
      node.style.setProperty('height', `${height}px`, 'important');
      onHeightChange && onHeightChange(height, {
        rowHeight
      });
    }
  };

  const handleChange = event => {
    if (!isControlled) {
      resizeTextarea();
    }

    onChange && onChange(event);
  };

  if (typeof document !== 'undefined') {
    (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useLayoutEffect)(resizeTextarea);
    src_use_resize(resizeTextarea);
  }

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_input, {
    as: "textarea",
    ref: textareaRef,
    onChange: handleChange,
    css: { ...css
    },
    ...props
  }, void 0, false, {
    fileName: textarea_jsxFileName,
    lineNumber: 130,
    columnNumber: 7
  }, undefined);
});

if (__DEV__) {
  Textarea.displayName = 'NextUI - Textarea';
}

Textarea.toString = () => '.nextui-textarea';

/* harmony default export */ const textarea_textarea = (with_defaults(Textarea, textarea_defaultProps));
;// CONCATENATED MODULE: ./src/textarea/index.ts

/* harmony default export */ const src_textarea = (textarea_textarea);
;// CONCATENATED MODULE: ./src/input/password-icon.tsx
var password_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/input/password-icon.tsx";




const PasswordIcon = ({
  visible
}) => {
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("svg", {
    viewBox: "0 0 24 24",
    width: "16",
    height: "16",
    stroke: "currentColor",
    strokeWidth: "1.5",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    fill: "none",
    className: "nextui-input-password-icon",
    shapeRendering: "geometricPrecision",
    style: {
      color: 'currentColor'
    },
    children: !visible ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 24,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("circle", {
        cx: "12",
        cy: "12",
        r: "3"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 25,
        columnNumber: 11
      }, undefined)]
    }, void 0, true) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(jsx_dev_runtime.Fragment, {
      children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M17.94 17.94A10.07 10.07 0 0112 20c-7 0-11-8-11-8a18.45 18.45 0 015.06-5.94M9.9 4.24A9.12 9.12 0 0112 4c7 0 11 8 11 8a18.5 18.5 0 01-2.16 3.19m-6.72-1.07a3 3 0 11-4.24-4.24"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 29,
        columnNumber: 11
      }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
        d: "M1 1l22 22"
      }, void 0, false, {
        fileName: password_icon_jsxFileName,
        lineNumber: 30,
        columnNumber: 11
      }, undefined)]
    }, void 0, true)
  }, void 0, false, {
    fileName: password_icon_jsxFileName,
    lineNumber: 9,
    columnNumber: 5
  }, undefined);
};

const MemoPasswordIcon = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().memo(PasswordIcon);
/* harmony default export */ const password_icon = (MemoPasswordIcon);
;// CONCATENATED MODULE: ./src/input/input-password.tsx
var input_password_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/input/input-password.tsx";








const passwordDefaultProps = { ...input_props_defaultProps,
  hideToggle: false,
  visibleIcon: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(password_icon, {
    visible: true
  }, void 0, false, {
    fileName: input_password_jsxFileName,
    lineNumber: 19,
    columnNumber: 16
  }, undefined),
  hiddenIcon: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(password_icon, {
    visible: false
  }, void 0, false, {
    fileName: input_password_jsxFileName,
    lineNumber: 20,
    columnNumber: 15
  }, undefined)
};
const InputPassword = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  hideToggle,
  visibleIcon,
  hiddenIcon,
  children,
  ...props
}, ref) => {
  const inputRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const [visible, setVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => inputRef.current);

  const iconClickHandler = () => {
    setVisible(v => !v);
  };

  const inputProps = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({ ...props,
    ref: inputRef,
    className: clsx('nextui-input-password', props.className),
    contentClickable: true,
    onContentClick: iconClickHandler,
    type: visible ? 'text' : 'password'
  }), [props, iconClickHandler, visible, inputRef]);
  const icon = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (hideToggle) return null;
    return visible ? visibleIcon : hiddenIcon;
  }, [hideToggle, visible, visibleIcon, hiddenIcon]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(input, {
    contentRight: icon,
    ...inputProps,
    children: children
  }, void 0, false, {
    fileName: input_password_jsxFileName,
    lineNumber: 61,
    columnNumber: 7
  }, undefined);
});

if (__DEV__) {
  InputPassword.displayName = 'NextUI - Input Password';
}

InputPassword.toString = () => '.nextui-input-password';

/* harmony default export */ const input_password = (with_defaults(InputPassword, passwordDefaultProps));
;// CONCATENATED MODULE: ./src/input/index.ts




input.Textarea = src_textarea;
input.Password = input_password;
/* harmony default export */ const src_input = (input);
;// CONCATENATED MODULE: ../../node_modules/@react-aria/grid/node_modules/@react-stately/virtualizer/dist/module.js



function virtualizer_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $c74cda7d31af1253$exports = {};
virtualizer_dist_module_$parcel$export($c74cda7d31af1253$exports, "Layout", () => $c74cda7d31af1253$export$c84671f46d6a1ca);

class $c74cda7d31af1253$export$c84671f46d6a1ca {
  /**
  * Returns whether the layout should invalidate in response to
  * visible rectangle changes. By default, it only invalidates
  * when the collection view's size changes. Return true always
  * to make the layout invalidate while scrolling (e.g. sticky headers).
  */
  shouldInvalidate(newRect, oldRect) {
    // By default, invalidate when the size changes
    return newRect.width !== oldRect.width || newRect.height !== oldRect.height;
  }
  /**
  * This method allows the layout to perform any pre-computation
  * it needs to in order to prepare {@link LayoutInfo}s for retrieval.
  * Called by the collection view before {@link getVisibleLayoutInfos}
  * or {@link getLayoutInfo} are called.
  */


  validate(invalidationContext) {}
  /**
  * Returns a {@link DragTarget} describing a view at the given point to be dragged.
  * Return `null` to cancel the drag. The default implementation returns the view at the given point.
  * @param point The point at which the drag occurred.
  */
  // getDragTarget(point: Point): DragTarget | null {
  //   let target = this.virtualizer.keyAtPoint(point);
  //   if (!target) {
  //     return null;
  //   }
  //   return {
  //     type: 'item',
  //     key: target
  //   };
  // }

  /**
  * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`
  * to reject the drop. The dropped items will be inserted before the resulting target.
  * @param point The point at which the drop occurred.
  */
  // getDropTarget(point: Point): DropTarget | null {
  //   return null;
  // }

  /**
  * Returns the starting attributes for an animated insertion.
  * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.
  * The default implementation just returns its input.
  *
  * @param layoutInfo The proposed LayoutInfo for this view.
  */


  getInitialLayoutInfo(layoutInfo) {
    return layoutInfo;
  }
  /**
  * Returns the ending attributes for an animated removal.
  * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}
  * to the one returned by this method. The default implementation returns its input.
  *
  * @param layoutInfo The original LayoutInfo for this view.
  */


  getFinalLayoutInfo(layoutInfo) {
    return layoutInfo;
  }

}

var $d7fd61009c21d0bb$exports = {};
virtualizer_dist_module_$parcel$export($d7fd61009c21d0bb$exports, "LayoutInfo", () => $d7fd61009c21d0bb$export$7e0eeb9da702a085);

class $d7fd61009c21d0bb$export$7e0eeb9da702a085 {
  /**
  * Returns a copy of the LayoutInfo.
  */
  copy() {
    let res = new $d7fd61009c21d0bb$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());
    res.estimatedSize = this.estimatedSize;
    res.opacity = this.opacity;
    res.transform = this.transform;
    res.parentKey = this.parentKey;
    res.isSticky = this.isSticky;
    res.zIndex = this.zIndex;
    res.allowOverflow = this.allowOverflow;
    return res;
  }
  /**
  * @param type A string representing the view type. Should be `'item'` for item views.
                          Other types are used by supplementary views.
  * @param key The unique key for this view.
  * @param rect The rectangle describing the size and position of this view.
  */


  constructor(type, key, rect) {
    this.type = type;
    this.key = key;
    this.parentKey = null;
    this.rect = rect;
    this.estimatedSize = false;
    this.isSticky = false;
    this.opacity = 1;
    this.transform = null;
    this.zIndex = 0;
    this.allowOverflow = false;
  }

}

var $3041db3296945e6e$exports = {};
virtualizer_dist_module_$parcel$export($3041db3296945e6e$exports, "Point", () => $3041db3296945e6e$export$baf26146a414f24a);

class $3041db3296945e6e$export$baf26146a414f24a {
  /**
  * Returns a copy of this point.
  */
  copy() {
    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);
  }
  /**
  * Checks if two points are equal.
  */


  equals(point) {
    return this.x === point.x && this.y === point.y;
  }
  /**
  * Returns true if this point is the origin.
  */


  isOrigin() {
    return this.x === 0 && this.y === 0;
  }

  constructor(x = 0, y = 0) {
    this.x = x;
    this.y = y;
  }

}

var $60423f92c7f9ad87$exports = {};
virtualizer_dist_module_$parcel$export($60423f92c7f9ad87$exports, "Rect", () => $60423f92c7f9ad87$export$c79fc6492f3af13d);

class $60423f92c7f9ad87$export$c79fc6492f3af13d {
  /**
  * The maximum x-coordinate in the rectangle.
  */
  get maxX() {
    return this.x + this.width;
  }
  /**
  * The maximum y-coordinate in the rectangle.
  */


  get maxY() {
    return this.y + this.height;
  }
  /**
  * The area of the rectangle.
  */


  get area() {
    return this.width * this.height;
  }
  /**
  * The top left corner of the rectangle.
  */


  get topLeft() {
    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.y);
  }
  /**
  * The top right corner of the rectangle.
  */


  get topRight() {
    return new $3041db3296945e6e$export$baf26146a414f24a(this.maxX, this.y);
  }
  /**
  * The bottom left corner of the rectangle.
  */


  get bottomLeft() {
    return new $3041db3296945e6e$export$baf26146a414f24a(this.x, this.maxY);
  }
  /**
  * The bottom right corner of the rectangle.
  */


  get bottomRight() {
    return new $3041db3296945e6e$export$baf26146a414f24a(this.maxX, this.maxY);
  }
  /**
  * Returns whether this rectangle intersects another rectangle.
  * @param rect - The rectangle to check.
  */


  intersects(rect) {
    return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;
  }
  /**
  * Returns whether this rectangle fully contains another rectangle.
  * @param rect - The rectangle to check.
  */


  containsRect(rect) {
    return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;
  }
  /**
  * Returns whether the rectangle contains the given point.
  * @param point - The point to check.
  */


  containsPoint(point) {
    return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;
  }
  /**
  * Returns the first corner of this rectangle (from top to bottom, left to right)
  * that is contained in the given rectangle, or null of the rectangles do not intersect.
  * @param rect - The rectangle to check.
  */


  getCornerInRect(rect) {
    for (let key of ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']) {
      if (rect.containsPoint(this[key])) return key;
    }

    return null;
  }

  equals(rect) {
    return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;
  }

  pointEquals(point) {
    return this.x === point.x && this.y === point.y;
  }

  sizeEquals(size) {
    return this.width === size.width && this.height === size.height;
  }
  /**
  * Returns a copy of this rectangle.
  */


  copy() {
    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);
  }

  constructor(x = 0, y = 0, width = 0, height = 0) {
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }

}

var $ee1bfa90a957fb8a$exports = {};
virtualizer_dist_module_$parcel$export($ee1bfa90a957fb8a$exports, "Size", () => $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec);

class $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec {
  /**
  * Returns a copy of this size.
  */
  copy() {
    return new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec(this.width, this.height);
  }
  /**
  * Returns whether this size is equal to another one.
  */


  equals(other) {
    return this.width === other.width && this.height === other.height;
  }

  constructor(width = 0, height = 0) {
    this.width = width;
    this.height = height;
  }

}

var $ad1d98aa8f0c31b4$exports = {};
virtualizer_dist_module_$parcel$export($ad1d98aa8f0c31b4$exports, "ReusableView", () => $ad1d98aa8f0c31b4$export$1a5223887c560441);
let $ad1d98aa8f0c31b4$var$KEY = 0;

class $ad1d98aa8f0c31b4$export$1a5223887c560441 {
  /**
  * Prepares the view for reuse. Called just before the view is removed from the DOM.
  */
  prepareForReuse() {
    this.content = null;
    this.rendered = null;
    this.layoutInfo = null;
  }

  constructor(virtualizer) {
    this.virtualizer = virtualizer;
    this.key = ++$ad1d98aa8f0c31b4$var$KEY;
  }

}

var $fc0b13b484ac1194$exports = {};
virtualizer_dist_module_$parcel$export($fc0b13b484ac1194$exports, "useVirtualizerState", () => $fc0b13b484ac1194$export$1505db82fe357e65); // use high res timer if available

let $3eb131dcf37ad5f8$var$perf = typeof window !== 'undefined' ? window.performance : null; // @ts-ignore

let $3eb131dcf37ad5f8$var$perfNow = $3eb131dcf37ad5f8$var$perf && ($3eb131dcf37ad5f8$var$perf.now || $3eb131dcf37ad5f8$var$perf.webkitNow || $3eb131dcf37ad5f8$var$perf.msNow || $3eb131dcf37ad5f8$var$perf.mozNow);
let $3eb131dcf37ad5f8$var$getTime = $3eb131dcf37ad5f8$var$perfNow ? $3eb131dcf37ad5f8$var$perfNow.bind($3eb131dcf37ad5f8$var$perf) : function () {
  return Date.now ? Date.now() : new Date().getTime();
};
let $3eb131dcf37ad5f8$var$fixTs;

function $3eb131dcf37ad5f8$export$dc0b63720788090c(begin, end, duration, ease, fn) {
  let canceled = false;
  let raf_id;
  let promise = new Promise(resolve => {
    let start = $3eb131dcf37ad5f8$var$getTime();
    let diffX = end.x - begin.x;
    let diffY = end.y - begin.y;
    raf_id = requestAnimationFrame(function run(t) {
      // if we're using a high res timer, make sure timestamp is not the old epoch-based value.
      // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision
      if ($3eb131dcf37ad5f8$var$fixTs == null) $3eb131dcf37ad5f8$var$fixTs = t > 1000000000000 !== $3eb131dcf37ad5f8$var$getTime() > 1000000000000;
      if ($3eb131dcf37ad5f8$var$fixTs) t = $3eb131dcf37ad5f8$var$getTime(); // check if we're done

      let delta = t - start;

      if (delta > duration) {
        fn(end);
        resolve();
      } else {
        // call frame callback after computing eased time and get the next frame
        let proceed = fn(new $3041db3296945e6e$export$baf26146a414f24a(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));
        if (proceed !== false && !canceled) raf_id = requestAnimationFrame(run);
      }
    });
  });

  promise.cancel = function () {
    canceled = true;
    cancelAnimationFrame(raf_id);
  };

  return promise;
}

function $3eb131dcf37ad5f8$export$77860c106b4a6a2e(t) {
  return t;
}

function $3eb131dcf37ad5f8$export$57636bb43b1ccbb0(t) {
  return Math.sin(t * Math.PI / 2);
}

function $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b) {
  let res = new Set();

  for (let key of a.keys()) if (!b.has(key)) res.add(key);

  return res;
}

function $fc36f9a046a9ce79$export$acaf96a27438246b(a, b) {
  let toRemove = $fc36f9a046a9ce79$export$37a26b283fd7740e(a, b);
  let toAdd = $fc36f9a046a9ce79$export$37a26b283fd7740e(b, a);
  let toUpdate = new Set();

  for (let key of a.keys()) if (b.has(key)) toUpdate.add(key);

  return {
    toRemove: toRemove,
    toAdd: toAdd,
    toUpdate: toUpdate
  };
}

function* $fc36f9a046a9ce79$export$cfc14088dfefce5f(...iterators) {
  for (let iterator of iterators) yield* iterator;
}

function $fc36f9a046a9ce79$export$6897c284b6f9f4dc(object) {
  let res = {};

  for (let key in object) res[object[key]] = key;

  return res;
}

class $364191b3decf3697$var$RollingAverage {
  addSample(sample) {
    this.count++;
    this.value += (sample - this.value) / this.count;
  }

  constructor() {
    this.count = 0;
    this.value = 0;
  }

}

class $364191b3decf3697$export$4455ee6afb38dcbb {
  setVisibleRect(rect) {
    let time = performance.now() - this.startTime;

    if (time < 500) {
      this.averageTime.addSample(time);
      if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;
      if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;
    }

    this.startTime = performance.now();
    this.visibleRect = rect;
  }

  collectMetrics() {
    let time = performance.now() - this.startTime;
    if (time < 500) this.averagePerf.addSample(time);

    if (this.visibleRect.height > 0) {
      let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));
      this.overscanY.addSample(o);
    }

    if (this.visibleRect.width > 0) {
      let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));
      this.overscanX.addSample(o);
    }
  }

  getOverscannedRect() {
    let overscanned = this.visibleRect.copy();
    let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;

    if (this.velocity.y > 0) {
      overscanned.y -= overscanY * 0.2;
      overscanned.height += overscanY + overscanY * 0.2;
    } else {
      overscanned.y -= overscanY;
      overscanned.height += overscanY + overscanY * 0.2;
    }

    let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;

    if (this.velocity.x > 0) {
      overscanned.x -= overscanX * 0.2;
      overscanned.width += overscanX + overscanX * 0.2;
    } else {
      overscanned.x -= overscanX;
      overscanned.width += overscanX + overscanX * 0.2;
    }

    return overscanned;
  }

  constructor() {
    this.startTime = 0;
    this.averagePerf = new $364191b3decf3697$var$RollingAverage();
    this.averageTime = new $364191b3decf3697$var$RollingAverage();
    this.velocity = new $3041db3296945e6e$export$baf26146a414f24a(5, 5);
    this.overscanX = new $364191b3decf3697$var$RollingAverage();
    this.overscanY = new $364191b3decf3697$var$RollingAverage();
    this.visibleRect = new $60423f92c7f9ad87$export$c79fc6492f3af13d();
  }

}

class $8e135e531d8dcb66$export$febc5573c75cefb0 {
  constructor() {
    this.level = 0;
    this.actions = [];
    this.animated = true;
    this.initialMap = new Map();
    this.finalMap = new Map();
    this.initialLayoutInfo = new Map();
    this.finalLayoutInfo = new Map();
    this.removed = new Map();
    this.toRemove = new Map();
  }

}

class $38b9490c1cca8fc4$export$89be5a243e59c4b2 {
  _setContentSize(size) {
    this._contentSize = size;
    this.delegate.setContentSize(size);
  }

  _setContentOffset(offset) {
    let rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);
    this.delegate.setVisibleRect(rect);
  }
  /**
  * Get the size of the scrollable content.
  */


  get contentSize() {
    return this._contentSize;
  }
  /**
  * Get the collection view's currently visible rectangle.
  */


  get visibleRect() {
    return this._visibleRect;
  }
  /**
  * Set the collection view's currently visible rectangle.
  */


  set visibleRect(rect) {
    this._setVisibleRect(rect);
  }

  _setVisibleRect(rect, forceUpdate = false) {
    let current = this._visibleRect; // Ignore if the rects are equal

    if (rect.equals(current)) return;
    if (this.shouldOverscan) this._overscanManager.setVisibleRect(rect);
    let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);

    this._resetAnimatedContentOffset();

    this._visibleRect = rect;
    if (shouldInvalidate) this.relayout({
      offsetChanged: !rect.pointEquals(current),
      sizeChanged: !rect.sizeEquals(current)
    });else this.updateSubviews(forceUpdate);
  }

  get collection() {
    return this._collection;
  }

  set collection(data) {
    this._setData(data);
  }

  _setData(data) {
    if (data === this._collection) return;
    if (this._collection) this._runTransaction(() => {
      this._collection = data;
    }, this.transitionDuration > 0);else {
      this._collection = data;
      this.reloadData();
    }
  }
  /**
  * Reloads the data from the data source and relayouts the collection view.
  * Does not animate any changes. Equivalent to re-assigning the same data source
  * to the collection view.
  */


  reloadData() {
    this.relayout({
      contentChanged: true
    });
  }
  /**
  * Returns the item with the given key.
  */


  getItem(key) {
    return this._collection ? this._collection.getItem(key) : null;
  }
  /**
  * Get the collection view's layout.
  */


  get layout() {
    return this._layout;
  }
  /**
  * Set the collection view's layout.
  */


  set layout(layout) {
    this.setLayout(layout);
  }
  /**
  * Sets the collection view's layout, optionally with an animated transition
  * from the current layout to the new layout.
  * @param layout The layout to switch to.
  * @param animated Whether to animate the layout change.
  */


  setLayout(layout, animated = false) {
    if (layout === this._layout) return;

    let applyLayout = () => {
      if (this._layout) // @ts-ignore
        this._layout.virtualizer = null;
      layout.virtualizer = this;
      this._layout = layout;
    };

    if (animated) // Animated layout transitions are really simple, thanks to our transaction support.
      // We just set the layout inside a transaction action, which runs after the initial
      // layout infos for the animation are retrieved from the previous layout. Then, the
      // final layout infos are retrieved from the new layout, and animations occur.
      this._runTransaction(applyLayout);else {
      applyLayout();
      this.relayout();
    }
  }

  _getReuseType(layoutInfo, content) {
    if (layoutInfo.type === 'item' && content) {
      let type = this.delegate.getType ? this.delegate.getType(content) : 'item';
      let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;
      return {
        type: type,
        reuseType: reuseType
      };
    }

    return {
      type: layoutInfo.type,
      reuseType: layoutInfo.type
    };
  }

  getReusableView(layoutInfo) {
    let content = this.getItem(layoutInfo.key);

    let {
      reuseType: reuseType
    } = this._getReuseType(layoutInfo, content);

    if (!this._reusableViews[reuseType]) this._reusableViews[reuseType] = [];
    let reusable = this._reusableViews[reuseType];
    let view = reusable.length > 0 ? reusable.pop() : new $ad1d98aa8f0c31b4$export$1a5223887c560441(this);
    view.viewType = reuseType;

    if (!this._animatedContentOffset.isOrigin()) {
      layoutInfo = layoutInfo.copy();
      layoutInfo.rect.x += this._animatedContentOffset.x;
      layoutInfo.rect.y += this._animatedContentOffset.y;
    }

    view.layoutInfo = layoutInfo;

    this._renderView(view);

    return view;
  }

  _renderView(reusableView) {
    let {
      type: type,
      key: key
    } = reusableView.layoutInfo;
    reusableView.content = this.getItem(key);
    reusableView.rendered = this._renderContent(type, reusableView.content);
  }

  _renderContent(type, content) {
    let cached = this._renderedContent.get(content);

    if (cached != null) return cached;
    let rendered = this.delegate.renderView(type, content);
    if (content) this._renderedContent.set(content, rendered);
    return rendered;
  }
  /**
  * Returns an array of all currently visible views, including both
  * item views and supplementary views.
  */


  get visibleViews() {
    return Array.from(this._visibleViews.values());
  }
  /**
  * Gets the visible view for the given type and key. Returns null if
  * the view is not currently visible.
  *
  * @param key The key of the view to retrieve.
  */


  getView(key) {
    return this._visibleViews.get(key) || null;
  }
  /**
  * Returns an array of visible views matching the given type.
  * @param type The view type to find.
  */


  getViewsOfType(type) {
    return this.visibleViews.filter(v => v.layoutInfo && v.layoutInfo.type === type);
  }
  /**
  * Returns the key for the given view. Returns null
  * if the view is not currently visible.
  */


  keyForView(view) {
    if (view && view.layoutInfo) return view.layoutInfo.key;
    return null;
  }
  /**
  * Returns the key for the item view currently at the given point.
  */


  keyAtPoint(point) {
    let rect = new $60423f92c7f9ad87$export$c79fc6492f3af13d(point.x, point.y, 1, 1);
    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);
    let layoutInfo = layoutInfos[0];
    if (!layoutInfo) return null;
    return layoutInfo.key;
  }
  /**
  * Cleanup for when the Virtualizer will be unmounted.
  */


  willUnmount() {
    cancelAnimationFrame(this._relayoutRaf);
  }
  /**
  * Triggers a layout invalidation, and updates the visible subviews.
  */


  relayout(context = {}) {
    // Ignore relayouts while animating the scroll position
    if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') return; // If we already scheduled a relayout, extend the invalidation
    // context so we coalesce multiple relayouts in the same frame.

    if (this._invalidationContext) {
      Object.assign(this._invalidationContext, context);
      return;
    }

    this._invalidationContext = context;
    this._relayoutRaf = requestAnimationFrame(() => {
      this._relayoutRaf = null;
      this.relayoutNow();
    });
  }
  /**
  * Performs a relayout immediately. Prefer {@link relayout} over this method
  * where possible, since it coalesces multiple layout passes in the same tick.
  */


  relayoutNow(context = this._invalidationContext || {}) {
    // Cancel the scheduled relayout, since we're doing it now.
    if (this._relayoutRaf) {
      cancelAnimationFrame(this._relayoutRaf);
      this._relayoutRaf = null; // Update the provided context with the current invalidationContext since we are cancelling
      // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)

      context = { ...this._invalidationContext,
        ...context
      };
    } // Reset the invalidation context


    this._invalidationContext = null; // Do nothing if we don't have a layout or content, or we are
    // in the middle of an animated scroll transition.

    if (!this.layout || !this._collection || this._scrollAnimation) return;

    let scrollAnchor = this._getScrollAnchor(); // Trigger the beforeLayout hook, if provided


    if (typeof context.beforeLayout === 'function') context.beforeLayout(); // Validate the layout

    this.layout.validate(context);

    this._setContentSize(this.layout.getContentSize()); // Trigger the afterLayout hook, if provided


    if (typeof context.afterLayout === 'function') context.afterLayout(); // Adjust scroll position based on scroll anchor, and constrain.
    // If the content changed, scroll to the top.

    let visibleRect = this.getVisibleRect();

    let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);

    let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;
    let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;
    contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));
    contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));
    let hasLayoutUpdates = false;

    if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {
      // If this is an animated relayout, we do not immediately scroll because it would be jittery.
      // Save the difference between the current and new content offsets, and apply it to the
      // individual content items instead. At the end of the animation, we'll reset and set the
      // scroll offset for real. This ensures jitter-free animation since we don't need to sync
      // the scroll animation and the content animation.
      if (context.animated || !this._animatedContentOffset.isOrigin()) {
        this._animatedContentOffset.x += visibleRect.x - contentOffsetX;
        this._animatedContentOffset.y += visibleRect.y - contentOffsetY;
        hasLayoutUpdates = this.updateSubviews(context.contentChanged);
      } else this._setContentOffset(new $3041db3296945e6e$export$baf26146a414f24a(contentOffsetX, contentOffsetY));
    } else hasLayoutUpdates = this.updateSubviews(context.contentChanged); // Apply layout infos, unless this is coming from an animated transaction


    if (!(context.transaction && context.animated)) this._applyLayoutInfos(); // Wait for animations, and apply the afterAnimation hook, if provided

    if (context.animated && hasLayoutUpdates) {
      this._enableTransitions();

      let done = () => {
        this._disableTransitions(); // Reset scroll position after animations (see above comment).


        if (!this._animatedContentOffset.isOrigin()) {
          // Get the content offset to scroll to, taking _animatedContentOffset into account.
          let {
            x: x,
            y: y
          } = this.getVisibleRect();

          this._resetAnimatedContentOffset();

          this._setContentOffset(new $3041db3296945e6e$export$baf26146a414f24a(x, y));
        }

        if (typeof context.afterAnimation === 'function') context.afterAnimation();
      }; // Sometimes the animation takes slightly longer than expected.


      setTimeout(done, this.transitionDuration + 100);
      return;
    } else if (typeof context.afterAnimation === 'function') context.afterAnimation();
  }
  /**
  * Corrects DOM order of visible views to match item order of collection.
  */


  _correctItemOrder() {
    // Defer until after scrolling and animated transactions are complete
    if (this._isScrolling || this._transaction) return;

    for (let key of this._visibleLayoutInfos.keys()) {
      let view = this._visibleViews.get(key);

      this._children.delete(view);

      this._children.add(view);
    }
  }

  _enableTransitions() {
    this.delegate.beginAnimations();
  }

  _disableTransitions() {
    this.delegate.endAnimations();
  }

  _getScrollAnchor() {
    if (!this.anchorScrollPosition) return null;
    let visibleRect = this.getVisibleRect(); // Ask the delegate to provide a scroll anchor, if possible

    if (this.delegate.getScrollAnchor) {
      let key = this.delegate.getScrollAnchor(visibleRect);

      if (key != null) {
        let layoutInfo = this.layout.getLayoutInfo(key);
        let corner = layoutInfo.rect.getCornerInRect(visibleRect);

        if (corner) {
          let key = layoutInfo.key;
          let offset = layoutInfo.rect[corner].y - visibleRect.y;
          return {
            key: key,
            layoutInfo: layoutInfo,
            corner: corner,
            offset: offset
          };
        }
      }
    } // No need to anchor the scroll position if it is at the top


    if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) return null; // Find a view with a visible corner that has the smallest distance to the top of the collection view

    let cornerAnchor = null;

    for (let [key, view] of this._visibleViews) {
      let layoutInfo = view.layoutInfo;

      if (layoutInfo && layoutInfo.rect.area > 0) {
        let corner = layoutInfo.rect.getCornerInRect(visibleRect);

        if (corner) {
          let offset = layoutInfo.rect[corner].y - visibleRect.y;
          if (!cornerAnchor || offset < cornerAnchor.offset) cornerAnchor = {
            key: key,
            layoutInfo: layoutInfo,
            corner: corner,
            offset: offset
          };
        }
      }
    }

    return cornerAnchor;
  }

  _restoreScrollAnchor(scrollAnchor, context) {
    let contentOffset = this.getVisibleRect();

    if (scrollAnchor) {
      var ref;
      let finalAnchor = ((ref = context.transaction) === null || ref === void 0 ? void 0 : ref.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);

      if (finalAnchor) {
        let adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;
        contentOffset.y += adjustment;
      }
    }

    return contentOffset;
  }

  getVisibleRect() {
    let v = this.visibleRect;
    let x = v.x - this._animatedContentOffset.x;
    let y = v.y - this._animatedContentOffset.y;
    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(x, y, v.width, v.height);
  }

  getVisibleLayoutInfos() {
    let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();
    this._visibleLayoutInfos = this._getLayoutInfoMap(rect);
    return this._visibleLayoutInfos;
  }

  _getLayoutInfoMap(rect, copy = false) {
    let layoutInfos = this.layout.getVisibleLayoutInfos(rect);
    let map = new Map();

    for (let layoutInfo of layoutInfos) {
      if (copy) layoutInfo = layoutInfo.copy();
      map.set(layoutInfo.key, layoutInfo);
    }

    return map;
  }

  updateSubviews(forceUpdate = false) {
    if (!this._collection) return;
    let visibleLayoutInfos = this.getVisibleLayoutInfos();
    let currentlyVisible = this._visibleViews;
    let toAdd, toRemove, toUpdate; // If this is a force update, remove and re-add all views.
    // Otherwise, find and update the diff.

    if (forceUpdate) {
      toAdd = visibleLayoutInfos;
      toRemove = currentlyVisible;
      toUpdate = new Set();
    } else {
      ({
        toAdd: toAdd,
        toRemove: toRemove,
        toUpdate: toUpdate
      } = $fc36f9a046a9ce79$export$acaf96a27438246b(currentlyVisible, visibleLayoutInfos));

      for (let key of toUpdate) {
        let view = currentlyVisible.get(key);
        if (!view || !view.layoutInfo) continue;
        let item = this.getItem(visibleLayoutInfos.get(key).key);
        if (view.content === item) toUpdate.delete(key);else {
          // If the view type changes, delete and recreate the view instead of updating
          let {
            reuseType: reuseType
          } = this._getReuseType(view.layoutInfo, item);

          if (view.viewType !== reuseType) {
            toUpdate.delete(key);
            toAdd.add(key);
            toRemove.add(key);
          }
        }
      } // We are done if the sets are equal


      if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {
        if (this._transaction) this._applyLayoutInfos();
        return;
      }
    } // Track views that should be removed. They are not removed from
    // the DOM immediately, since we may reuse and need to re-insert
    // them back into the DOM anyway.


    let removed = new Set();

    for (let key of toRemove.keys()) {
      let view = this._visibleViews.get(key);

      if (view) {
        removed.add(view);

        this._visibleViews.delete(key); // If we are in the middle of a transaction, wait until the end
        // of the animations to remove the views from the DOM. Also means
        // we can't reuse those views immediately.


        if (this._transaction) this._transaction.toRemove.set(key, view);else this.reuseView(view);
      }
    }

    for (let key1 of toAdd.keys()) {
      let layoutInfo = visibleLayoutInfos.get(key1);
      let view; // If we're in a transaction, and a layout change happens
      // during the animations such that a view that was going
      // to be removed is now not, we don't create a new view
      // since the old one is still in the DOM, marked as toRemove.

      if (this._transaction) {
        // if transaction, get initial layout attributes for the animation
        if (this._transaction.initialLayoutInfo.has(key1)) layoutInfo = this._transaction.initialLayoutInfo.get(key1);
        view = this._transaction.toRemove.get(key1);

        if (view) {
          this._transaction.toRemove.delete(key1);

          this._applyLayoutInfo(view, layoutInfo);
        }
      }

      if (!view) {
        // Create or reuse a view for this row
        view = this.getReusableView(layoutInfo); // Add the view to the DOM if needed

        if (!removed.has(view)) this._children.add(view);
      }

      this._visibleViews.set(key1, view);

      removed.delete(view);
    }

    for (let key2 of toUpdate) {
      let view = currentlyVisible.get(key2);

      this._renderedContent.delete(key2);

      this._renderView(view);
    } // Remove the remaining rows to delete from the DOM


    if (!this._transaction) this.removeViews(removed);

    this._correctItemOrder();

    this._flushVisibleViews();

    let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());

    if (hasLayoutUpdates) requestAnimationFrame(() => {
      // If we're in a transaction, apply animations to visible views
      // and "to be removed" views, which animate off screen.
      if (this._transaction) requestAnimationFrame(() => this._applyLayoutInfos());
    });
    return hasLayoutUpdates;
  }

  afterRender() {
    if (this.shouldOverscan) this._overscanManager.collectMetrics();
  }

  _flushVisibleViews() {
    // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy
    // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy
    // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper
    // method to build the final tree.
    let viewsByParentKey = new Map([[null, []]]);

    for (let view1 of this._children) {
      if (!viewsByParentKey.has(view1.layoutInfo.parentKey)) viewsByParentKey.set(view1.layoutInfo.parentKey, []);
      viewsByParentKey.get(view1.layoutInfo.parentKey).push(view1);
      if (!viewsByParentKey.has(view1.layoutInfo.key)) viewsByParentKey.set(view1.layoutInfo.key, []);
    }

    let buildTree = (parent, views) => views.map(view => {
      let children = viewsByParentKey.get(view.layoutInfo.key);
      return this.delegate.renderWrapper(parent, view, children, childViews => buildTree(view, childViews));
    });

    let children1 = buildTree(null, viewsByParentKey.get(null));
    this.delegate.setVisibleViews(children1);
  }

  _applyLayoutInfo(view, layoutInfo) {
    if (view.layoutInfo === layoutInfo) return false;
    view.layoutInfo = layoutInfo;
    return true;
  }

  _applyLayoutInfos() {
    let updated = false; // Apply layout infos to visible views

    for (let view of this._visibleViews.values()) {
      let cur = view.layoutInfo;

      if (cur) {
        let layoutInfo = this.layout.getLayoutInfo(cur.key);
        if (this._applyLayoutInfo(view, layoutInfo)) updated = true;
      }
    } // Apply final layout infos for views that will be removed


    if (this._transaction) {
      for (let view of this._transaction.toRemove.values()) {
        let cur = view.layoutInfo;
        let layoutInfo = this.layout.getLayoutInfo(cur.key);
        if (this._applyLayoutInfo(view, layoutInfo)) updated = true;
      }

      for (let view2 of this._transaction.removed.values()) {
        let cur = view2.layoutInfo;
        let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;
        layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());
        if (this._applyLayoutInfo(view2, layoutInfo)) updated = true;
      }
    }

    if (updated) this._flushVisibleViews();
  }

  _hasLayoutUpdates() {
    if (!this._transaction) return false;

    for (let view of this._visibleViews.values()) {
      let cur = view.layoutInfo;
      if (!cur) return true;
      let layoutInfo = this.layout.getLayoutInfo(cur.key);
      if ( // Uses equals rather than pointEquals so that width/height changes are taken into account
      !cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform) return true;
    }

    return false;
  }

  reuseView(view) {
    view.prepareForReuse();

    this._reusableViews[view.viewType].push(view);
  }

  removeViews(toRemove) {
    for (let view of toRemove) this._children.delete(view);
  }

  updateItemSize(key, size) {
    // TODO: we should be able to invalidate a single index path
    // @ts-ignore
    if (!this.layout.updateItemSize) return; // If the scroll position is currently animating, add the update
    // to a queue to be processed after the animation is complete.

    if (this._scrollAnimation) {
      this._sizeUpdateQueue.set(key, size);

      return;
    } // @ts-ignore


    let changed = this.layout.updateItemSize(key, size);
    if (changed) this.relayout();
  }

  startScrolling() {
    this._isScrolling = true;
  }

  endScrolling() {
    this._isScrolling = false;

    this._correctItemOrder();

    this._flushVisibleViews();
  }

  _resetAnimatedContentOffset() {
    // Reset the animated content offset of subviews. See comment in relayoutNow for details.
    if (!this._animatedContentOffset.isOrigin()) {
      this._animatedContentOffset = new $3041db3296945e6e$export$baf26146a414f24a(0, 0);

      this._applyLayoutInfos();
    }
  }
  /**
  * Scrolls the item with the given key into view, optionally with an animation.
  * @param key The key of the item to scroll into view.
  * @param duration The duration of the scroll animation.
  */


  scrollToItem(key, options) {
    // key can be 0, so check if null or undefined
    if (key == null) return;
    let layoutInfo = this.layout.getLayoutInfo(key);
    if (!layoutInfo) return;
    let {
      duration = 300,
      shouldScrollX = true,
      shouldScrollY = true,
      offsetX = 0,
      offsetY = 0
    } = options;
    let x = this.visibleRect.x;
    let y = this.visibleRect.y;
    let minX = layoutInfo.rect.x - offsetX;
    let minY = layoutInfo.rect.y - offsetY;
    let maxX = x + this.visibleRect.width;
    let maxY = y + this.visibleRect.height;

    if (shouldScrollX) {
      if (minX <= x || maxX === 0) x = minX;else if (layoutInfo.rect.maxX > maxX) x += layoutInfo.rect.maxX - maxX;
    }

    if (shouldScrollY) {
      if (minY <= y || maxY === 0) y = minY;else if (layoutInfo.rect.maxY > maxY) y += layoutInfo.rect.maxY - maxY;
    }

    return this.scrollTo(new $3041db3296945e6e$export$baf26146a414f24a(x, y), duration);
  }
  /**
  * Performs an animated scroll to the given offset.
  * @param offset - The offset to scroll to.
  * @param duration The duration of the animation.
  * @returns A promise that resolves when the animation is complete.
  */


  scrollTo(offset1, duration = 300) {
    // Cancel the current scroll animation
    if (this._scrollAnimation) {
      this._scrollAnimation.cancel();

      this._scrollAnimation = null;
    } // Set the content offset synchronously if the duration is zero


    if (duration <= 0 || this.visibleRect.pointEquals(offset1)) {
      this._setContentOffset(offset1);

      return Promise.resolve();
    }

    this.startScrolling();
    this._scrollAnimation = $3eb131dcf37ad5f8$export$dc0b63720788090c(this.visibleRect, offset1, duration, $3eb131dcf37ad5f8$export$57636bb43b1ccbb0, offset => {
      this._setContentOffset(offset);
    });

    this._scrollAnimation.then(() => {
      this._scrollAnimation = null; // Process view size updates that occurred during the animation.
      // Only views that are still visible will be actually updated.

      for (let [key, size] of this._sizeUpdateQueue) this.updateItemSize(key, size);

      this._sizeUpdateQueue.clear();

      this.relayout();

      this._processTransactionQueue();

      this.endScrolling();
    });

    return this._scrollAnimation;
  }

  _runTransaction(action, animated) {
    this._startTransaction();

    if (this._nextTransaction) this._nextTransaction.actions.push(action);

    this._endTransaction(animated);
  }

  _startTransaction() {
    if (!this._nextTransaction) this._nextTransaction = new $8e135e531d8dcb66$export$febc5573c75cefb0();
    this._nextTransaction.level++;
  }

  _endTransaction(animated) {
    if (!this._nextTransaction) return false; // Save whether the transaction should be animated.

    if (animated != null) this._nextTransaction.animated = animated; // If we haven't reached level 0, we are still in a
    // nested transaction. Wait for the parent to end.

    if (--this._nextTransaction.level > 0) return false; // Do nothing for empty transactions

    if (this._nextTransaction.actions.length === 0) {
      this._nextTransaction = null;
      return false;
    } // Default animations to true


    if (this._nextTransaction.animated == null) this._nextTransaction.animated = true; // Enqueue the transaction

    this._transactionQueue.push(this._nextTransaction);

    this._nextTransaction = null;

    this._processTransactionQueue();

    return true;
  }

  _processTransactionQueue() {
    // If the current transaction is animating, wait until the end
    // to process the next transaction.
    if (this._transaction || this._scrollAnimation) return;

    let next = this._transactionQueue.shift();

    if (next) this._performTransaction(next);
  }

  _getContentRect() {
    return new $60423f92c7f9ad87$export$c79fc6492f3af13d(0, 0, this.contentSize.width, this.contentSize.height);
  }

  _performTransaction(transaction) {
    this._transaction = transaction;
    this.relayoutNow({
      transaction: transaction,
      animated: transaction.animated,
      beforeLayout: () => {
        // Get the initial layout infos for all views before the updates
        // so we can figure out which views to add and remove.
        if (transaction.animated) transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true); // Apply the actions that occurred during this transaction

        for (let action of transaction.actions) action();
      },
      afterLayout: () => {
        // Get the final layout infos after the updates
        if (transaction.animated) {
          transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());

          this._setupTransactionAnimations(transaction);
        } else this._transaction = null;
      },
      afterAnimation: () => {
        // Remove and reuse views when animations are done
        if (transaction.toRemove.size > 0 || transaction.removed.size > 0) for (let view of $fc36f9a046a9ce79$export$cfc14088dfefce5f(transaction.toRemove.values(), transaction.removed.values())) {
          this._children.delete(view);

          this.reuseView(view);
        }
        this._transaction = null; // Ensure DOM order is correct for accessibility after animations are complete

        this._correctItemOrder();

        this._flushVisibleViews();

        this._processTransactionQueue();
      }
    });
  }

  _setupTransactionAnimations(transaction) {
    let {
      initialMap: initialMap,
      finalMap: finalMap
    } = transaction; // Store initial and final layout infos for animations

    for (let [key, layoutInfo] of initialMap) if (finalMap.has(key)) // Store the initial layout info for use during animations.
      transaction.initialLayoutInfo.set(key, layoutInfo);else // This view was removed. Store the layout info for use
      // in Layout#getFinalLayoutInfo during animations.
      transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo); // Get initial layout infos for views that were added


    for (let [key3, layoutInfo1] of finalMap) if (!initialMap.has(key3)) {
      let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo1.copy());
      transaction.initialLayoutInfo.set(key3, initialLayoutInfo);
    } // Figure out which views were removed.


    for (let [key4, view] of this._visibleViews) if (!finalMap.has(key4)) {
      transaction.removed.set(key4, view);

      this._visibleViews.delete(key4); // In case something weird happened, where we have a view but no
      // initial layout info, use the one attached to the view.


      if (view.layoutInfo) {
        if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);
      }
    }
  }

  constructor(options = {}) {
    this._contentSize = new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec();
    this._visibleRect = new $60423f92c7f9ad87$export$c79fc6492f3af13d();
    this._reusableViews = {};
    this._visibleLayoutInfos = new Map();
    this._visibleViews = new Map();
    this._renderedContent = new WeakMap();
    this._children = new Set();
    this._invalidationContext = null;
    this._overscanManager = new $364191b3decf3697$export$4455ee6afb38dcbb();
    this._scrollAnimation = null;
    this._isScrolling = false;
    this._sizeUpdateQueue = new Map();
    this._animatedContentOffset = new $3041db3296945e6e$export$baf26146a414f24a(0, 0);
    this._transaction = null;
    this._nextTransaction = null;
    this._transactionQueue = [];

    var _transitionDuration; // Set options from passed object if given


    this.transitionDuration = (_transitionDuration = options.transitionDuration) !== null && _transitionDuration !== void 0 ? _transitionDuration : 500;
    this.anchorScrollPosition = options.anchorScrollPosition || false;
    this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;
    this.shouldOverscan = options.shouldOverscan !== false;

    for (let key of ['delegate', 'size', 'layout', 'collection']) if (options[key]) this[key] = options[key];
  }

}

function $fc0b13b484ac1194$export$1505db82fe357e65(opts) {
  let [visibleViews, setVisibleViews] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)([]);
  let [contentSize, setContentSize] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(new $ee1bfa90a957fb8a$export$cb6da89c6af1a8ec());
  let [isAnimating, setAnimating] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let [isScrolling, setScrolling] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let virtualizer = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new $38b9490c1cca8fc4$export$89be5a243e59c4b2(), []);
  virtualizer.delegate = {
    setVisibleViews: setVisibleViews,

    setVisibleRect(rect) {
      virtualizer.visibleRect = rect;
      opts.onVisibleRectChange(rect);
    },

    setContentSize: setContentSize,
    renderView: opts.renderView,
    renderWrapper: opts.renderWrapper,
    beginAnimations: () => setAnimating(true),
    endAnimations: () => setAnimating(false),
    getScrollAnchor: opts.getScrollAnchor
  };
  virtualizer.layout = opts.layout;
  virtualizer.collection = opts.collection;
  virtualizer.transitionDuration = opts.transitionDuration;
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    virtualizer.afterRender();
  }); // eslint-disable-next-line arrow-body-style

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return () => virtualizer.willUnmount();
  }, []);
  return {
    virtualizer: virtualizer,
    visibleViews: visibleViews,
    setVisibleRect: (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(rect => {
      virtualizer.visibleRect = rect;
    }, [virtualizer]),
    contentSize: contentSize,
    isAnimating: isAnimating,
    isScrolling: isScrolling,
    startScrolling: (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
      virtualizer.startScrolling();
      setScrolling(true);
    }, [virtualizer]),
    endScrolling: (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(() => {
      virtualizer.endScrolling();
      setScrolling(false);
    }, [virtualizer])
  };
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/interactions/dist/module.js



function _react_aria_interactions_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var module_$3b117e43dc0ca95d$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$3b117e43dc0ca95d$exports, "Pressable", () => module_$3b117e43dc0ca95d$export$27c701ed9e449e99);
var module_$f6c31cce2adf654f$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$f6c31cce2adf654f$exports, "usePress", () => module_$f6c31cce2adf654f$export$45712eceda6fad21); // Note that state only matters here for iOS. Non-iOS gets user-select: none applied to the target element
// rather than at the document level so we just need to apply/remove user-select: none for each pressed element individually

let module_$14c0b72509d70225$var$state = 'default';
let module_$14c0b72509d70225$var$savedUserSelect = '';
let module_$14c0b72509d70225$var$modifiedElementMap = new WeakMap();

function module_$14c0b72509d70225$export$16a4697467175487(target) {
  if (module_$c87311424ea30a05$export$fedb369cb70207f1()) {
    if (module_$14c0b72509d70225$var$state === 'default') {
      module_$14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
      document.documentElement.style.webkitUserSelect = 'none';
    }

    module_$14c0b72509d70225$var$state = 'disabled';
  } else if (target) {
    // If not iOS, store the target's original user-select and change to user-select: none
    // Ignore state since it doesn't apply for non iOS
    module_$14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
    target.style.userSelect = 'none';
  }
}

function module_$14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if (module_$c87311424ea30a05$export$fedb369cb70207f1()) {
    // If the state is already default, there's nothing to do.
    // If it is restoring, then there's no need to queue a second restore.
    if (module_$14c0b72509d70225$var$state !== 'disabled') return;
    module_$14c0b72509d70225$var$state = 'restoring'; // There appears to be a delay on iOS where selection still might occur
    // after pointer up, so wait a bit before removing user-select.

    setTimeout(() => {
      // Wait for any CSS transitions to complete so we don't recompute style
      // for the whole page in the middle of the animation and cause jank.
      module_$bbed8b41f857bcc0$export$24490316f764c430(() => {
        // Avoid race conditions
        if (module_$14c0b72509d70225$var$state === 'restoring') {
          if (document.documentElement.style.webkitUserSelect === 'none') document.documentElement.style.webkitUserSelect = module_$14c0b72509d70225$var$savedUserSelect || '';
          module_$14c0b72509d70225$var$savedUserSelect = '';
          module_$14c0b72509d70225$var$state = 'default';
        }
      });
    }, 300);
  } else // If not iOS, restore the target's original user-select if any
    // Ignore state since it doesn't apply for non iOS
    if (target && module_$14c0b72509d70225$var$modifiedElementMap.has(target)) {
      let targetOldUserSelect = module_$14c0b72509d70225$var$modifiedElementMap.get(target);
      if (target.style.userSelect === 'none') target.style.userSelect = targetOldUserSelect;
      if (target.getAttribute('style') === '') target.removeAttribute('style');
      module_$14c0b72509d70225$var$modifiedElementMap.delete(target);
    }
}

function module_$8a9cb279dc87e130$export$60278871457622de(event) {
  // JAWS/NVDA with Firefox.
  if (event.mozInputSource === 0 && event.isTrusted) return true;
  return event.detail === 0 && !event.pointerType;
}

class module_$8a9cb279dc87e130$export$905e7fc544a71f36 {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }

  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }

  stopPropagation() {
    this.nativeEvent.stopPropagation();

    this.isPropagationStopped = () => true;
  }

  isPropagationStopped() {
    return false;
  }

  persist() {}

  constructor(type, nativeEvent) {
    this.nativeEvent = nativeEvent;
    this.target = nativeEvent.target;
    this.currentTarget = nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }

}

function module_$8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocused: false,
    onBlur: onBlur,
    observer: null
  });
  let state1 = stateRef.current;
  state1.onBlur = onBlur; // Clean up MutationObserver on unmount. See below.
  // eslint-disable-next-line arrow-body-style

  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    return () => {
      if (state1.observer) {
        state1.observer.disconnect();
        state1.observer = null;
      }
    };
  }, [state1]); // This function is called during a React onFocus event.

  return e1 => {
    // React does not fire onBlur when an element is disabled. https://github.com/facebook/react/issues/9142
    // Most browsers fire a native focusout event in this case, except for Firefox. In that case, we use a
    // MutationObserver to watch for the disabled attribute, and dispatch these events ourselves.
    // For browsers that do, focusout fires before the MutationObserver, so onBlur should not fire twice.
    if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {
      state1.isFocused = true;
      let target = e1.target;

      let onBlurHandler = e => {
        var // For backward compatibility, dispatch a (fake) React synthetic event.
        ref;
        let state = stateRef.current;
        state.isFocused = false;
        if (target.disabled) (ref = state.onBlur) === null || ref === void 0 ? void 0 : ref.call(state, new module_$8a9cb279dc87e130$export$905e7fc544a71f36('blur', e)); // We no longer need the MutationObserver once the target is blurred.

        if (state.observer) {
          state.observer.disconnect();
          state.observer = null;
        }
      };

      target.addEventListener('focusout', onBlurHandler, {
        once: true
      });
      state1.observer = new MutationObserver(() => {
        if (state1.isFocused && target.disabled) {
          state1.observer.disconnect();
          target.dispatchEvent(new FocusEvent('blur'));
          target.dispatchEvent(new FocusEvent('focusout', {
            bubbles: true
          }));
        }
      });
      state1.observer.observe(target, {
        attributes: true,
        attributeFilter: ['disabled']
      });
    }
  };
}

const module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5 = external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);
module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = 'PressResponderContext';

function module_$f6c31cce2adf654f$var$usePressResponderContext(props) {
  // Consume context from <PressResponder> and merge with props.
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5);

  if (context) {
    let {
      register: register,
      ...contextProps
    } = context;
    props = module_$3ef42575df84b30b$export$9d1611c77c2fe928(contextProps, props);
    register();
  }

  module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, props.ref);
  return props;
}

function module_$f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let {
    onPress: onPress1,
    onPressChange: onPressChange1,
    onPressStart: onPressStart1,
    onPressEnd: onPressEnd1,
    onPressUp: onPressUp1,
    isDisabled: isDisabled1,
    isPressed: isPressedProp,
    preventFocusOnPress: preventFocusOnPress,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit,
    allowTextSelectionOnPress: allowTextSelectionOnPress,
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    ref: _,
    ...domProps
  } = module_$f6c31cce2adf654f$var$usePressResponderContext(props);
  let propsRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  propsRef.current = {
    onPress: onPress1,
    onPressChange: onPressChange1,
    onPressStart: onPressStart1,
    onPressEnd: onPressEnd1,
    onPressUp: onPressUp1,
    isDisabled: isDisabled1,
    shouldCancelOnPointerExit: shouldCancelOnPointerExit
  };
  let [isPressed, setPressed] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    ignoreClickAfterPress: false,
    didFirePressStart: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeAllGlobalListeners: removeAllGlobalListeners
  } = module_$03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let pressProps1 = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let state = ref.current;

    let triggerPressStart = (originalEvent, pointerType) => {
      let {
        onPressStart: onPressStart,
        onPressChange: onPressChange,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled || state.didFirePressStart) return;
      if (onPressStart) onPressStart({
        type: 'pressstart',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(true);
      state.didFirePressStart = true;
      setPressed(true);
    };

    let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {
      let {
        onPressEnd: onPressEnd,
        onPressChange: onPressChange,
        onPress: onPress,
        isDisabled: isDisabled
      } = propsRef.current;
      if (!state.didFirePressStart) return;
      state.ignoreClickAfterPress = true;
      state.didFirePressStart = false;
      if (onPressEnd) onPressEnd({
        type: 'pressend',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
      if (onPressChange) onPressChange(false);
      setPressed(false);
      if (onPress && wasPressed && !isDisabled) onPress({
        type: 'press',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };

    let triggerPressUp = (originalEvent, pointerType) => {
      let {
        onPressUp: onPressUp,
        isDisabled: isDisabled
      } = propsRef.current;
      if (isDisabled) return;
      if (onPressUp) onPressUp({
        type: 'pressup',
        pointerType: pointerType,
        target: originalEvent.currentTarget,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };

    let cancel = e => {
      if (state.isPressed) {
        if (state.isOverTarget) triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isPressed = false;
        state.isOverTarget = false;
        state.activePointerId = null;
        state.pointerType = null;
        removeAllGlobalListeners();
        if (!allowTextSelectionOnPress) module_$14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
      }
    };

    let pressProps = {
      onKeyDown(e) {
        if (module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && e.currentTarget.contains(e.target)) {
          if (module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();
          e.stopPropagation(); // If the event is repeating, it may have started on a different element
          // after which focus moved to the current element. Ignore these events and
          // only handle the first key down event.

          if (!state.isPressed && !e.repeat) {
            state.target = e.currentTarget;
            state.isPressed = true;
            triggerPressStart(e, 'keyboard'); // Focus may move before the key up event, so register the event on the document
            // instead of the same element where the key down event occurred.

            addGlobalListener(document, 'keyup', onKeyUp, false);
          }
        }
      },

      onKeyUp(e) {
        if (module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e.nativeEvent) && !e.repeat && e.currentTarget.contains(e.target)) triggerPressUp(module_$f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard');
      },

      onClick(e) {
        if (e && !e.currentTarget.contains(e.target)) return;

        if (e && e.button === 0) {
          e.stopPropagation();
          if (isDisabled1) e.preventDefault(); // If triggered from a screen reader or by using element.click(),
          // trigger as if it were a keyboard click.

          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === 'virtual' || module_$8a9cb279dc87e130$export$60278871457622de(e.nativeEvent))) {
            // Ensure the element receives focus (VoiceOver on iOS does not do this)
            if (!isDisabled1 && !preventFocusOnPress) module_$7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
            triggerPressStart(e, 'virtual');
            triggerPressUp(e, 'virtual');
            triggerPressEnd(e, 'virtual');
          }

          state.ignoreEmulatedMouseEvents = false;
          state.ignoreClickAfterPress = false;
        }
      }

    };

    let onKeyUp = e => {
      if (state.isPressed && module_$f6c31cce2adf654f$var$isValidKeyboardEvent(e)) {
        if (module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e.target)) e.preventDefault();
        e.stopPropagation();
        state.isPressed = false;
        let target = e.target;
        triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), 'keyboard', state.target.contains(target));
        removeAllGlobalListeners(); // If the target is a link, trigger the click method to open the URL,
        // but defer triggering pressEnd until onClick event handler.

        if (state.target.contains(target) && module_$f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute('role') === 'link') state.target.click();
      }
    };

    if (typeof PointerEvent !== 'undefined') {
      pressProps.onPointerDown = e => {
        // Only handle left clicks, and ignore events that bubbled through portals.
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // iOS safari fires pointer events from VoiceOver with incorrect coordinates/target.
        // Ignore and let the onClick handler take care of it instead.
        // https://bugs.webkit.org/show_bug.cgi?id=222627
        // https://bugs.webkit.org/show_bug.cgi?id=223202

        if (module_$f6c31cce2adf654f$var$isVirtualPointerEvent(e.nativeEvent)) {
          state.pointerType = 'virtual';
          return;
        } // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on pointer down and handle focusing the pressable element ourselves.


        if (module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        state.pointerType = e.pointerType;
        e.stopPropagation();

        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e.pointerId;
          state.target = e.currentTarget;
          if (!isDisabled1 && !preventFocusOnPress) module_$7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
          if (!allowTextSelectionOnPress) module_$14c0b72509d70225$export$16a4697467175487(state.target);
          triggerPressStart(e, state.pointerType);
          addGlobalListener(document, 'pointermove', onPointerMove, false);
          addGlobalListener(document, 'pointerup', onPointerUp, false);
          addGlobalListener(document, 'pointercancel', onPointerCancel, false);
        }
      };

      pressProps.onMouseDown = e => {
        if (!e.currentTarget.contains(e.target)) return;

        if (e.button === 0) {
          // Chrome and Firefox on touch Windows devices require mouse down events
          // to be canceled in addition to pointer events, or an extra asynchronous
          // focus event will be fired.
          if (module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
          e.stopPropagation();
        }
      };

      pressProps.onPointerUp = e => {
        // iOS fires pointerup with zero width and height, so check the pointerType recorded during pointerdown.
        if (!e.currentTarget.contains(e.target) || state.pointerType === 'virtual') return; // Only handle left clicks
        // Safari on iOS sometimes fires pointerup events, even
        // when the touch isn't over the target, so double check.

        if (e.button === 0 && module_$f6c31cce2adf654f$var$isOverTarget(e, e.currentTarget)) triggerPressUp(e, state.pointerType || e.pointerType);
      }; // Safari on iOS < 13.2 does not implement pointerenter/pointerleave events correctly.
      // Use pointer move events instead to implement our own hit testing.
      // See https://bugs.webkit.org/show_bug.cgi?id=199803


      let onPointerMove = e => {
        if (e.pointerId !== state.activePointerId) return;

        if (module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };

      let onPointerUp = e => {
        if (e.pointerId === state.activePointerId && state.isPressed && e.button === 0) {
          if (module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
          state.isPressed = false;
          state.isOverTarget = false;
          state.activePointerId = null;
          state.pointerType = null;
          removeAllGlobalListeners();
          if (!allowTextSelectionOnPress) module_$14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
        }
      };

      let onPointerCancel = e => {
        cancel(e);
      };

      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return; // Safari does not call onPointerCancel when a drag starts, whereas Chrome and Firefox do.

        cancel(e);
      };
    } else {
      pressProps.onMouseDown = e => {
        // Only handle left clicks
        if (e.button !== 0 || !e.currentTarget.contains(e.target)) return; // Due to browser inconsistencies, especially on mobile browsers, we prevent
        // default on mouse down and handle focusing the pressable element ourselves.

        if (module_$f6c31cce2adf654f$var$shouldPreventDefault(e.currentTarget)) e.preventDefault();
        e.stopPropagation();
        if (state.ignoreEmulatedMouseEvents) return;
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e.currentTarget;
        state.pointerType = module_$8a9cb279dc87e130$export$60278871457622de(e.nativeEvent) ? 'virtual' : 'mouse';
        if (!isDisabled1 && !preventFocusOnPress) module_$7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(document, 'mouseup', onMouseUp, false);
      };

      pressProps.onMouseEnter = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();

        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = true;
          triggerPressStart(e, state.pointerType);
        }
      };

      pressProps.onMouseLeave = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();

        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };

      pressProps.onMouseUp = e => {
        if (!e.currentTarget.contains(e.target)) return;
        if (!state.ignoreEmulatedMouseEvents && e.button === 0) triggerPressUp(e, state.pointerType);
      };

      let onMouseUp = e => {
        // Only handle left clicks
        if (e.button !== 0) return;
        state.isPressed = false;
        removeAllGlobalListeners();

        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }

        if (module_$f6c31cce2adf654f$var$isOverTarget(e, state.target)) triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType);else if (state.isOverTarget) triggerPressEnd(module_$f6c31cce2adf654f$var$createEvent(state.target, e), state.pointerType, false);
        state.isOverTarget = false;
      };

      pressProps.onTouchStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        let touch = module_$f6c31cce2adf654f$var$getTouchFromEvent(e.nativeEvent);
        if (!touch) return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e.currentTarget;
        state.pointerType = 'touch'; // Due to browser inconsistencies, especially on mobile browsers, we prevent default
        // on the emulated mouse event and handle focusing the pressable element ourselves.

        if (!isDisabled1 && !preventFocusOnPress) module_$7215afc6de606d6b$export$de79e2c695e052f3(e.currentTarget);
        if (!allowTextSelectionOnPress) module_$14c0b72509d70225$export$16a4697467175487(state.target);
        triggerPressStart(e, state.pointerType);
        addGlobalListener(window, 'scroll', onScroll, true);
      };

      pressProps.onTouchMove = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = module_$f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);

        if (touch && module_$f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(e, state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(e, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit) cancel(e);
        }
      };

      pressProps.onTouchEnd = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (!state.isPressed) return;
        let touch = module_$f6c31cce2adf654f$var$getTouchById(e.nativeEvent, state.activePointerId);

        if (touch && module_$f6c31cce2adf654f$var$isOverTarget(touch, e.currentTarget)) {
          triggerPressUp(e, state.pointerType);
          triggerPressEnd(e, state.pointerType);
        } else if (state.isOverTarget) triggerPressEnd(e, state.pointerType, false);

        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (!allowTextSelectionOnPress) module_$14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
        removeAllGlobalListeners();
      };

      pressProps.onTouchCancel = e => {
        if (!e.currentTarget.contains(e.target)) return;
        e.stopPropagation();
        if (state.isPressed) cancel(e);
      };

      let onScroll = e => {
        if (state.isPressed && e.target.contains(state.target)) cancel({
          currentTarget: state.target,
          shiftKey: false,
          ctrlKey: false,
          metaKey: false,
          altKey: false
        });
      };

      pressProps.onDragStart = e => {
        if (!e.currentTarget.contains(e.target)) return;
        cancel(e);
      };
    }

    return pressProps;
  }, [addGlobalListener, isDisabled1, preventFocusOnPress, removeAllGlobalListeners, allowTextSelectionOnPress]); // Remove user-select: none in case component unmounts immediately after pressStart
  // eslint-disable-next-line arrow-body-style

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return () => {
      if (!allowTextSelectionOnPress) module_$14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);
    };
  }, [allowTextSelectionOnPress]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: module_$3ef42575df84b30b$export$9d1611c77c2fe928(domProps, pressProps1)
  };
}

function module_$f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === 'A' && target.hasAttribute('href');
}

function module_$f6c31cce2adf654f$var$isValidKeyboardEvent(event) {
  const {
    key: key,
    code: code,
    target: target
  } = event;
  const element = target;
  const {
    tagName: tagName,
    isContentEditable: isContentEditable
  } = element;
  const role = element.getAttribute('role'); // Accessibility for keyboards. Space and Enter only.
  // "Spacebar" is for IE 11

  return (key === 'Enter' || key === ' ' || key === 'Spacebar' || code === 'Space') && tagName !== 'INPUT' && tagName !== 'TEXTAREA' && isContentEditable !== true && (!module_$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === 'button' && key !== 'Enter') && // An element with role='link' should only trigger with Enter key
  !(role === 'link' && key !== 'Enter');
}

function module_$f6c31cce2adf654f$var$getTouchFromEvent(event) {
  const {
    targetTouches: targetTouches
  } = event;
  if (targetTouches.length > 0) return targetTouches[0];
  return null;
}

function module_$f6c31cce2adf654f$var$getTouchById(event, pointerId) {
  const changedTouches = event.changedTouches;

  for (let i = 0; i < changedTouches.length; i++) {
    const touch = changedTouches[i];
    if (touch.identifier === pointerId) return touch;
  }

  return null;
}

function module_$f6c31cce2adf654f$var$createEvent(target, e) {
  return {
    currentTarget: target,
    shiftKey: e.shiftKey,
    ctrlKey: e.ctrlKey,
    metaKey: e.metaKey,
    altKey: e.altKey
  };
}

function module_$f6c31cce2adf654f$var$getPointClientRect(point) {
  let offsetX = point.width / 2 || point.radiusX || 0;
  let offsetY = point.height / 2 || point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}

function module_$f6c31cce2adf654f$var$areRectanglesOverlapping(a, b) {
  // check if they cannot overlap on x axis
  if (a.left > b.right || b.left > a.right) return false; // check if they cannot overlap on y axis

  if (a.top > b.bottom || b.top > a.bottom) return false;
  return true;
}

function module_$f6c31cce2adf654f$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect();
  let pointRect = module_$f6c31cce2adf654f$var$getPointClientRect(point);
  return module_$f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}

function module_$f6c31cce2adf654f$var$shouldPreventDefault(target) {
  // We cannot prevent default if the target is a draggable element.
  return !target.draggable;
}

function module_$f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target) {
  return !((target.tagName === 'INPUT' || target.tagName === 'BUTTON') && target.type === 'submit');
}

function module_$f6c31cce2adf654f$var$isVirtualPointerEvent(event) {
  // If the pointer size is zero, then we assume it's from a screen reader.
  // Android TalkBack double tap will sometimes return a event with width and height of 1
  // and pointerType === 'mouse' so we need to check for a specific combination of event attributes.
  // Cannot use "event.pressure === 0" as the sole check due to Safari pointer events always returning pressure === 0
  // instead of .5, see https://bugs.webkit.org/show_bug.cgi?id=206216
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0;
}

const module_$3b117e43dc0ca95d$export$27c701ed9e449e99 = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children: children,
  ...props
}, ref) => {
  let newRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  ref = ref !== null && ref !== void 0 ? ref : newRef;
  let {
    pressProps: pressProps
  } = module_$f6c31cce2adf654f$export$45712eceda6fad21({ ...props,
    ref: ref
  });
  let child = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.only(children);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().cloneElement(child, // @ts-ignore
  {
    ref: ref,
    ...module_$3ef42575df84b30b$export$9d1611c77c2fe928(child.props, pressProps)
  });
});
var module_$f1ab8c75478c6f73$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$f1ab8c75478c6f73$exports, "PressResponder", () => module_$f1ab8c75478c6f73$export$3351871ee4b288b8);
const module_$f1ab8c75478c6f73$export$3351871ee4b288b8 = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children: children,
  ...props
}, ref) => {
  let isRegistered = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(false);
  let prevContext = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)(module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5);
  let context = module_$3ef42575df84b30b$export$9d1611c77c2fe928(prevContext || {}, { ...props,
    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),

    register() {
      isRegistered.current = true;
      if (prevContext) prevContext.register();
    }

  });
  module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e(prevContext, ref);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!isRegistered.current) console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
  }, []);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(module_$ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {
    value: context
  }, children);
});
var module_$a1ea59d68270f0dd$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$a1ea59d68270f0dd$exports, "useFocus", () => module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6);

function module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let onBlur;
  if (!props.isDisabled && (props.onBlur || props.onFocusChange)) onBlur = e => {
    if (e.target === e.currentTarget) {
      if (props.onBlur) props.onBlur(e);
      if (props.onFocusChange) props.onFocusChange(false);
      return true;
    }
  };else onBlur = null;
  let onSyntheticFocus = module_$8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
  let onFocus;
  if (!props.isDisabled && (props.onFocus || props.onFocusChange || props.onBlur)) onFocus = e => {
    if (e.target === e.currentTarget) {
      if (props.onFocus) props.onFocus(e);
      if (props.onFocusChange) props.onFocusChange(true);
      onSyntheticFocus(e);
    }
  };
  return {
    focusProps: {
      onFocus: onFocus,
      onBlur: onBlur
    }
  };
}

var module_$507fabe10e71c6fb$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$507fabe10e71c6fb$exports, "isFocusVisible", () => module_$507fabe10e71c6fb$export$b9b3dfddab17db27);
_react_aria_interactions_dist_module_$parcel$export(module_$507fabe10e71c6fb$exports, "getInteractionModality", () => module_$507fabe10e71c6fb$export$630ff653c5ada6a9);
_react_aria_interactions_dist_module_$parcel$export(module_$507fabe10e71c6fb$exports, "setInteractionModality", () => module_$507fabe10e71c6fb$export$8397ddfc504fdb9a);
_react_aria_interactions_dist_module_$parcel$export(module_$507fabe10e71c6fb$exports, "useInteractionModality", () => module_$507fabe10e71c6fb$export$98e20ec92f614cfe);
_react_aria_interactions_dist_module_$parcel$export(module_$507fabe10e71c6fb$exports, "useFocusVisible", () => module_$507fabe10e71c6fb$export$ffd9e5021c1fb2d6);
_react_aria_interactions_dist_module_$parcel$export(module_$507fabe10e71c6fb$exports, "useFocusVisibleListener", () => module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3);
let module_$507fabe10e71c6fb$var$currentModality = null;
let module_$507fabe10e71c6fb$var$changeHandlers = new Set();
let module_$507fabe10e71c6fb$var$hasSetupGlobalListeners = false;
let module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
let module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = false; // Only Tab or Esc keys will make focus visible on text input elements

const module_$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};

function module_$507fabe10e71c6fb$var$triggerChangeHandlers(modality, e) {
  for (let handler of module_$507fabe10e71c6fb$var$changeHandlers) handler(modality, e);
}
/**
 * Helper function to determine if a KeyboardEvent is unmodified and could make keyboard focus styles visible.
 */


function module_$507fabe10e71c6fb$var$isValidKey(e) {
  // Control and Shift keys trigger when navigating back to the tab with keyboard.
  return !(e.metaKey || !module_$c87311424ea30a05$export$9ac100e40613ea10() && e.altKey || e.ctrlKey || e.key === 'Control' || e.key === 'Shift' || e.key === 'Meta');
}

function module_$507fabe10e71c6fb$var$handleKeyboardEvent(e) {
  module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;

  if (module_$507fabe10e71c6fb$var$isValidKey(e)) {
    module_$507fabe10e71c6fb$var$currentModality = 'keyboard';
    module_$507fabe10e71c6fb$var$triggerChangeHandlers('keyboard', e);
  }
}

function module_$507fabe10e71c6fb$var$handlePointerEvent(e) {
  module_$507fabe10e71c6fb$var$currentModality = 'pointer';

  if (e.type === 'mousedown' || e.type === 'pointerdown') {
    module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    module_$507fabe10e71c6fb$var$triggerChangeHandlers('pointer', e);
  }
}

function module_$507fabe10e71c6fb$var$handleClickEvent(e) {
  if (module_$8a9cb279dc87e130$export$60278871457622de(e)) {
    module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    module_$507fabe10e71c6fb$var$currentModality = 'virtual';
  }
}

function module_$507fabe10e71c6fb$var$handleFocusEvent(e) {
  // Firefox fires two extra focus events when the user first clicks into an iframe:
  // first on the window, then on the document. We ignore these events so they don't
  // cause keyboard focus rings to appear.
  if (e.target === window || e.target === document) return; // If a focus event occurs without a preceding keyboard or pointer event, switch to virtual modality.
  // This occurs, for example, when navigating a form with the next/previous buttons on iOS.

  if (!module_$507fabe10e71c6fb$var$hasEventBeforeFocus && !module_$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    module_$507fabe10e71c6fb$var$currentModality = 'virtual';
    module_$507fabe10e71c6fb$var$triggerChangeHandlers('virtual', e);
  }

  module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}

function module_$507fabe10e71c6fb$var$handleWindowBlur() {
  // When the window is blurred, reset state. This is necessary when tabbing out of the window,
  // for example, since a subsequent focus event won't be fired.
  module_$507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  module_$507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
/**
 * Setup global event listeners to control when keyboard focus style should be visible.
 */


function module_$507fabe10e71c6fb$var$setupGlobalFocusEvents() {
  if (typeof window === 'undefined' || module_$507fabe10e71c6fb$var$hasSetupGlobalListeners) return; // Programmatic focus() calls shouldn't affect the current input modality.
  // However, we need to detect other cases when a focus event occurs without
  // a preceding user event (e.g. screen reader focus). Overriding the focus
  // method on HTMLElement.prototype is a bit hacky, but works.

  let focus = HTMLElement.prototype.focus;

  HTMLElement.prototype.focus = function () {
    module_$507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };

  document.addEventListener('keydown', module_$507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener('keyup', module_$507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener('click', module_$507fabe10e71c6fb$var$handleClickEvent, true); // Register focus events on the window so they are sure to happen
  // before React's event listeners (registered on the document).

  window.addEventListener('focus', module_$507fabe10e71c6fb$var$handleFocusEvent, true);
  window.addEventListener('blur', module_$507fabe10e71c6fb$var$handleWindowBlur, false);

  if (typeof PointerEvent !== 'undefined') {
    document.addEventListener('pointerdown', module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('pointermove', module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('pointerup', module_$507fabe10e71c6fb$var$handlePointerEvent, true);
  } else {
    document.addEventListener('mousedown', module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('mousemove', module_$507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener('mouseup', module_$507fabe10e71c6fb$var$handlePointerEvent, true);
  }

  module_$507fabe10e71c6fb$var$hasSetupGlobalListeners = true;
}

if (typeof document !== 'undefined') {
  if (document.readyState !== 'loading') module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();else document.addEventListener('DOMContentLoaded', module_$507fabe10e71c6fb$var$setupGlobalFocusEvents);
}

function module_$507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return module_$507fabe10e71c6fb$var$currentModality !== 'pointer';
}

function module_$507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return module_$507fabe10e71c6fb$var$currentModality;
}

function module_$507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
  module_$507fabe10e71c6fb$var$currentModality = modality;
  module_$507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
}

function module_$507fabe10e71c6fb$export$98e20ec92f614cfe() {
  module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();
  let [modality, setModality] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(module_$507fabe10e71c6fb$var$currentModality);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let handler = () => {
      setModality(module_$507fabe10e71c6fb$var$currentModality);
    };

    module_$507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      module_$507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, []);
  return modality;
}
/**
 * If this is attached to text input component, return if the event is a focus event (Tab/Escape keys pressed) so that
 * focus visible style can be properly set.
 */


function module_$507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e) {
  return !(isTextInput && modality === 'keyboard' && e instanceof KeyboardEvent && !module_$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e.key]);
}

function module_$507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {
  let {
    isTextInput: isTextInput,
    autoFocus: autoFocus
  } = props;
  let [isFocusVisibleState, setFocusVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(autoFocus || module_$507fabe10e71c6fb$export$b9b3dfddab17db27());
  module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3($507fabe10e71c6fb$export$b9b3dfddab17db27 => {
    setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db27);
  }, [isTextInput], {
    isTextInput: isTextInput
  });
  return {
    isFocusVisible: isFocusVisibleState
  };
}

function module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
  module_$507fabe10e71c6fb$var$setupGlobalFocusEvents();
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    let handler = (modality, e) => {
      if (!module_$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e)) return;
      fn(module_$507fabe10e71c6fb$export$b9b3dfddab17db27());
    };

    module_$507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      module_$507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, deps);
}

var module_$9ab94262bd0047c7$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$9ab94262bd0047c7$exports, "useFocusWithin", () => module_$9ab94262bd0047c7$export$420e68273165f4ec);

function module_$9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocusWithin: false
  }).current;
  let onBlur = props.isDisabled ? null : e => {
    // We don't want to trigger onBlurWithin and then immediately onFocusWithin again
    // when moving focus inside the element. Only trigger if the currentTarget doesn't
    // include the relatedTarget (where focus is moving).
    if (state.isFocusWithin && !e.currentTarget.contains(e.relatedTarget)) {
      state.isFocusWithin = false;
      if (props.onBlurWithin) props.onBlurWithin(e);
      if (props.onFocusWithinChange) props.onFocusWithinChange(false);
    }
  };
  let onSyntheticFocus = module_$8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
  let onFocus = props.isDisabled ? null : e => {
    if (!state.isFocusWithin) {
      if (props.onFocusWithin) props.onFocusWithin(e);
      if (props.onFocusWithinChange) props.onFocusWithinChange(true);
      state.isFocusWithin = true;
      onSyntheticFocus(e);
    }
  };
  return {
    focusWithinProps: {
      onFocus: onFocus,
      onBlur: onBlur
    }
  };
}

var module_$6179b936705e76d3$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$6179b936705e76d3$exports, "useHover", () => module_$6179b936705e76d3$export$ae780daf29e6d456); // iOS fires onPointerEnter twice: once with pointerType="touch" and again with pointerType="mouse".
// We want to ignore these emulated events so they do not trigger hover behavior.
// See https://bugs.webkit.org/show_bug.cgi?id=214609.

let module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
let module_$6179b936705e76d3$var$hoverCount = 0;

function module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
  module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true; // Clear globalIgnoreEmulatedMouseEvents after a short timeout. iOS fires onPointerEnter
  // with pointerType="mouse" immediately after onPointerUp and before onFocus. On other
  // devices that don't have this quirk, we don't want to ignore a mouse hover sometime in
  // the distant future because a user previously touched the element.

  setTimeout(() => {
    module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
  }, 50);
}

function module_$6179b936705e76d3$var$handleGlobalPointerEvent(e) {
  if (e.pointerType === 'touch') module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}

function module_$6179b936705e76d3$var$setupGlobalTouchEvents() {
  if (typeof document === 'undefined') return;
  if (typeof PointerEvent !== 'undefined') document.addEventListener('pointerup', module_$6179b936705e76d3$var$handleGlobalPointerEvent);else document.addEventListener('touchend', module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  module_$6179b936705e76d3$var$hoverCount++;
  return () => {
    module_$6179b936705e76d3$var$hoverCount--;
    if (module_$6179b936705e76d3$var$hoverCount > 0) return;
    if (typeof PointerEvent !== 'undefined') document.removeEventListener('pointerup', module_$6179b936705e76d3$var$handleGlobalPointerEvent);else document.removeEventListener('touchend', module_$6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  };
}

function module_$6179b936705e76d3$export$ae780daf29e6d456(props) {
  let {
    onHoverStart: onHoverStart,
    onHoverChange: onHoverChange,
    onHoverEnd: onHoverEnd,
    isDisabled: isDisabled
  } = props;
  let [isHovered, setHovered] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isHovered: false,
    ignoreEmulatedMouseEvents: false,
    pointerType: '',
    target: null
  }).current;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(module_$6179b936705e76d3$var$setupGlobalTouchEvents, []);
  let {
    hoverProps: hoverProps1,
    triggerHoverEnd: triggerHoverEnd1
  } = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let triggerHoverStart = (event, pointerType) => {
      state.pointerType = pointerType;
      if (isDisabled || pointerType === 'touch' || state.isHovered || !event.currentTarget.contains(event.target)) return;
      state.isHovered = true;
      let target = event.currentTarget;
      state.target = target;
      if (onHoverStart) onHoverStart({
        type: 'hoverstart',
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(true);
      setHovered(true);
    };

    let triggerHoverEnd = (event, pointerType) => {
      state.pointerType = '';
      state.target = null;
      if (pointerType === 'touch' || !state.isHovered) return;
      state.isHovered = false;
      let target = event.currentTarget;
      if (onHoverEnd) onHoverEnd({
        type: 'hoverend',
        target: target,
        pointerType: pointerType
      });
      if (onHoverChange) onHoverChange(false);
      setHovered(false);
    };

    let hoverProps = {};

    if (typeof PointerEvent !== 'undefined') {
      hoverProps.onPointerEnter = e => {
        if (module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e.pointerType === 'mouse') return;
        triggerHoverStart(e, e.pointerType);
      };

      hoverProps.onPointerLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, e.pointerType);
      };
    } else {
      hoverProps.onTouchStart = () => {
        state.ignoreEmulatedMouseEvents = true;
      };

      hoverProps.onMouseEnter = e => {
        if (!state.ignoreEmulatedMouseEvents && !module_$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents) triggerHoverStart(e, 'mouse');
        state.ignoreEmulatedMouseEvents = false;
      };

      hoverProps.onMouseLeave = e => {
        if (!isDisabled && e.currentTarget.contains(e.target)) triggerHoverEnd(e, 'mouse');
      };
    }

    return {
      hoverProps: hoverProps,
      triggerHoverEnd: triggerHoverEnd
    };
  }, [onHoverStart, onHoverChange, onHoverEnd, isDisabled, state]);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    // Call the triggerHoverEnd as soon as isDisabled changes to true
    // Safe to call triggerHoverEnd, it will early return if we aren't currently hovering
    if (isDisabled) triggerHoverEnd1({
      currentTarget: state.target
    }, state.pointerType);
  }, [isDisabled]);
  return {
    hoverProps: hoverProps1,
    isHovered: isHovered
  };
}

var module_$e0b6e0b68ec7f50f$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$e0b6e0b68ec7f50f$exports, "useInteractOutside", () => module_$e0b6e0b68ec7f50f$export$872b660ac5a1ff98);

function module_$e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
  let {
    ref: ref,
    onInteractOutside: onInteractOutside,
    isDisabled: isDisabled,
    onInteractOutsideStart: onInteractOutsideStart
  } = props;
  let stateRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false,
    onInteractOutside: onInteractOutside,
    onInteractOutsideStart: onInteractOutsideStart
  });
  let state = stateRef.current;
  state.onInteractOutside = onInteractOutside;
  state.onInteractOutsideStart = onInteractOutsideStart;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isDisabled) return;

    let onPointerDown = e => {
      if (module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref) && state.onInteractOutside) {
        if (state.onInteractOutsideStart) state.onInteractOutsideStart(e);
        state.isPointerDown = true;
      }
    }; // Use pointer events if available. Otherwise, fall back to mouse and touch events.


    if (typeof PointerEvent !== 'undefined') {
      let onPointerUp = e => {
        if (state.isPointerDown && state.onInteractOutside && module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      }; // changing these to capture phase fixed combobox


      document.addEventListener('pointerdown', onPointerDown, true);
      document.addEventListener('pointerup', onPointerUp, true);
      return () => {
        document.removeEventListener('pointerdown', onPointerDown, true);
        document.removeEventListener('pointerup', onPointerUp, true);
      };
    } else {
      let onMouseUp = e => {
        if (state.ignoreEmulatedMouseEvents) state.ignoreEmulatedMouseEvents = false;else if (state.isPointerDown && state.onInteractOutside && module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };

      let onTouchEnd = e => {
        state.ignoreEmulatedMouseEvents = true;

        if (state.onInteractOutside && state.isPointerDown && module_$e0b6e0b68ec7f50f$var$isValidEvent(e, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e);
        }
      };

      document.addEventListener('mousedown', onPointerDown, true);
      document.addEventListener('mouseup', onMouseUp, true);
      document.addEventListener('touchstart', onPointerDown, true);
      document.addEventListener('touchend', onTouchEnd, true);
      return () => {
        document.removeEventListener('mousedown', onPointerDown, true);
        document.removeEventListener('mouseup', onMouseUp, true);
        document.removeEventListener('touchstart', onPointerDown, true);
        document.removeEventListener('touchend', onTouchEnd, true);
      };
    }
  }, [ref, state, isDisabled]);
}

function module_$e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
  if (event.button > 0) return false; // if the event target is no longer in the document

  if (event.target) {
    const ownerDocument = event.target.ownerDocument;
    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target)) return false;
  }

  return ref.current && !ref.current.contains(event.target);
}

var module_$46d819fcbaf35654$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$46d819fcbaf35654$exports, "useKeyboard", () => module_$46d819fcbaf35654$export$8f71654801c2f7cd);

function module_$93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler) return;
  let shouldStopPropagation = true;
  return e => {
    let event = { ...e,

      preventDefault() {
        e.preventDefault();
      },

      isDefaultPrevented() {
        return e.isDefaultPrevented();
      },

      stopPropagation() {
        console.error('stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.');
      },

      continuePropagation() {
        shouldStopPropagation = false;
      }

    };
    handler(event);
    if (shouldStopPropagation) e.stopPropagation();
  };
}

function module_$46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: module_$93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),
      onKeyUp: module_$93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)
    }
  };
}

var module_$e8a7022cf87cba2a$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$e8a7022cf87cba2a$exports, "useMove", () => module_$e8a7022cf87cba2a$export$36da96379f79f245);

function module_$e8a7022cf87cba2a$export$36da96379f79f245(props) {
  let {
    onMoveStart: onMoveStart,
    onMove: onMove,
    onMoveEnd: onMoveEnd
  } = props;
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    didMove: false,
    lastPosition: null,
    id: null
  });
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = module_$03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let moveProps1 = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let moveProps = {};

    let start = () => {
      module_$14c0b72509d70225$export$16a4697467175487();
      state.current.didMove = false;
    };

    let move = (originalEvent, pointerType, deltaX, deltaY) => {
      if (deltaX === 0 && deltaY === 0) return;

      if (!state.current.didMove) {
        state.current.didMove = true;
        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
          type: 'movestart',
          pointerType: pointerType,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }

      onMove({
        type: 'move',
        pointerType: pointerType,
        deltaX: deltaX,
        deltaY: deltaY,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };

    let end = (originalEvent, pointerType) => {
      module_$14c0b72509d70225$export$b0d6fa1ab32e3295();
      if (state.current.didMove) onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
        type: 'moveend',
        pointerType: pointerType,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };

    if (typeof PointerEvent === 'undefined') {
      let onMouseMove = e => {
        if (e.button === 0) {
          move(e, 'mouse', e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };

      let onMouseUp = e => {
        if (e.button === 0) {
          end(e, 'mouse');
          removeGlobalListener(window, 'mousemove', onMouseMove, false);
          removeGlobalListener(window, 'mouseup', onMouseUp, false);
        }
      };

      moveProps.onMouseDown = e => {
        if (e.button === 0) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          addGlobalListener(window, 'mousemove', onMouseMove, false);
          addGlobalListener(window, 'mouseup', onMouseUp, false);
        }
      };

      let onTouchMove = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);

        if (touch >= 0) {
          let {
            pageX: pageX,
            pageY: pageY
          } = e.changedTouches[touch];
          move(e, 'touch', pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: pageX,
            pageY: pageY
          };
        }
      };

      let onTouchEnd = e => {
        let touch = [...e.changedTouches].findIndex(({
          identifier: identifier
        }) => identifier === state.current.id);

        if (touch >= 0) {
          end(e, 'touch');
          state.current.id = null;
          removeGlobalListener(window, 'touchmove', onTouchMove);
          removeGlobalListener(window, 'touchend', onTouchEnd);
          removeGlobalListener(window, 'touchcancel', onTouchEnd);
        }
      };

      moveProps.onTouchStart = e => {
        if (e.changedTouches.length === 0 || state.current.id != null) return;
        let {
          pageX: pageX,
          pageY: pageY,
          identifier: identifier
        } = e.changedTouches[0];
        start();
        e.stopPropagation();
        e.preventDefault();
        state.current.lastPosition = {
          pageX: pageX,
          pageY: pageY
        };
        state.current.id = identifier;
        addGlobalListener(window, 'touchmove', onTouchMove, false);
        addGlobalListener(window, 'touchend', onTouchEnd, false);
        addGlobalListener(window, 'touchcancel', onTouchEnd, false);
      };
    } else {
      let onPointerMove = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || 'mouse'; // Problems with PointerEvent#movementX/movementY:
          // 1. it is always 0 on macOS Safari.
          // 2. On Chrome Android, it's scaled by devicePixelRatio, but not on Chrome macOS

          move(e, pointerType, e.pageX - state.current.lastPosition.pageX, e.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
        }
      };

      let onPointerUp = e => {
        if (e.pointerId === state.current.id) {
          let pointerType = e.pointerType || 'mouse';
          end(e, pointerType);
          state.current.id = null;
          removeGlobalListener(window, 'pointermove', onPointerMove, false);
          removeGlobalListener(window, 'pointerup', onPointerUp, false);
          removeGlobalListener(window, 'pointercancel', onPointerUp, false);
        }
      };

      moveProps.onPointerDown = e => {
        if (e.button === 0 && state.current.id == null) {
          start();
          e.stopPropagation();
          e.preventDefault();
          state.current.lastPosition = {
            pageX: e.pageX,
            pageY: e.pageY
          };
          state.current.id = e.pointerId;
          addGlobalListener(window, 'pointermove', onPointerMove, false);
          addGlobalListener(window, 'pointerup', onPointerUp, false);
          addGlobalListener(window, 'pointercancel', onPointerUp, false);
        }
      };
    }

    let triggerKeyboardMove = (e, deltaX, deltaY) => {
      start();
      move(e, 'keyboard', deltaX, deltaY);
      end(e, 'keyboard');
    };

    moveProps.onKeyDown = e => {
      switch (e.key) {
        case 'Left':
        case 'ArrowLeft':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, -1, 0);
          break;

        case 'Right':
        case 'ArrowRight':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 1, 0);
          break;

        case 'Up':
        case 'ArrowUp':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, -1);
          break;

        case 'Down':
        case 'ArrowDown':
          e.preventDefault();
          e.stopPropagation();
          triggerKeyboardMove(e, 0, 1);
          break;
      }
    };

    return moveProps;
  }, [state, onMoveStart, onMove, onMoveEnd, addGlobalListener, removeGlobalListener]);
  return {
    moveProps: moveProps1
  };
}

var module_$7d0a636d7a4dcefd$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$7d0a636d7a4dcefd$exports, "useScrollWheel", () => module_$7d0a636d7a4dcefd$export$2123ff2b87c81ca);

function module_$7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {
  let {
    onScroll: onScroll,
    isDisabled: isDisabled
  } = props;
  let onScrollHandler = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)(e => {
    // If the ctrlKey is pressed, this is a zoom event, do nothing.
    if (e.ctrlKey) return; // stop scrolling the page

    e.preventDefault();
    e.stopPropagation();
    if (onScroll) onScroll({
      deltaX: e.deltaX,
      deltaY: e.deltaY
    });
  }, [onScroll]);
  module_$e9faafb641e167db$export$90fc3a17d93f704c(ref, 'wheel', isDisabled ? null : onScrollHandler);
}

var module_$8a26561d2877236e$exports = {};
_react_aria_interactions_dist_module_$parcel$export(module_$8a26561d2877236e$exports, "useLongPress", () => module_$8a26561d2877236e$export$c24ed0104d07eab9);
const module_$8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;

function module_$8a26561d2877236e$export$c24ed0104d07eab9(props) {
  let {
    isDisabled: isDisabled,
    onLongPressStart: onLongPressStart,
    onLongPressEnd: onLongPressEnd,
    onLongPress: onLongPress,
    threshold = module_$8a26561d2877236e$var$DEFAULT_THRESHOLD,
    accessibilityDescription: accessibilityDescription
  } = props;
  const timeRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let {
    addGlobalListener: addGlobalListener,
    removeGlobalListener: removeGlobalListener
  } = module_$03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let {
    pressProps: pressProps
  } = module_$f6c31cce2adf654f$export$45712eceda6fad21({
    isDisabled: isDisabled,

    onPressStart(e1) {
      if (e1.pointerType === 'mouse' || e1.pointerType === 'touch') {
        if (onLongPressStart) onLongPressStart({ ...e1,
          type: 'longpressstart'
        });
        timeRef.current = setTimeout(() => {
          // Prevent other usePress handlers from also handling this event.
          e1.target.dispatchEvent(new PointerEvent('pointercancel', {
            bubbles: true
          }));
          if (onLongPress) onLongPress({ ...e1,
            type: 'longpress'
          });
          timeRef.current = null;
        }, threshold); // Prevent context menu, which may be opened on long press on touch devices

        if (e1.pointerType === 'touch') {
          let onContextMenu = e => {
            e.preventDefault();
          };

          addGlobalListener(e1.target, 'contextmenu', onContextMenu, {
            once: true
          });
          addGlobalListener(window, 'pointerup', () => {
            // If no contextmenu event is fired quickly after pointerup, remove the handler
            // so future context menu events outside a long press are not prevented.
            setTimeout(() => {
              removeGlobalListener(e1.target, 'contextmenu', onContextMenu);
            }, 30);
          }, {
            once: true
          });
        }
      }
    },

    onPressEnd(e) {
      if (timeRef.current) clearTimeout(timeRef.current);
      if (onLongPressEnd && (e.pointerType === 'mouse' || e.pointerType === 'touch')) onLongPressEnd({ ...e,
        type: 'longpressend'
      });
    }

  });
  let descriptionProps = module_$ef06256079686ba0$export$f8aeda7b10753fa1(onLongPress && !isDisabled ? accessibilityDescription : null);
  return {
    longPressProps: module_$3ef42575df84b30b$export$9d1611c77c2fe928(pressProps, descriptionProps)
  };
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/live-announcer/node_modules/@react-aria/visually-hidden/dist/module.js




function visually_hidden_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $5c3e21d68f1c4674$exports = {};
visually_hidden_dist_module_$parcel$export($5c3e21d68f1c4674$exports, "useVisuallyHidden", () => $5c3e21d68f1c4674$export$a966af930f325cab);
visually_hidden_dist_module_$parcel$export($5c3e21d68f1c4674$exports, "VisuallyHidden", () => $5c3e21d68f1c4674$export$439d29a4e110a164);
const $5c3e21d68f1c4674$var$styles = {
  border: 0,
  clip: 'rect(0 0 0 0)',
  clipPath: 'inset(50%)',
  height: 1,
  margin: '0 -1px -1px 0',
  overflow: 'hidden',
  padding: 0,
  position: 'absolute',
  width: 1,
  whiteSpace: 'nowrap'
};

function $5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {
  let {
    style: style,
    isFocusable: isFocusable
  } = props;
  let [isFocused, setFocused] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let {
    focusProps: focusProps
  } = module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    isDisabled: !isFocusable,
    onFocusChange: setFocused
  }); // If focused, don't hide the element.

  let combinedStyles = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isFocused) return style;else if (style) return { ...$5c3e21d68f1c4674$var$styles,
      ...style
    };else return $5c3e21d68f1c4674$var$styles;
  }, [isFocused]);
  return {
    visuallyHiddenProps: { ...focusProps,
      style: combinedStyles
    }
  };
}

function $5c3e21d68f1c4674$export$439d29a4e110a164(props) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  let {
    children: children,
    elementType: Element = 'div',
    isFocusable: isFocusable,
    style: style,
    ...otherProps
  } = props;
  let {
    visuallyHiddenProps: visuallyHiddenProps
  } = $5c3e21d68f1c4674$export$a966af930f325cab(props);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(Element, module_$3ef42575df84b30b$export$9d1611c77c2fe928(otherProps, visuallyHiddenProps), children);
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/live-announcer/dist/module.js




function live_announcer_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $319e236875307eab$exports = {};
live_announcer_dist_module_$parcel$export($319e236875307eab$exports, "announce", () => $319e236875307eab$export$a9b970dcc4ae71a9);
live_announcer_dist_module_$parcel$export($319e236875307eab$exports, "clearAnnouncer", () => $319e236875307eab$export$d10ae4f68404609a);
live_announcer_dist_module_$parcel$export($319e236875307eab$exports, "destroyAnnouncer", () => $319e236875307eab$export$d8686216b8b81b2f);
/* Inspired by https://github.com/AlmeroSteyn/react-aria-live */

const $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY = 7000;
let $319e236875307eab$var$liveRegionAnnouncer = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createRef();
let $319e236875307eab$var$node = null;
let $319e236875307eab$var$messageId = 0;

function $319e236875307eab$export$a9b970dcc4ae71a9(message, assertiveness = 'assertive', timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
  $319e236875307eab$var$ensureInstance(announcer => announcer.announce(message, assertiveness, timeout));
}

function $319e236875307eab$export$d10ae4f68404609a(assertiveness) {
  $319e236875307eab$var$ensureInstance(announcer => announcer.clear(assertiveness));
}

function $319e236875307eab$export$d8686216b8b81b2f() {
  if ($319e236875307eab$var$liveRegionAnnouncer.current) {
    external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default().unmountComponentAtNode($319e236875307eab$var$node);
    document.body.removeChild($319e236875307eab$var$node);
    $319e236875307eab$var$node = null;
  }
}
/**
 * Ensures we only have one instance of the announcer so that we don't have elements competing.
 */


function $319e236875307eab$var$ensureInstance(callback) {
  if (!$319e236875307eab$var$liveRegionAnnouncer.current) {
    $319e236875307eab$var$node = document.createElement('div');
    $319e236875307eab$var$node.dataset.liveAnnouncer = 'true';
    document.body.prepend($319e236875307eab$var$node);
    external_root_ReactDOM_commonjs2_react_dom_commonjs_react_dom_amd_react_dom_default().render( /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($319e236875307eab$var$LiveRegionAnnouncer, {
      ref: $319e236875307eab$var$liveRegionAnnouncer
    }), $319e236875307eab$var$node, () => callback($319e236875307eab$var$liveRegionAnnouncer.current));
  } else callback($319e236875307eab$var$liveRegionAnnouncer.current);
}

const $319e236875307eab$var$LiveRegionAnnouncer = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((_, ref) => {
  let [assertiveMessages, setAssertiveMessages] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)([]);
  let [politeMessages, setPoliteMessages] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)([]);

  let clear = assertiveness => {
    if (!assertiveness || assertiveness === 'assertive') setAssertiveMessages([]);
    if (!assertiveness || assertiveness === 'polite') setPoliteMessages([]);
  };

  let $319e236875307eab$export$a9b970dcc4ae71a9 = (message1, assertiveness = 'assertive', timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) => {
    let id = $319e236875307eab$var$messageId++;
    if (assertiveness === 'assertive') setAssertiveMessages(messages => [...messages, {
      id: id,
      text: message1
    }]);else setPoliteMessages(messages => [...messages, {
      id: id,
      text: message1
    }]);
    if (message1 !== '') setTimeout(() => {
      if (assertiveness === 'assertive') setAssertiveMessages(messages => messages.filter(message => message.id !== id));else setPoliteMessages(messages => messages.filter(message => message.id !== id));
    }, timeout);
  };

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => ({
    announce: $319e236875307eab$export$a9b970dcc4ae71a9,
    clear: clear
  }));
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(external_root_React_commonjs2_react_commonjs_react_amd_react_.Fragment, null, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($319e236875307eab$var$MessageBlock, {
    "aria-live": "assertive"
  }, assertiveMessages.map(message => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("div", {
    key: message.id
  }, message.text))), /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($319e236875307eab$var$MessageBlock, {
    "aria-live": "polite"
  }, politeMessages.map(message => /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("div", {
    key: message.id
  }, message.text))));
});

function $319e236875307eab$var$MessageBlock({
  children: children,
  'aria-live': ariaLive
}) {
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($5c3e21d68f1c4674$export$439d29a4e110a164, {
    role: "log",
    "aria-live": ariaLive,
    "aria-relevant": "additions"
  }, children);
}


;// CONCATENATED MODULE: ../../node_modules/@internationalized/date/dist/module.js
const $2fe286d2fb449abb$export$7a5acbd77d414bd9 = {
  '001': 1,
  AD: 1,
  AE: 6,
  AF: 6,
  AI: 1,
  AL: 1,
  AM: 1,
  AN: 1,
  AT: 1,
  AX: 1,
  AZ: 1,
  BA: 1,
  BE: 1,
  BG: 1,
  BH: 6,
  BM: 1,
  BN: 1,
  BY: 1,
  CH: 1,
  CL: 1,
  CM: 1,
  CR: 1,
  CY: 1,
  CZ: 1,
  DE: 1,
  DJ: 6,
  DK: 1,
  DZ: 6,
  EC: 1,
  EE: 1,
  EG: 6,
  ES: 1,
  FI: 1,
  FJ: 1,
  FO: 1,
  FR: 1,
  GB: 1,
  GE: 1,
  GF: 1,
  GP: 1,
  GR: 1,
  HR: 1,
  HU: 1,
  IE: 1,
  IQ: 6,
  IR: 6,
  IS: 1,
  IT: 1,
  JO: 6,
  KG: 1,
  KW: 6,
  KZ: 1,
  LB: 1,
  LI: 1,
  LK: 1,
  LT: 1,
  LU: 1,
  LV: 1,
  LY: 6,
  MC: 1,
  MD: 1,
  ME: 1,
  MK: 1,
  MN: 1,
  MQ: 1,
  MV: 5,
  MY: 1,
  NL: 1,
  NO: 1,
  NZ: 1,
  OM: 6,
  PL: 1,
  QA: 6,
  RE: 1,
  RO: 1,
  RS: 1,
  RU: 1,
  SD: 6,
  SE: 1,
  SI: 1,
  SK: 1,
  SM: 1,
  SY: 6,
  TJ: 1,
  TM: 1,
  TR: 1,
  UA: 1,
  UY: 1,
  UZ: 1,
  VA: 1,
  VN: 1,
  XK: 1
};

function $14e0f24ef4ac5c92$export$ea39ec197993aef0(a, b) {
  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar);
  return a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
}

function $14e0f24ef4ac5c92$export$a18c89cbd24170ff(a, b) {
  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar); // In the Japanese calendar, months can span multiple eras/years, so only compare the first of the month.

  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);
  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);
  return a.era === b.era && a.year === b.year && a.month === b.month;
}

function $14e0f24ef4ac5c92$export$5841f9eb9773f25f(a, b) {
  b = $11d87f3f76e88657$export$b4a036af3fc0b032(b, a.calendar);
  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);
  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);
  return a.era === b.era && a.year === b.year;
}

function $14e0f24ef4ac5c92$export$91b62ebf2ba703ee(a, b) {
  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month && a.day === b.day;
}

function $14e0f24ef4ac5c92$export$5a8da0c44a3afdf2(a, b) {
  a = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(a);
  b = $14e0f24ef4ac5c92$export$a5a3b454ada2268e(b);
  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year && a.month === b.month;
}

function $14e0f24ef4ac5c92$export$ea840f5a6dda8147(a, b) {
  a = $14e0f24ef4ac5c92$export$f91e89d3d0406102(a);
  b = $14e0f24ef4ac5c92$export$f91e89d3d0406102(b);
  return a.calendar.identifier === b.calendar.identifier && a.era === b.era && a.year === b.year;
}

function $14e0f24ef4ac5c92$export$629b0a497aa65267(date, timeZone) {
  return $14e0f24ef4ac5c92$export$ea39ec197993aef0(date, $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone));
}

function $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale) {
  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust
  // accordingly.  Julian day 0 is Monday.

  let dayOfWeek = Math.ceil(julian + 1 - $14e0f24ef4ac5c92$var$getWeekStart(locale)) % 7;
  if (dayOfWeek < 0) dayOfWeek += 7;
  return dayOfWeek;
}

function $14e0f24ef4ac5c92$export$461939dd4422153(timeZone) {
  return $11d87f3f76e88657$export$1b96692a1ba042ac(Date.now(), timeZone);
}

function $14e0f24ef4ac5c92$export$d0bdf45af03a6ea3(timeZone) {
  return $11d87f3f76e88657$export$93522d1a439f3617($14e0f24ef4ac5c92$export$461939dd4422153(timeZone));
}

function $14e0f24ef4ac5c92$export$68781ddf31c0090f(a, b) {
  return a.calendar.toJulianDay(a) - b.calendar.toJulianDay(b);
}

function $14e0f24ef4ac5c92$export$c19a80a9721b80f6(a, b) {
  return $14e0f24ef4ac5c92$var$timeToMs(a) - $14e0f24ef4ac5c92$var$timeToMs(b);
}

function $14e0f24ef4ac5c92$var$timeToMs(a) {
  return a.hour * 3600000 + a.minute * 60000 + a.second * 1000 + a.millisecond;
}

function $14e0f24ef4ac5c92$export$126c91c941de7e(a, timeZone) {
  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(a, timeZone);
  let tomorrow = a.add({
    days: 1
  });
  let tomorrowMs = $11d87f3f76e88657$export$5107c82f94518f5c(tomorrow, timeZone);
  return (tomorrowMs - ms) / 3600000;
}

let $14e0f24ef4ac5c92$var$localTimeZone = null;

function $14e0f24ef4ac5c92$export$aa8b41735afcabd2() {
  // TODO: invalidate this somehow?
  if ($14e0f24ef4ac5c92$var$localTimeZone == null) $14e0f24ef4ac5c92$var$localTimeZone = new Intl.DateTimeFormat().resolvedOptions().timeZone;
  return $14e0f24ef4ac5c92$var$localTimeZone;
}

function $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date) {
  // Use `subtract` instead of `set` so we don't get constrained in an era.
  return date.subtract({
    days: date.day - 1
  });
}

function $14e0f24ef4ac5c92$export$a2258d9c4118825c(date) {
  return date.add({
    days: date.calendar.getDaysInMonth(date) - date.day
  });
}

function $14e0f24ef4ac5c92$export$f91e89d3d0406102(date) {
  return $14e0f24ef4ac5c92$export$a5a3b454ada2268e(date.subtract({
    months: date.month - 1
  }));
}

function $14e0f24ef4ac5c92$export$8b7aa55c66d5569e(date) {
  return $14e0f24ef4ac5c92$export$a2258d9c4118825c(date.add({
    months: date.calendar.getMonthsInYear(date) - date.month
  }));
}

function $14e0f24ef4ac5c92$export$5412ac11713b72ad(date) {
  if (date.calendar.getMinimumMonthInYear) return date.calendar.getMinimumMonthInYear(date);
  return 1;
}

function $14e0f24ef4ac5c92$export$b2f4953d301981d5(date) {
  if (date.calendar.getMinimumDayInMonth) return date.calendar.getMinimumDayInMonth(date);
  return 1;
}

function $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale) {
  let dayOfWeek = $14e0f24ef4ac5c92$export$2061056d06d7cdf7(date, locale);
  return date.subtract({
    days: dayOfWeek
  });
}

function $14e0f24ef4ac5c92$export$ef8b6d9133084f4e(date, locale) {
  return $14e0f24ef4ac5c92$export$42c81a444fbfb5d4(date, locale).add({
    days: 6
  });
}

const $14e0f24ef4ac5c92$var$cachedRegions = new Map();

function $14e0f24ef4ac5c92$var$getRegion(locale) {
  // If the Intl.Locale API is available, use it to get the region for the locale.
  // @ts-ignore
  if (Intl.Locale) {
    // Constructing an Intl.Locale is expensive, so cache the result.
    let region = $14e0f24ef4ac5c92$var$cachedRegions.get(locale);

    if (!region) {
      // @ts-ignore
      region = new Intl.Locale(locale).maximize().region;
      $14e0f24ef4ac5c92$var$cachedRegions.set(locale, region);
    }

    return region;
  } // If not, just try splitting the string.
  // If the second part of the locale string is 'u',
  // then this is a unicode extension, so ignore it.
  // Otherwise, it should be the region.


  let part = locale.split('-')[1];
  return part === 'u' ? null : part;
}

function $14e0f24ef4ac5c92$var$getWeekStart(locale) {
  // TODO: use Intl.Locale for this once browsers support the weekInfo property
  // https://github.com/tc39/proposal-intl-locale-info
  let region = $14e0f24ef4ac5c92$var$getRegion(locale);
  return $2fe286d2fb449abb$export$7a5acbd77d414bd9[region] || 0;
}

function $14e0f24ef4ac5c92$export$ccc1b2479e7dd654(date, locale) {
  let days = date.calendar.getDaysInMonth(date);
  return Math.ceil(($14e0f24ef4ac5c92$export$2061056d06d7cdf7($14e0f24ef4ac5c92$export$a5a3b454ada2268e(date), locale) + days) / 7);
}

function $14e0f24ef4ac5c92$export$5c333a116e949cdd(a, b) {
  if (a && b) return a.compare(b) <= 0 ? a : b;
  return a || b;
}

function $14e0f24ef4ac5c92$export$a75f2bff57811055(a, b) {
  if (a && b) return a.compare(b) >= 0 ? a : b;
  return a || b;
}

const $14e0f24ef4ac5c92$var$WEEKEND_DATA = {
  AF: [4, 5],
  AE: [5, 6],
  BH: [5, 6],
  DZ: [5, 6],
  EG: [5, 6],
  IL: [5, 6],
  IQ: [5, 6],
  IR: [5, 5],
  JO: [5, 6],
  KW: [5, 6],
  LY: [5, 6],
  OM: [5, 6],
  QA: [5, 6],
  SA: [5, 6],
  SD: [5, 6],
  SY: [5, 6],
  YE: [5, 6]
};

function $14e0f24ef4ac5c92$export$618d60ea299da42(date, locale) {
  let julian = date.calendar.toJulianDay(date); // If julian is negative, then julian % 7 will be negative, so we adjust
  // accordingly.  Julian day 0 is Monday.

  let dayOfWeek = Math.ceil(julian + 1) % 7;
  if (dayOfWeek < 0) dayOfWeek += 7;
  let region = $14e0f24ef4ac5c92$var$getRegion(locale); // Use Intl.Locale for this once weekInfo is supported.
  // https://github.com/tc39/proposal-intl-locale-info

  let [start, end] = $14e0f24ef4ac5c92$var$WEEKEND_DATA[region] || [6, 0];
  return dayOfWeek === start || dayOfWeek === end;
}

function $14e0f24ef4ac5c92$export$ee9d87258e1d19ed(date, locale) {
  return !$14e0f24ef4ac5c92$export$618d60ea299da42(date, locale);
}

function $2b4dce13dd5a17fa$export$842a2cf37af977e1(amount, numerator) {
  return amount - numerator * Math.floor(amount / numerator);
}

function $2b4dce13dd5a17fa$export$784d13d8ee351f07(date) {
  if (date.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.calendar, date.era, date.year, date.month, date.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.calendar, date.year, date.month, date.day);
}

function $2b4dce13dd5a17fa$export$27fa0172ae2644b3(date) {
  if (date.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.year, date.month, date.day, date.hour, date.minute, date.second);
}

const $3b62074eb05584b2$var$EPOCH = 1721426; // 001/01/03 Julian C.E.

function $3b62074eb05584b2$export$f297eb839006d339(year, month, day) {
  let y1 = year - 1;
  let monthOffset = -2;
  if (month <= 2) monthOffset = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) monthOffset = -1;
  return $3b62074eb05584b2$var$EPOCH - 1 + 365 * y1 + Math.floor(y1 / 4) - Math.floor(y1 / 100) + Math.floor(y1 / 400) + Math.floor((367 * month - 362) / 12 + monthOffset + day);
}

function $3b62074eb05584b2$export$553d7fa8e3805fc0(year) {
  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}

const $3b62074eb05584b2$var$daysInMonth = {
  standard: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
  leapyear: [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
};

class $3b62074eb05584b2$export$80ee6245ec4f29ec {
  fromJulianDay(jd) {
    let jd0 = jd;
    let depoch = jd0 - $3b62074eb05584b2$var$EPOCH;
    let quadricent = Math.floor(depoch / 146097);
    let dqc = $2b4dce13dd5a17fa$export$842a2cf37af977e1(depoch, 146097);
    let cent = Math.floor(dqc / 36524);
    let dcent = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dqc, 36524);
    let quad = Math.floor(dcent / 1461);
    let dquad = $2b4dce13dd5a17fa$export$842a2cf37af977e1(dcent, 1461);
    let yindex = Math.floor(dquad / 365);
    let year = quadricent * 400 + cent * 100 + quad * 4 + yindex + (cent !== 4 && yindex !== 4 ? 1 : 0);
    let yearDay = jd0 - $3b62074eb05584b2$export$f297eb839006d339(year, 1, 1);
    let leapAdj = 2;
    if (jd0 < $3b62074eb05584b2$export$f297eb839006d339(year, 3, 1)) leapAdj = 0;else if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) leapAdj = 1;
    let month = Math.floor(((yearDay + leapAdj) * 12 + 373) / 367);
    let day = jd0 - $3b62074eb05584b2$export$f297eb839006d339(year, month, 1) + 1;
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year, month, day);
  }

  toJulianDay(date) {
    return $3b62074eb05584b2$export$f297eb839006d339(date.year, date.month, date.day);
  }

  getDaysInMonth(date) {
    return $3b62074eb05584b2$var$daysInMonth[$3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 'leapyear' : 'standard'][date.month - 1];
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  getMonthsInYear(date) {
    return 12;
  }

  getDaysInYear(date) {
    return $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 366 : 365;
  } // eslint-disable-next-line @typescript-eslint/no-unused-vars


  getYearsInEra(date) {
    return 9999;
  }

  getEras() {
    return ['BC', 'AD'];
  }

  getYearsToAdd(date, years) {
    return date.era === 'BC' ? -years : years;
  }

  balanceDate(date) {
    if (date.year <= 0) {
      date.era = date.era === 'BC' ? 'AD' : 'BC';
      date.year = 1 - date.year;
    }
  }

  constructor() {
    this.identifier = 'gregory';
  }

}

function $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {
  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());
  return $11d87f3f76e88657$var$epochFromParts(date.year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);
}

function $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {
  // Note: Date.UTC() interprets one and two-digit years as being in the
  // 20th century, so don't use it
  let date = new Date();
  date.setUTCHours(hour, minute, second, millisecond);
  date.setUTCFullYear(year, month - 1, day);
  return date.getTime();
}

function $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {
  // Fast path: for local timezone, use native Date.
  if (timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2()) return new Date(ms).getTimezoneOffset() * -60000;
  let {
    year: year,
    month: month,
    day: day,
    hour: hour,
    minute: minute,
    second: second
  } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);
  let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);
  return utc - Math.floor(ms / 1000) * 1000;
}

const $11d87f3f76e88657$var$formattersByTimeZone = new Map();

function $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {
  let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);

  if (!formatter) {
    formatter = new Intl.DateTimeFormat('en-US', {
      timeZone: timeZone,
      hour12: false,
      era: 'short',
      year: 'numeric',
      month: 'numeric',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric'
    });
    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);
  }

  let parts = formatter.formatToParts(new Date(ms));
  let namedParts = {};

  for (let part of parts) if (part.type !== 'literal') namedParts[part.type] = part.value;

  return {
    year: namedParts.era === 'BC' ? -namedParts.year + 1 : +namedParts.year,
    month: +namedParts.month,
    day: +namedParts.day,
    hour: namedParts.hour === '24' ? 0 : +namedParts.hour,
    minute: +namedParts.minute,
    second: +namedParts.second
  };
}

const $11d87f3f76e88657$var$DAYMILLIS = 86400000;

function $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);
  let earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  let later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);
}

function $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {
  let found = earlier === later ? [earlier] : [earlier, later];
  return found.filter(absolute => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));
}

function $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {
  let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);
  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;
}

function $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation = 'compatible') {
  let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date); // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.

  if (timeZone === $14e0f24ef4ac5c92$export$aa8b41735afcabd2() && disambiguation === 'compatible') {
    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new $3b62074eb05584b2$export$80ee6245ec4f29ec()); // Don't use Date constructor here because two-digit years are interpreted in the 20th century.

    let date = new Date();
    date.setFullYear(dateTime.year, dateTime.month - 1, dateTime.day);
    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
    return date.getTime();
  }

  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);
  let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);
  let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);
  if (valid.length === 1) return valid[0];
  if (valid.length > 1) switch (disambiguation) {
    // 'compatible' means 'earlier' for "fall back" transitions
    case 'compatible':
    case 'earlier':
      return valid[0];

    case 'later':
      return valid[valid.length - 1];

    case 'reject':
      throw new RangeError('Multiple possible absolute times found');
  }

  switch (disambiguation) {
    case 'earlier':
      return Math.min(ms - offsetBefore, ms - offsetAfter);
    // 'compatible' means 'later' for "spring forward" transitions

    case 'compatible':
    case 'later':
      return Math.max(ms - offsetBefore, ms - offsetAfter);

    case 'reject':
      throw new RangeError('No such absolute time found');
  }
}

function $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone, disambiguation = 'compatible') {
  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));
}

function $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {
  let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);
  let date = new Date(ms + offset);
  let year = date.getUTCFullYear();
  let month = date.getUTCMonth() + 1;
  let day = date.getUTCDate();
  let hour = date.getUTCHours();
  let minute = date.getUTCMinutes();
  let second = date.getUTCSeconds();
  let millisecond = date.getUTCMilliseconds();
  return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(year, month, day, timeZone, offset, hour, minute, second, millisecond);
}

function $11d87f3f76e88657$export$e57ff100d91bd4b9(date, timeZone) {
  return $11d87f3f76e88657$export$1b96692a1ba042ac(date.getTime(), timeZone);
}

function $11d87f3f76e88657$export$d7f92bcd3596b086(date) {
  return $11d87f3f76e88657$export$e57ff100d91bd4b9(date, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());
}

function $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);
}

function $11d87f3f76e88657$export$6f4d78149f3f53ac(date) {
  return {
    era: date.era,
    year: date.year,
    month: date.month,
    day: date.day
  };
}

function $11d87f3f76e88657$export$4d0393e732857be5(date) {
  return {
    hour: date.hour,
    minute: date.minute,
    second: date.second,
    millisecond: date.millisecond
  };
}

function $11d87f3f76e88657$export$b21e0b124e224484(date, time) {
  let hour = 0,
      minute = 0,
      second = 0,
      millisecond = 0;
  if ('timeZone' in date) ({
    hour: hour,
    minute: minute,
    second: second,
    millisecond: millisecond
  } = date);else if ('hour' in date && !time) return date;
  if (time) ({
    hour: hour,
    minute: minute,
    second: second,
    millisecond: millisecond
  } = time);
  return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);
}

function $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {
  return new $35ea8db9cb2ccb90$export$680ea196effce5f(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);
}

function $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {
  if (date.calendar.identifier === calendar.identifier) return date;
  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));
  let copy = date.copy();
  copy.calendar = calendar;
  copy.era = calendarDate.era;
  copy.year = calendarDate.year;
  copy.month = calendarDate.month;
  copy.day = calendarDate.day;
  return copy;
}

function $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {
  if (date instanceof $35ea8db9cb2ccb90$export$d3b7288e7994edea) {
    if (date.timeZone === timeZone) return date;
    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);
  }

  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);
  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);
}

function $11d87f3f76e88657$export$83aac07b4c37b25(date) {
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
  return new Date(ms);
}

function $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {
  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;
  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);
}

function $11d87f3f76e88657$export$d9b67bc93c097491(date) {
  return $11d87f3f76e88657$export$538b00033cc11c75(date, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());
}

const $735220c2d4774dd3$var$ONE_HOUR = 3600000;

function $735220c2d4774dd3$export$e16d8520af44a096(date, duration) {
  let mutableDate = date.copy();
  let days = 'hour' in date ? $735220c2d4774dd3$var$addTimeFields(date, duration) : 0;
  $735220c2d4774dd3$var$addYears(mutableDate, duration.years || 0);
  if (mutableDate.calendar.balanceYearMonth) mutableDate.calendar.balanceYearMonth(mutableDate, date);
  mutableDate.month += duration.months || 0;
  $735220c2d4774dd3$var$balanceYearMonth(mutableDate);
  $735220c2d4774dd3$var$constrainMonthDay(mutableDate);
  mutableDate.day += (duration.weeks || 0) * 7;
  mutableDate.day += duration.days || 0;
  mutableDate.day += days;
  $735220c2d4774dd3$var$balanceDay(mutableDate);
  if (mutableDate.calendar.balanceDate) mutableDate.calendar.balanceDate(mutableDate);
  return mutableDate;
}

function $735220c2d4774dd3$var$addYears(date, years) {
  if (date.calendar.getYearsToAdd) years = date.calendar.getYearsToAdd(date, years);
  date.year += years;
}

function $735220c2d4774dd3$var$balanceYearMonth(date) {
  while (date.month < 1) {
    $735220c2d4774dd3$var$addYears(date, -1);
    date.month += date.calendar.getMonthsInYear(date);
  }

  let monthsInYear = 0;

  while (date.month > (monthsInYear = date.calendar.getMonthsInYear(date))) {
    date.month -= monthsInYear;
    $735220c2d4774dd3$var$addYears(date, 1);
  }
}

function $735220c2d4774dd3$var$balanceDay(date) {
  while (date.day < 1) {
    date.month--;
    $735220c2d4774dd3$var$balanceYearMonth(date);
    date.day += date.calendar.getDaysInMonth(date);
  }

  while (date.day > date.calendar.getDaysInMonth(date)) {
    date.day -= date.calendar.getDaysInMonth(date);
    date.month++;
    $735220c2d4774dd3$var$balanceYearMonth(date);
  }
}

function $735220c2d4774dd3$var$constrainMonthDay(date) {
  date.month = Math.max(1, Math.min(date.calendar.getMonthsInYear(date), date.month));
  date.day = Math.max(1, Math.min(date.calendar.getDaysInMonth(date), date.day));
}

function $735220c2d4774dd3$export$c4e2ecac49351ef2(date) {
  if (date.calendar.constrainDate) date.calendar.constrainDate(date);
  date.year = Math.max(1, Math.min(date.calendar.getYearsInEra(date), date.year));
  $735220c2d4774dd3$var$constrainMonthDay(date);
}

function $735220c2d4774dd3$export$3e2544e88a25bff8(duration) {
  let inverseDuration = {};

  for (let key in duration) if (typeof duration[key] === 'number') inverseDuration[key] = -duration[key];

  return inverseDuration;
}

function $735220c2d4774dd3$export$4e2d2ead65e5f7e3(date, duration) {
  return $735220c2d4774dd3$export$e16d8520af44a096(date, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}

function $735220c2d4774dd3$export$adaa4cf7ef1b65be(date, fields) {
  let mutableDate = date.copy();
  if (fields.era != null) mutableDate.era = fields.era;
  if (fields.year != null) mutableDate.year = fields.year;
  if (fields.month != null) mutableDate.month = fields.month;
  if (fields.day != null) mutableDate.day = fields.day;
  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutableDate);
  return mutableDate;
}

function $735220c2d4774dd3$export$e5d5e1c1822b6e56(value, fields) {
  let mutableValue = value.copy();
  if (fields.hour != null) mutableValue.hour = fields.hour;
  if (fields.minute != null) mutableValue.minute = fields.minute;
  if (fields.second != null) mutableValue.second = fields.second;
  if (fields.millisecond != null) mutableValue.millisecond = fields.millisecond;
  $735220c2d4774dd3$export$7555de1e070510cb(mutableValue);
  return mutableValue;
}

function $735220c2d4774dd3$var$balanceTime(time) {
  time.second += Math.floor(time.millisecond / 1000);
  time.millisecond = $735220c2d4774dd3$var$nonNegativeMod(time.millisecond, 1000);
  time.minute += Math.floor(time.second / 60);
  time.second = $735220c2d4774dd3$var$nonNegativeMod(time.second, 60);
  time.hour += Math.floor(time.minute / 60);
  time.minute = $735220c2d4774dd3$var$nonNegativeMod(time.minute, 60);
  let days = Math.floor(time.hour / 24);
  time.hour = $735220c2d4774dd3$var$nonNegativeMod(time.hour, 24);
  return days;
}

function $735220c2d4774dd3$export$7555de1e070510cb(time) {
  time.millisecond = Math.max(0, Math.min(time.millisecond, 1000));
  time.second = Math.max(0, Math.min(time.second, 59));
  time.minute = Math.max(0, Math.min(time.minute, 59));
  time.hour = Math.max(0, Math.min(time.hour, 23));
}

function $735220c2d4774dd3$var$nonNegativeMod(a, b) {
  let result = a % b;
  if (result < 0) result += b;
  return result;
}

function $735220c2d4774dd3$var$addTimeFields(time, duration) {
  time.hour += duration.hours || 0;
  time.minute += duration.minutes || 0;
  time.second += duration.seconds || 0;
  time.millisecond += duration.milliseconds || 0;
  return $735220c2d4774dd3$var$balanceTime(time);
}

function $735220c2d4774dd3$export$7ed87b6bc2506470(time, duration) {
  let res = time.copy();
  $735220c2d4774dd3$var$addTimeFields(res, duration);
  return res;
}

function $735220c2d4774dd3$export$fe34d3a381cd7501(time, duration) {
  return $735220c2d4774dd3$export$7ed87b6bc2506470(time, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}

function $735220c2d4774dd3$export$d52ced6badfb9a4c(value, field, amount, options) {
  let mutable = value.copy();

  switch (field) {
    case 'era':
      {
        let eras = value.calendar.getEras();
        let eraIndex = eras.indexOf(value.era);
        if (eraIndex < 0) throw new Error('Invalid era: ' + value.era);
        eraIndex = $735220c2d4774dd3$var$cycleValue(eraIndex, amount, 0, eras.length - 1, options === null || options === void 0 ? void 0 : options.round);
        mutable.era = eras[eraIndex]; // Constrain the year and other fields within the era, so the era doesn't change when we balance below.

        $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
        break;
      }

    case 'year':
      if (mutable.calendar.getYearsToAdd) amount = mutable.calendar.getYearsToAdd(mutable, amount); // The year field should not cycle within the era as that can cause weird behavior affecting other fields.
      // We need to also allow values < 1 so that decrementing goes to the previous era. If we get -Infinity back
      // we know we wrapped around after reaching 9999 (the maximum), so set the year back to 1.

      mutable.year = $735220c2d4774dd3$var$cycleValue(value.year, amount, -Infinity, 9999, options === null || options === void 0 ? void 0 : options.round);
      if (mutable.year === -Infinity) mutable.year = 1;
      if (mutable.calendar.balanceYearMonth) mutable.calendar.balanceYearMonth(mutable, value);
      break;

    case 'month':
      mutable.month = $735220c2d4774dd3$var$cycleValue(value.month, amount, 1, value.calendar.getMonthsInYear(value), options === null || options === void 0 ? void 0 : options.round);
      break;

    case 'day':
      mutable.day = $735220c2d4774dd3$var$cycleValue(value.day, amount, 1, value.calendar.getDaysInMonth(value), options === null || options === void 0 ? void 0 : options.round);
      break;

    default:
      throw new Error('Unsupported field ' + field);
  }

  if (value.calendar.balanceDate) value.calendar.balanceDate(mutable);
  $735220c2d4774dd3$export$c4e2ecac49351ef2(mutable);
  return mutable;
}

function $735220c2d4774dd3$export$dd02b3e0007dfe28(value, field, amount, options) {
  let mutable = value.copy();

  switch (field) {
    case 'hour':
      {
        let hours = value.hour;
        let min = 0;
        let max = 23;

        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
          let isPM = hours >= 12;
          min = isPM ? 12 : 0;
          max = isPM ? 23 : 11;
        }

        mutable.hour = $735220c2d4774dd3$var$cycleValue(hours, amount, min, max, options === null || options === void 0 ? void 0 : options.round);
        break;
      }

    case 'minute':
      mutable.minute = $735220c2d4774dd3$var$cycleValue(value.minute, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
      break;

    case 'second':
      mutable.second = $735220c2d4774dd3$var$cycleValue(value.second, amount, 0, 59, options === null || options === void 0 ? void 0 : options.round);
      break;

    case 'millisecond':
      mutable.millisecond = $735220c2d4774dd3$var$cycleValue(value.millisecond, amount, 0, 999, options === null || options === void 0 ? void 0 : options.round);
      break;

    default:
      throw new Error('Unsupported field ' + field);
  }

  return mutable;
}

function $735220c2d4774dd3$var$cycleValue(value, amount, min, max, round = false) {
  if (round) {
    value += Math.sign(amount);
    if (value < min) value = max;
    let div = Math.abs(amount);
    if (amount > 0) value = Math.ceil(value / div) * div;else value = Math.floor(value / div) * div;
    if (value > max) value = min;
  } else {
    value += amount;
    if (value < min) value = max - (min - value - 1);else if (value > max) value = min + (value - max - 1);
  }

  return value;
}

function $735220c2d4774dd3$export$96b1d28349274637(dateTime, duration) {
  let ms;

  if (duration.years != null && duration.years !== 0 || duration.months != null && duration.months !== 0 || duration.days != null && duration.days !== 0) {
    let res = $735220c2d4774dd3$export$e16d8520af44a096($11d87f3f76e88657$export$b21e0b124e224484(dateTime), {
      years: duration.years,
      months: duration.months,
      days: duration.days
    }); // Changing the date may change the timezone offset, so we need to recompute
    // using the 'compatible' disambiguation.

    ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone);
  } else // Otherwise, preserve the offset of the original date.
    ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset; // Perform time manipulation in milliseconds rather than on the original time fields to account for DST.
  // For example, adding one hour during a DST transition may result in the hour field staying the same or
  // skipping an hour. This results in the offset field changing value instead of the specified field.


  ms += duration.milliseconds || 0;
  ms += (duration.seconds || 0) * 1000;
  ms += (duration.minutes || 0) * 60000;
  ms += (duration.hours || 0) * 3600000;
  let res = $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone);
  return $11d87f3f76e88657$export$b4a036af3fc0b032(res, dateTime.calendar);
}

function $735220c2d4774dd3$export$6814caac34ca03c7(dateTime, duration) {
  return $735220c2d4774dd3$export$96b1d28349274637(dateTime, $735220c2d4774dd3$export$3e2544e88a25bff8(duration));
}

function $735220c2d4774dd3$export$9a297d111fc86b79(dateTime, field, amount, options) {
  // For date fields, we want the time to remain consistent and the UTC offset to potentially change to account for DST changes.
  // For time fields, we want the time to change by the amount given. This may result in the hour field staying the same, but the UTC
  // offset changing in the case of a backward DST transition, or skipping an hour in the case of a forward DST transition.
  switch (field) {
    case 'hour':
      {
        let min = 0;
        let max = 23;

        if ((options === null || options === void 0 ? void 0 : options.hourCycle) === 12) {
          let isPM = dateTime.hour >= 12;
          min = isPM ? 12 : 0;
          max = isPM ? 23 : 11;
        } // The minimum and maximum hour may be affected by daylight saving time.
        // For example, it might jump forward at midnight, and skip 1am.
        // Or it might end at midnight and repeat the 11pm hour. To handle this, we get
        // the possible absolute times for the min and max, and find the maximum range
        // that is within the current day.


        let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);
        let minDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
          hour: min
        }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());
        let minAbsolute = [$11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, 'earlier'), $11d87f3f76e88657$export$5107c82f94518f5c(minDate, dateTime.timeZone, 'later')].filter(ms => $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === minDate.day)[0];
        let maxDate = $11d87f3f76e88657$export$b4a036af3fc0b032($735220c2d4774dd3$export$e5d5e1c1822b6e56(plainDateTime, {
          hour: max
        }), new $3b62074eb05584b2$export$80ee6245ec4f29ec());
        let maxAbsolute = [$11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, 'earlier'), $11d87f3f76e88657$export$5107c82f94518f5c(maxDate, dateTime.timeZone, 'later')].filter(ms => $11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone).day === maxDate.day).pop(); // Since hours may repeat, we need to operate on the absolute time in milliseconds.
        // This is done in hours from the Unix epoch so that cycleValue works correctly,
        // and then converted back to milliseconds.

        let ms1 = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime) - dateTime.offset;
        let hours = Math.floor(ms1 / $735220c2d4774dd3$var$ONE_HOUR);
        let remainder = ms1 % $735220c2d4774dd3$var$ONE_HOUR;
        ms1 = $735220c2d4774dd3$var$cycleValue(hours, amount, Math.floor(minAbsolute / $735220c2d4774dd3$var$ONE_HOUR), Math.floor(maxAbsolute / $735220c2d4774dd3$var$ONE_HOUR), options === null || options === void 0 ? void 0 : options.round) * $735220c2d4774dd3$var$ONE_HOUR + remainder; // Now compute the new timezone offset, and convert the absolute time back to local time.

        return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms1, dateTime.timeZone), dateTime.calendar);
      }

    case 'minute':
    case 'second':
    case 'millisecond':
      // @ts-ignore
      return $735220c2d4774dd3$export$dd02b3e0007dfe28(dateTime, field, amount, options);

    case 'era':
    case 'year':
    case 'month':
    case 'day':
      {
        let res = $735220c2d4774dd3$export$d52ced6badfb9a4c($11d87f3f76e88657$export$b21e0b124e224484(dateTime), field, amount, options);
        let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone);
        return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
      }

    default:
      throw new Error('Unsupported field ' + field);
  }
}

function $735220c2d4774dd3$export$31b5430eb18be4f8(dateTime, fields, disambiguation) {
  // Set the date/time fields, and recompute the UTC offset to account for DST changes.
  // We also need to validate by converting back to a local time in case hours are skipped during forward DST transitions.
  let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(dateTime);
  let res = $735220c2d4774dd3$export$e5d5e1c1822b6e56($735220c2d4774dd3$export$adaa4cf7ef1b65be(plainDateTime, fields), fields); // If the resulting plain date time values are equal, return the original time.
  // We don't want to change the offset when setting the time to the same value.

  if (res.compare(plainDateTime) === 0) return dateTime;
  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(res, dateTime.timeZone, disambiguation);
  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, dateTime.timeZone), dateTime.calendar);
}

const $fae977aafc393c5c$var$TIME_RE = /^(\d{2})(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?$/;
const $fae977aafc393c5c$var$DATE_RE = /^(\d{4})-(\d{2})-(\d{2})$/;
const $fae977aafc393c5c$var$DATE_TIME_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?$/;
const $fae977aafc393c5c$var$ZONED_DATE_TIME_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?(?:([+-]\d{2})(?::(\d{2}))?)?\[(.*?)\]$/;
const $fae977aafc393c5c$var$ABSOLUTE_RE = /^(\d{4})-(\d{2})-(\d{2})(?:T(\d{2}))?(?::(\d{2}))?(?::(\d{2}))?(\.\d+)?(?:(?:([+-]\d{2})(?::(\d{2}))?)|Z)$/;

function $fae977aafc393c5c$export$c9698ec7f05a07e1(value) {
  let m = value.match($fae977aafc393c5c$var$TIME_RE);
  if (!m) throw new Error('Invalid ISO 8601 time string: ' + value);
  return new $35ea8db9cb2ccb90$export$680ea196effce5f($fae977aafc393c5c$var$parseNumber(m[1], 0, 23), m[2] ? $fae977aafc393c5c$var$parseNumber(m[2], 0, 59) : 0, m[3] ? $fae977aafc393c5c$var$parseNumber(m[3], 0, 59) : 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, Infinity) * 1000 : 0);
}

function $fae977aafc393c5c$export$6b862160d295c8e(value) {
  let m = value.match($fae977aafc393c5c$var$DATE_RE);
  if (!m) throw new Error('Invalid ISO 8601 date string: ' + value);
  let date = new $35ea8db9cb2ccb90$export$99faa760c7908e4f($fae977aafc393c5c$var$parseNumber(m[1], 0, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1);
  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  return date;
}

function $fae977aafc393c5c$export$588937bcd60ade55(value) {
  let m = value.match($fae977aafc393c5c$var$DATE_TIME_RE);
  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);
  let date = new $35ea8db9cb2ccb90$export$ca871e8dbb80966f($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);
  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  return date;
}

function $fae977aafc393c5c$export$fd7893f06e92a6a4(value, disambiguation) {
  let m = value.match($fae977aafc393c5c$var$ZONED_DATE_TIME_RE);
  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);
  let date = new $35ea8db9cb2ccb90$export$d3b7288e7994edea($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, m[10], 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);
  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  let plainDateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);
  let ms;

  if (m[8]) {
    var ref;
    date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : '0', 0, 59) * 60000;
    ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset; // Validate offset against parsed date.

    let absolutes = $11d87f3f76e88657$export$136f38efe7caf549(plainDateTime, date.timeZone);
    if (!absolutes.includes(ms)) throw new Error(`Offset ${$fae977aafc393c5c$var$offsetToString(date.offset)} is invalid for ${$fae977aafc393c5c$export$4223de14708adc63(date)} in ${date.timeZone}`);
  } else // Convert to absolute and back to fix invalid times due to DST.
    ms = $11d87f3f76e88657$export$5107c82f94518f5c($11d87f3f76e88657$export$b21e0b124e224484(plainDateTime), date.timeZone, disambiguation);

  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, date.timeZone);
}

function $fae977aafc393c5c$export$5adfdab05168c219(value, timeZone) {
  let m = value.match($fae977aafc393c5c$var$ABSOLUTE_RE);
  if (!m) throw new Error('Invalid ISO 8601 date time string: ' + value);
  let date = new $35ea8db9cb2ccb90$export$d3b7288e7994edea($fae977aafc393c5c$var$parseNumber(m[1], 1, 9999), $fae977aafc393c5c$var$parseNumber(m[2], 1, 12), 1, timeZone, 0, m[4] ? $fae977aafc393c5c$var$parseNumber(m[4], 0, 23) : 0, m[5] ? $fae977aafc393c5c$var$parseNumber(m[5], 0, 59) : 0, m[6] ? $fae977aafc393c5c$var$parseNumber(m[6], 0, 59) : 0, m[7] ? $fae977aafc393c5c$var$parseNumber(m[7], 0, Infinity) * 1000 : 0);
  date.day = $fae977aafc393c5c$var$parseNumber(m[3], 0, date.calendar.getDaysInMonth(date));
  var ref;
  if (m[8]) date.offset = $fae977aafc393c5c$var$parseNumber(m[8], -23, 23) * 3600000 + $fae977aafc393c5c$var$parseNumber((ref = m[9]) !== null && ref !== void 0 ? ref : '0', 0, 59) * 60000;
  return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);
}

function $fae977aafc393c5c$export$8e384432362ed0f0(value) {
  return $fae977aafc393c5c$export$5adfdab05168c219(value, $14e0f24ef4ac5c92$export$aa8b41735afcabd2());
}

function $fae977aafc393c5c$var$parseNumber(value, min, max) {
  let val = Number(value);
  if (val < min || val > max) throw new RangeError(`Value out of range: ${min} <= ${val} <= ${max}`);
  return val;
}

function $fae977aafc393c5c$export$f59dee82248f5ad4(time) {
  return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}${time.millisecond ? String(time.millisecond / 1000).slice(1) : ''}`;
}

function $fae977aafc393c5c$export$60dfd74aa96791bd(date) {
  let gregorianDate = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new $3b62074eb05584b2$export$80ee6245ec4f29ec());
  return `${String(gregorianDate.year).padStart(4, '0')}-${String(gregorianDate.month).padStart(2, '0')}-${String(gregorianDate.day).padStart(2, '0')}`;
}

function $fae977aafc393c5c$export$4223de14708adc63(date) {
  // @ts-ignore
  return `${$fae977aafc393c5c$export$60dfd74aa96791bd(date)}T${$fae977aafc393c5c$export$f59dee82248f5ad4(date)}`;
}

function $fae977aafc393c5c$var$offsetToString(offset) {
  let sign = Math.sign(offset) < 0 ? '-' : '+';
  offset = Math.abs(offset);
  let offsetHours = Math.floor(offset / 3600000);
  let offsetMinutes = offset % 3600000 / 60000;
  return `${sign}${String(offsetHours).padStart(2, '0')}:${String(offsetMinutes).padStart(2, '0')}`;
}

function $fae977aafc393c5c$export$bf79f1ebf4b18792(date) {
  return `${$fae977aafc393c5c$export$4223de14708adc63(date)}${$fae977aafc393c5c$var$offsetToString(date.offset)}[${date.timeZone}]`;
}

function $35ea8db9cb2ccb90$var$shiftArgs(args) {
  let calendar = typeof args[0] === 'object' ? args.shift() : new $3b62074eb05584b2$export$80ee6245ec4f29ec();
  let era;
  if (typeof args[0] === 'string') era = args.shift();else {
    let eras = calendar.getEras();
    era = eras[eras.length - 1];
  }
  let year = args.shift();
  let month = args.shift();
  let day = args.shift();
  return [calendar, era, year, month, day];
}

class $35ea8db9cb2ccb90$export$99faa760c7908e4f {
  /** Returns a copy of this date. */
  copy() {
    if (this.era) return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.era, this.year, this.month, this.day);else return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this.calendar, this.year, this.month, this.day);
  }
  /** Returns a new `CalendarDate` with the given duration added to it. */


  add(duration) {
    return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);
  }
  /** Returns a new `CalendarDate` with the given duration subtracted from it. */


  subtract(duration) {
    return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);
  }
  /** Returns a new `CalendarDate` with the given fields set to the provided values. Other fields will be constrained accordingly. */


  set(fields) {
    return $735220c2d4774dd3$export$adaa4cf7ef1b65be(this, fields);
  }
  /**
  * Returns a new `CalendarDate` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */


  cycle(field, amount, options) {
    return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);
  }
  /** Converts the date to a native JavaScript Date object, with the time set to midnight in the given time zone. */


  toDate(timeZone) {
    return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone);
  }
  /** Converts the date to an ISO 8601 formatted string. */


  toString() {
    return $fae977aafc393c5c$export$60dfd74aa96791bd(this);
  }
  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */


  compare(b) {
    return $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b);
  }

  constructor(...args) {
    // This prevents TypeScript from allowing other types with the same fields to match.
    // i.e. a ZonedDateTime should not be be passable to a parameter that expects CalendarDate.
    // If that behavior is desired, use the AnyCalendarDate interface instead.
    module_type.set(this, {
      writable: true,
      value: void 0
    });

    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);
  }

}

var module_type = new WeakMap();

class $35ea8db9cb2ccb90$export$680ea196effce5f {
  /** Returns a copy of this time. */
  copy() {
    return new $35ea8db9cb2ccb90$export$680ea196effce5f(this.hour, this.minute, this.second, this.millisecond);
  }
  /** Returns a new `Time` with the given duration added to it. */


  add(duration) {
    return $735220c2d4774dd3$export$7ed87b6bc2506470(this, duration);
  }
  /** Returns a new `Time` with the given duration subtracted from it. */


  subtract(duration) {
    return $735220c2d4774dd3$export$fe34d3a381cd7501(this, duration);
  }
  /** Returns a new `Time` with the given fields set to the provided values. Other fields will be constrained accordingly. */


  set(fields) {
    return $735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields);
  }
  /**
  * Returns a new `Time` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */


  cycle(field, amount, options) {
    return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);
  }
  /** Converts the time to an ISO 8601 formatted string. */


  toString() {
    return $fae977aafc393c5c$export$f59dee82248f5ad4(this);
  }
  /** Compares this time with another. A negative result indicates that this time is before the given one, and a positive time indicates that it is after. */


  compare(b) {
    return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, b);
  }

  constructor(hour = 0, minute = 0, second = 0, millisecond = 0) {
    // This prevents TypeScript from allowing other types with the same fields to match.
    module_type1.set(this, {
      writable: true,
      value: void 0
    });

    this.hour = hour;
    this.minute = minute;
    this.second = second;
    this.millisecond = millisecond;
    $735220c2d4774dd3$export$7555de1e070510cb(this);
  }

}

var module_type1 = new WeakMap();

class $35ea8db9cb2ccb90$export$ca871e8dbb80966f {
  /** Returns a copy of this date. */
  copy() {
    if (this.era) return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.era, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$ca871e8dbb80966f(this.calendar, this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
  }
  /** Returns a new `CalendarDateTime` with the given duration added to it. */


  add(duration) {
    return $735220c2d4774dd3$export$e16d8520af44a096(this, duration);
  }
  /** Returns a new `CalendarDateTime` with the given duration subtracted from it. */


  subtract(duration) {
    return $735220c2d4774dd3$export$4e2d2ead65e5f7e3(this, duration);
  }
  /** Returns a new `CalendarDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */


  set(fields) {
    return $735220c2d4774dd3$export$adaa4cf7ef1b65be($735220c2d4774dd3$export$e5d5e1c1822b6e56(this, fields), fields);
  }
  /**
  * Returns a new `CalendarDateTime` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */


  cycle(field, amount, options) {
    switch (field) {
      case 'era':
      case 'year':
      case 'month':
      case 'day':
        return $735220c2d4774dd3$export$d52ced6badfb9a4c(this, field, amount, options);

      default:
        return $735220c2d4774dd3$export$dd02b3e0007dfe28(this, field, amount, options);
    }
  }
  /** Converts the date to a native JavaScript Date object in the given time zone. */


  toDate(timeZone, disambiguation) {
    return $11d87f3f76e88657$export$e67a095c620b86fe(this, timeZone, disambiguation);
  }
  /** Converts the date to an ISO 8601 formatted string. */


  toString() {
    return $fae977aafc393c5c$export$4223de14708adc63(this);
  }
  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */


  compare(b) {
    let res = $14e0f24ef4ac5c92$export$68781ddf31c0090f(this, b);
    if (res === 0) return $14e0f24ef4ac5c92$export$c19a80a9721b80f6(this, $11d87f3f76e88657$export$b21e0b124e224484(b));
    return res;
  }

  constructor(...args) {
    // This prevents TypeScript from allowing other types with the same fields to match.
    module_type2.set(this, {
      writable: true,
      value: void 0
    });

    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    this.hour = args.shift() || 0;
    this.minute = args.shift() || 0;
    this.second = args.shift() || 0;
    this.millisecond = args.shift() || 0;
    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);
  }

}

var module_type2 = new WeakMap();

class $35ea8db9cb2ccb90$export$d3b7288e7994edea {
  /** Returns a copy of this date. */
  copy() {
    if (this.era) return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.era, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);else return new $35ea8db9cb2ccb90$export$d3b7288e7994edea(this.calendar, this.year, this.month, this.day, this.timeZone, this.offset, this.hour, this.minute, this.second, this.millisecond);
  }
  /** Returns a new `ZonedDateTime` with the given duration added to it. */


  add(duration) {
    return $735220c2d4774dd3$export$96b1d28349274637(this, duration);
  }
  /** Returns a new `ZonedDateTime` with the given duration subtracted from it. */


  subtract(duration) {
    return $735220c2d4774dd3$export$6814caac34ca03c7(this, duration);
  }
  /** Returns a new `ZonedDateTime` with the given fields set to the provided values. Other fields will be constrained accordingly. */


  set(fields, disambiguation) {
    return $735220c2d4774dd3$export$31b5430eb18be4f8(this, fields, disambiguation);
  }
  /**
  * Returns a new `ZonedDateTime` with the given field adjusted by a specified amount.
  * When the resulting value reaches the limits of the field, it wraps around.
  */


  cycle(field, amount, options) {
    return $735220c2d4774dd3$export$9a297d111fc86b79(this, field, amount, options);
  }
  /** Converts the date to a native JavaScript Date object. */


  toDate() {
    return $11d87f3f76e88657$export$83aac07b4c37b25(this);
  }
  /** Converts the date to an ISO 8601 formatted string, including the UTC offset and time zone identifier. */


  toString() {
    return $fae977aafc393c5c$export$bf79f1ebf4b18792(this);
  }
  /** Converts the date to an ISO 8601 formatted string in UTC. */


  toAbsoluteString() {
    return this.toDate().toISOString();
  }
  /** Compares this date with another. A negative result indicates that this date is before the given one, and a positive date indicates that it is after. */


  compare(b) {
    // TODO: Is this a bad idea??
    return this.toDate().getTime() - $11d87f3f76e88657$export$84c95a83c799e074(b, this.timeZone).toDate().getTime();
  }

  constructor(...args) {
    // This prevents TypeScript from allowing other types with the same fields to match.
    module_type3.set(this, {
      writable: true,
      value: void 0
    });

    let [calendar, era, year, month, day] = $35ea8db9cb2ccb90$var$shiftArgs(args);
    let timeZone = args.shift();
    let offset = args.shift();
    this.calendar = calendar;
    this.era = era;
    this.year = year;
    this.month = month;
    this.day = day;
    this.timeZone = timeZone;
    this.offset = offset;
    this.hour = args.shift() || 0;
    this.minute = args.shift() || 0;
    this.second = args.shift() || 0;
    this.millisecond = args.shift() || 0;
    $735220c2d4774dd3$export$c4e2ecac49351ef2(this);
  }

}

var module_type3 = new WeakMap();

const $62225008020f0a13$var$ERA_START_DATES = (/* unused pure expression or super */ null && ([[1868, 9, 8], [1912, 7, 30], [1926, 12, 25], [1989, 1, 8], [2019, 5, 1]]));
const $62225008020f0a13$var$ERA_END_DATES = (/* unused pure expression or super */ null && ([[1912, 7, 29], [1926, 12, 24], [1989, 1, 7], [2019, 4, 30]]));
const $62225008020f0a13$var$ERA_ADDENDS = (/* unused pure expression or super */ null && ([1867, 1911, 1925, 1988, 2018]));
const $62225008020f0a13$var$ERA_NAMES = (/* unused pure expression or super */ null && (['meiji', 'taisho', 'showa', 'heisei', 'reiwa']));

function $62225008020f0a13$var$findEraFromGregorianDate(date) {
  const idx = $62225008020f0a13$var$ERA_START_DATES.findIndex(([year, month, day]) => {
    if (date.year < year) return true;
    if (date.year === year && date.month < month) return true;
    if (date.year === year && date.month === month && date.day < day) return true;
    return false;
  });
  if (idx === -1) return $62225008020f0a13$var$ERA_START_DATES.length - 1;
  if (idx === 0) return 0;
  return idx - 1;
}

function $62225008020f0a13$var$toGregorian(date) {
  let eraAddend = $62225008020f0a13$var$ERA_ADDENDS[$62225008020f0a13$var$ERA_NAMES.indexOf(date.era)];
  if (!eraAddend) throw new Error('Unknown era: ' + date.era);
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.year + eraAddend, date.month, date.day);
}

class $62225008020f0a13$export$b746ab2b60cdffbf extends (/* unused pure expression or super */ null && ($3b62074eb05584b2$export$80ee6245ec4f29ec)) {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    let era = $62225008020f0a13$var$findEraFromGregorianDate(date);
    date.era = $62225008020f0a13$var$ERA_NAMES[era];
    date.year -= $62225008020f0a13$var$ERA_ADDENDS[era];
    return date;
  }

  toJulianDay(date) {
    return super.toJulianDay($62225008020f0a13$var$toGregorian(date));
  }

  balanceDate(date) {
    let gregorianDate = $62225008020f0a13$var$toGregorian(date);
    let era = $62225008020f0a13$var$findEraFromGregorianDate(gregorianDate);

    if ($62225008020f0a13$var$ERA_NAMES[era] !== date.era) {
      date.era = $62225008020f0a13$var$ERA_NAMES[era];
      date.year = gregorianDate.year - $62225008020f0a13$var$ERA_ADDENDS[era];
    }
  }

  constrainDate(date) {
    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
    let end = $62225008020f0a13$var$ERA_END_DATES[idx];

    if (end != null) {
      let [endYear, endMonth, endDay] = end; // Constrain the year to the maximum possible value in the era.
      // Then constrain the month and day fields within that.

      let maxYear = endYear - $62225008020f0a13$var$ERA_ADDENDS[idx];
      date.year = Math.min(maxYear, date.year);

      if (date.year === maxYear) {
        date.month = Math.min(endMonth, date.month);
        if (date.month === endMonth) date.day = Math.min(endDay, date.day);
      }

      if (date.year === 1) {
        let [, startMonth, startDay] = $62225008020f0a13$var$ERA_START_DATES[idx];
        date.month = Math.max(startMonth, date.month);
        if (date.month === startMonth) date.day = Math.max(startDay, date.day);
      }
    }
  }

  getEras() {
    return $62225008020f0a13$var$ERA_NAMES;
  }

  getYearsInEra(date) {
    // Get the number of years in the era, taking into account the date's month and day fields.
    let era = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
    let next = $62225008020f0a13$var$ERA_START_DATES[era + 1];
    if (next == null) return 9999;
    let cur = $62225008020f0a13$var$ERA_START_DATES[era];
    let years = next[0] - cur[0];
    if (date.month < next[1] || date.month === next[1] && date.day < next[2]) years++;
    return years;
  }

  getDaysInMonth(date) {
    return super.getDaysInMonth($62225008020f0a13$var$toGregorian(date));
  }

  getMinimumMonthInYear(date) {
    let start = $62225008020f0a13$var$getMinimums(date);
    return start ? start[1] : 1;
  }

  getMinimumDayInMonth(date) {
    let start = $62225008020f0a13$var$getMinimums(date);
    return start && date.month === start[1] ? start[2] : 1;
  }

  constructor(...args) {
    super(...args);
    this.identifier = 'japanese';
  }

}

function $62225008020f0a13$var$getMinimums(date) {
  if (date.year === 1) {
    let idx = $62225008020f0a13$var$ERA_NAMES.indexOf(date.era);
    return $62225008020f0a13$var$ERA_START_DATES[idx];
  }
}

const $8d73d47422ca7302$var$BUDDHIST_ERA_START = (/* unused pure expression or super */ null && (-543));

class $8d73d47422ca7302$export$42d20a78301dee44 extends (/* unused pure expression or super */ null && ($3b62074eb05584b2$export$80ee6245ec4f29ec)) {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    date.year -= $8d73d47422ca7302$var$BUDDHIST_ERA_START;
    return date;
  }

  toJulianDay(date) {
    return super.toJulianDay($8d73d47422ca7302$var$toGregorian(date));
  }

  getEras() {
    return ['BE'];
  }

  getDaysInMonth(date) {
    return super.getDaysInMonth($8d73d47422ca7302$var$toGregorian(date));
  }

  constructor(...args) {
    super(...args);
    this.identifier = 'buddhist';
  }

}

function $8d73d47422ca7302$var$toGregorian(date) {
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(date.year + $8d73d47422ca7302$var$BUDDHIST_ERA_START, date.month, date.day);
}

const $5f31bd6f0c8940b2$var$TAIWAN_ERA_START = 1911;

function $5f31bd6f0c8940b2$var$gregorianYear(date) {
  return date.era === 'minguo' ? date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START : 1 - date.year + $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;
}

function $5f31bd6f0c8940b2$var$gregorianToTaiwan(year, date) {
  let y = year - $5f31bd6f0c8940b2$var$TAIWAN_ERA_START;

  if (y > 0) {
    date.era = 'minguo';
    date.year = y;
  } else {
    date.era = 'before_minguo';
    date.year = 1 - y;
  }
}

class $5f31bd6f0c8940b2$export$65e01080afcb0799 extends (/* unused pure expression or super */ null && ($3b62074eb05584b2$export$80ee6245ec4f29ec)) {
  fromJulianDay(jd) {
    let date = super.fromJulianDay(jd);
    $5f31bd6f0c8940b2$var$gregorianToTaiwan(date.year, date);
    return date;
  }

  toJulianDay(date) {
    return super.toJulianDay($5f31bd6f0c8940b2$var$toGregorian(date));
  }

  getEras() {
    return ['before_minguo', 'minguo'];
  }

  balanceDate(date) {
    $5f31bd6f0c8940b2$var$gregorianToTaiwan($5f31bd6f0c8940b2$var$gregorianYear(date), date);
  }

  getYearsToAdd(date, years) {
    return date.era === 'before_minguo' ? -years : years;
  }

  getDaysInMonth(date) {
    return super.getDaysInMonth($5f31bd6f0c8940b2$var$toGregorian(date));
  }

  constructor(...args) {
    super(...args);
    this.identifier // Republic of China
    = 'roc';
  }

}

function $5f31bd6f0c8940b2$var$toGregorian(date) {
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f($5f31bd6f0c8940b2$var$gregorianYear(date), date.month, date.day);
}

const $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948321; // 622/03/19 Julian C.E.

function $f3ed2e4472ae7e25$var$isLeapYear(year) {
  let y0 = year > 0 ? year - 474 : year - 473;
  let y1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(y0, 2820) + 474;
  return $2b4dce13dd5a17fa$export$842a2cf37af977e1((y1 + 38) * 31, 128) < 31;
}

function $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, day) {
  let y0 = year > 0 ? year - 474 : year - 473;
  let y1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(y0, 2820) + 474;
  let offset = month <= 7 ? 31 * (month - 1) : 30 * (month - 1) + 6;
  return $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 1029983 * Math.floor(y0 / 2820) + 365 * (y1 - 1) + Math.floor((31 * y1 - 5) / 128) + offset + day;
}

class $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {
  fromJulianDay(jd) {
    let d0 = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(475, 1, 1);
    let n2820 = Math.floor(d0 / 1029983);
    let d1 = $2b4dce13dd5a17fa$export$842a2cf37af977e1(d0, 1029983);
    let y2820 = d1 === 1029982 ? 2820 : Math.floor((128 * d1 + 46878) / 46751);
    let year = 474 + 2820 * n2820 + y2820;
    if (year <= 0) year--;
    let yDay = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, 1, 1) + 1;
    let month = yDay <= 186 ? Math.ceil(yDay / 31) : Math.ceil((yDay - 6) / 31);
    let day = jd - $f3ed2e4472ae7e25$var$persianToJulianDay(year, month, 1) + 1;
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year, month, day);
  }

  toJulianDay(date) {
    return $f3ed2e4472ae7e25$var$persianToJulianDay(date.year, date.month, date.day);
  }

  getMonthsInYear() {
    return 12;
  }

  getDaysInMonth(date) {
    if (date.month <= 6) return 31;
    if (date.month <= 11) return 30;
    return $f3ed2e4472ae7e25$var$isLeapYear(date.year) ? 30 : 29;
  }

  getEras() {
    return ['AP'];
  }

  getYearsInEra() {
    return 9999;
  }

  constructor() {
    this.identifier = 'persian';
  }

} // Starts in 78 AD,


const $82c358003bdda0a8$var$INDIAN_ERA_START = 78; // The Indian year starts 80 days later than the Gregorian year.

const $82c358003bdda0a8$var$INDIAN_YEAR_START = 80;

class $82c358003bdda0a8$export$39f31c639fa15726 extends (/* unused pure expression or super */ null && ($3b62074eb05584b2$export$80ee6245ec4f29ec)) {
  fromJulianDay(jd) {
    // Gregorian date for Julian day
    let date = super.fromJulianDay(jd); // Year in Saka era

    let indianYear = date.year - $82c358003bdda0a8$var$INDIAN_ERA_START; // Day number in Gregorian year (starting from 0)

    let yDay = jd - $3b62074eb05584b2$export$f297eb839006d339(date.year, 1, 1);
    let leapMonth;

    if (yDay < $82c358003bdda0a8$var$INDIAN_YEAR_START) {
      //  Day is at the end of the preceding Saka year
      indianYear--; // Days in leapMonth this year, previous Gregorian year

      leapMonth = $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year - 1) ? 31 : 30;
      yDay += leapMonth + 155 + 90 + 10;
    } else {
      // Days in leapMonth this year
      leapMonth = $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year) ? 31 : 30;
      yDay -= $82c358003bdda0a8$var$INDIAN_YEAR_START;
    }

    let indianMonth;
    let indianDay;

    if (yDay < leapMonth) {
      indianMonth = 1;
      indianDay = yDay + 1;
    } else {
      let mDay = yDay - leapMonth;

      if (mDay < 155) {
        indianMonth = Math.floor(mDay / 31) + 2;
        indianDay = mDay % 31 + 1;
      } else {
        mDay -= 155;
        indianMonth = Math.floor(mDay / 30) + 7;
        indianDay = mDay % 30 + 1;
      }
    }

    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, indianYear, indianMonth, indianDay);
  }

  toJulianDay(date) {
    let year = date.year + $82c358003bdda0a8$var$INDIAN_ERA_START;
    let leapMonth;
    let jd;

    if ($3b62074eb05584b2$export$553d7fa8e3805fc0(year)) {
      leapMonth = 31;
      jd = $3b62074eb05584b2$export$f297eb839006d339(year, 3, 21);
    } else {
      leapMonth = 30;
      jd = $3b62074eb05584b2$export$f297eb839006d339(year, 3, 22);
    }

    if (date.month === 1) return jd + date.day - 1;
    jd += leapMonth + Math.min(date.month - 2, 5) * 31;
    if (date.month >= 8) jd += (date.month - 7) * 30;
    jd += date.day - 1;
    return jd;
  }

  getDaysInMonth(date) {
    if (date.month === 1 && $3b62074eb05584b2$export$553d7fa8e3805fc0(date.year + $82c358003bdda0a8$var$INDIAN_ERA_START)) return 31;
    if (date.month >= 2 && date.month <= 6) return 31;
    return 30;
  }

  getYearsInEra() {
    return 9999;
  }

  getEras() {
    return ['saka'];
  }

  constructor(...args) {
    super(...args);
    this.identifier = 'indian';
  }

}

const $f2f3e0e3a817edbd$var$CIVIL_EPOC = 1948440; // CE 622 July 16 Friday (Julian calendar) / CE 622 July 19 (Gregorian calendar)

const $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC = 1948439; // CE 622 July 15 Thursday (Julian calendar)

const $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START = 1300;
const $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END = 1600;
const $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS = 460322;

function $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, day) {
  return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 + Math.floor((3 + 11 * year) / 30) + epoch - 1;
}

function $f2f3e0e3a817edbd$var$julianDayToIslamic(calendar, epoch, jd) {
  let year = Math.floor((30 * (jd - epoch) + 10646) / 10631);
  let month = Math.min(12, Math.ceil((jd - (29 + $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, 1, 1))) / 29.5) + 1);
  let day = jd - $f2f3e0e3a817edbd$var$islamicToJulianDay(epoch, year, month, 1) + 1;
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(calendar, year, month, day);
}

function $f2f3e0e3a817edbd$var$isLeapYear(year) {
  return (14 + 11 * year) % 30 < 11;
}

class $f2f3e0e3a817edbd$export$2066795aadd37bfc {
  fromJulianDay(jd) {
    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$CIVIL_EPOC, jd);
  }

  toJulianDay(date) {
    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$CIVIL_EPOC, date.year, date.month, date.day);
  }

  getDaysInMonth(date) {
    let length = 29 + date.month % 2;
    if (date.month === 12 && $f2f3e0e3a817edbd$var$isLeapYear(date.year)) length++;
    return length;
  }

  getMonthsInYear() {
    return 12;
  }

  getDaysInYear(date) {
    return $f2f3e0e3a817edbd$var$isLeapYear(date.year) ? 355 : 354;
  }

  getYearsInEra() {
    return 9999;
  }

  getEras() {
    return ['AH'];
  }

  constructor() {
    this.identifier = 'islamic-civil';
  }

}

class $f2f3e0e3a817edbd$export$37f0887f2f9d22f7 extends (/* unused pure expression or super */ null && ($f2f3e0e3a817edbd$export$2066795aadd37bfc)) {
  fromJulianDay(jd) {
    return $f2f3e0e3a817edbd$var$julianDayToIslamic(this, $f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, jd);
  }

  toJulianDay(date) {
    return $f2f3e0e3a817edbd$var$islamicToJulianDay($f2f3e0e3a817edbd$var$ASTRONOMICAL_EPOC, date.year, date.month, date.day);
  }

  constructor(...args) {
    super(...args);
    this.identifier = 'islamic-tbla';
  }

} // Generated by scripts/generate-umalqura.js


const $f2f3e0e3a817edbd$var$UMALQURA_DATA = 'qgpUDckO1AbqBmwDrQpVBakGkgepC9QF2gpcBS0NlQZKB1QLagutBa4ETwoXBYsGpQbVCtYCWwmdBE0KJg2VDawFtgm6AlsKKwWVCsoG6Qr0AnYJtgJWCcoKpAvSC9kF3AJtCU0FpQpSC6ULtAW2CVcFlwJLBaMGUgdlC2oFqworBZUMSg2lDcoF1gpXCasESwmlClILagt1BXYCtwhbBFUFqQW0BdoJ3QRuAjYJqgpUDbIN1QXaAlsJqwRVCkkLZAtxC7QFtQpVCiUNkg7JDtQG6QprCasEkwpJDaQNsg25CroEWworBZUKKgtVC1wFvQQ9Ah0JlQpKC1oLbQW2AjsJmwRVBqkGVAdqC2wFrQpVBSkLkgupC9QF2gpaBasKlQVJB2QHqgu1BbYCVgpNDiULUgtqC60FrgIvCZcESwalBqwG1gpdBZ0ETQoWDZUNqgW1BdoCWwmtBJUFygbkBuoK9QS2AlYJqgpUC9IL2QXqAm0JrQSVCkoLpQuyBbUJ1gSXCkcFkwZJB1ULagVrCisFiwpGDaMNygXWCtsEawJLCaUKUgtpC3UFdgG3CFsCKwVlBbQF2gntBG0BtgimClINqQ3UBdoKWwmrBFMGKQdiB6kLsgW1ClUFJQuSDckO0gbpCmsFqwRVCikNVA2qDbUJugQ7CpsETQqqCtUK2gJdCV4ELgqaDFUNsga5BroEXQotBZUKUguoC7QLuQXaAloJSgukDdEO6AZqC20FNQWVBkoNqA3UDdoGWwWdAisGFQtKC5ULqgWuCi4JjwwnBZUGqgbWCl0FnQI=';
let $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH;
let $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE;

function $f2f3e0e3a817edbd$var$umalquraYearStart(year) {
  return $f2f3e0e3a817edbd$var$UMALQURA_START_DAYS + $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];
}

function $f2f3e0e3a817edbd$var$umalquraMonthLength(year, month) {
  let idx = year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START;
  let mask = 1 << 11 - (month - 1);
  if (($f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH[idx] & mask) === 0) return 29;else return 30;
}

function $f2f3e0e3a817edbd$var$umalquraMonthStart(year, month) {
  let day = $f2f3e0e3a817edbd$var$umalquraYearStart(year);

  for (let i = 1; i < month; i++) day += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);

  return day;
}

function $f2f3e0e3a817edbd$var$umalquraYearLength(year) {
  return $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year + 1 - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START];
}

class $f2f3e0e3a817edbd$export$5baab4758c231076 extends (/* unused pure expression or super */ null && ($f2f3e0e3a817edbd$export$2066795aadd37bfc)) {
  fromJulianDay(jd) {
    let days = jd - $f2f3e0e3a817edbd$var$CIVIL_EPOC;
    let startDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_START);
    let endDays = $f2f3e0e3a817edbd$var$umalquraYearStart($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END);
    if (days < startDays || days > endDays) return super.fromJulianDay(jd);else {
      let y = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START - 1;
      let m = 1;
      let d = 1;

      while (d > 0) {
        y++;
        d = days - $f2f3e0e3a817edbd$var$umalquraYearStart(y) + 1;
        let yearLength = $f2f3e0e3a817edbd$var$umalquraYearLength(y);

        if (d === yearLength) {
          m = 12;
          break;
        } else if (d < yearLength) {
          let monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);
          m = 1;

          while (d > monthLength) {
            d -= monthLength;
            m++;
            monthLength = $f2f3e0e3a817edbd$var$umalquraMonthLength(y, m);
          }

          break;
        }
      }

      return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, y, m, days - $f2f3e0e3a817edbd$var$umalquraMonthStart(y, m) + 1);
    }
  }

  toJulianDay(date) {
    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.toJulianDay(date);
    return $f2f3e0e3a817edbd$var$CIVIL_EPOC + $f2f3e0e3a817edbd$var$umalquraMonthStart(date.year, date.month) + (date.day - 1);
  }

  getDaysInMonth(date) {
    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInMonth(date);
    return $f2f3e0e3a817edbd$var$umalquraMonthLength(date.year, date.month);
  }

  getDaysInYear(date) {
    if (date.year < $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START || date.year > $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END) return super.getDaysInYear(date);
    return $f2f3e0e3a817edbd$var$umalquraYearLength(date.year);
  }

  constructor() {
    super();
    this.identifier = 'islamic-umalqura';
    if (!$f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH) $f2f3e0e3a817edbd$var$UMALQURA_MONTHLENGTH = new Uint16Array(Uint8Array.from(atob($f2f3e0e3a817edbd$var$UMALQURA_DATA), c => c.charCodeAt(0)).buffer);

    if (!$f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE) {
      $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE = new Uint32Array($f2f3e0e3a817edbd$var$UMALQURA_YEAR_END - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START + 1);
      let yearStart = 0;

      for (let year = $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START; year <= $f2f3e0e3a817edbd$var$UMALQURA_YEAR_END; year++) {
        $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START_TABLE[year - $f2f3e0e3a817edbd$var$UMALQURA_YEAR_START] = yearStart;

        for (let i = 1; i <= 12; i++) yearStart += $f2f3e0e3a817edbd$var$umalquraMonthLength(year, i);
      }
    }
  }

}

const $7c5f6fbf42389787$var$HEBREW_EPOCH = 347997; // Hebrew date calculations are performed in terms of days, hours, and
// "parts" (or halakim), which are 1/1080 of an hour, or 3 1/3 seconds.

const $7c5f6fbf42389787$var$HOUR_PARTS = 1080;
const $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS; // An approximate value for the length of a lunar month.
// It is used to calculate the approximate year and month of a given
// absolute date.

const $7c5f6fbf42389787$var$MONTH_DAYS = 29;
const $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;
const $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;

function $7c5f6fbf42389787$var$isLeapYear(year) {
  return $2b4dce13dd5a17fa$export$842a2cf37af977e1(year * 7 + 1, 19) < 7;
} // Test for delay of start of new year and to avoid
// Sunday, Wednesday, and Friday as start of the new year.


function $7c5f6fbf42389787$var$hebrewDelay1(year) {
  let months = Math.floor((235 * year - 234) / 19);
  let parts = 12084 + 13753 * months;
  let day = months * 29 + Math.floor(parts / 25920);
  if ($2b4dce13dd5a17fa$export$842a2cf37af977e1(3 * (day + 1), 7) < 3) day += 1;
  return day;
} // Check for delay in start of new year due to length of adjacent years


function $7c5f6fbf42389787$var$hebrewDelay2(year) {
  let last = $7c5f6fbf42389787$var$hebrewDelay1(year - 1);
  let present = $7c5f6fbf42389787$var$hebrewDelay1(year);
  let next = $7c5f6fbf42389787$var$hebrewDelay1(year + 1);
  if (next - present === 356) return 2;
  if (present - last === 382) return 1;
  return 0;
}

function $7c5f6fbf42389787$var$startOfYear(year) {
  return $7c5f6fbf42389787$var$hebrewDelay1(year) + $7c5f6fbf42389787$var$hebrewDelay2(year);
}

function $7c5f6fbf42389787$var$getDaysInYear(year) {
  return $7c5f6fbf42389787$var$startOfYear(year + 1) - $7c5f6fbf42389787$var$startOfYear(year);
}

function $7c5f6fbf42389787$var$getYearType(year) {
  let yearLength = $7c5f6fbf42389787$var$getDaysInYear(year);
  if (yearLength > 380) yearLength -= 30; // Subtract length of leap month.

  switch (yearLength) {
    case 353:
      return 0;
    // deficient

    case 354:
      return 1;
    // normal

    case 355:
      return 2;
    // complete
  }
}

function $7c5f6fbf42389787$var$getDaysInMonth(year, month) {
  // Normalize month numbers from 1 - 13, even on non-leap years
  if (month >= 6 && !$7c5f6fbf42389787$var$isLeapYear(year)) month++; // First of all, dispose of fixed-length 29 day months

  if (month === 4 || month === 7 || month === 9 || month === 11 || month === 13) return 29;
  let yearType = $7c5f6fbf42389787$var$getYearType(year); // If it's Heshvan, days depend on length of year

  if (month === 2) return yearType === 2 ? 30 : 29; // Similarly, Kislev varies with the length of year

  if (month === 3) return yearType === 0 ? 29 : 30; // Adar I only exists in leap years

  if (month === 6) return $7c5f6fbf42389787$var$isLeapYear(year) ? 30 : 0;
  return 30;
}

class $7c5f6fbf42389787$export$ca405048b8fb5af {
  fromJulianDay(jd) {
    let d = jd - $7c5f6fbf42389787$var$HEBREW_EPOCH;
    let m = d * $7c5f6fbf42389787$var$DAY_PARTS / $7c5f6fbf42389787$var$MONTH_PARTS; // Months (approx)

    let year = Math.floor((19 * m + 234) / 235) + 1; // Years (approx)

    let ys = $7c5f6fbf42389787$var$startOfYear(year); // 1st day of year

    let dayOfYear = Math.floor(d - ys); // Because of the postponement rules, it's possible to guess wrong.  Fix it.

    while (dayOfYear < 1) {
      year--;
      ys = $7c5f6fbf42389787$var$startOfYear(year);
      dayOfYear = Math.floor(d - ys);
    } // Now figure out which month we're in, and the date within that month


    let month = 1;
    let monthStart = 0;

    while (monthStart < dayOfYear) {
      monthStart += $7c5f6fbf42389787$var$getDaysInMonth(year, month);
      month++;
    }

    month--;
    monthStart -= $7c5f6fbf42389787$var$getDaysInMonth(year, month);
    let day = dayOfYear - monthStart;
    return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(this, year, month, day);
  }

  toJulianDay(date) {
    let jd = $7c5f6fbf42389787$var$startOfYear(date.year);

    for (let month = 1; month < date.month; month++) jd += $7c5f6fbf42389787$var$getDaysInMonth(date.year, month);

    return jd + date.day + $7c5f6fbf42389787$var$HEBREW_EPOCH;
  }

  getDaysInMonth(date) {
    return $7c5f6fbf42389787$var$getDaysInMonth(date.year, date.month);
  }

  getMonthsInYear(date) {
    return $7c5f6fbf42389787$var$isLeapYear(date.year) ? 13 : 12;
  }

  getDaysInYear(date) {
    return $7c5f6fbf42389787$var$getDaysInYear(date.year);
  }

  getYearsInEra() {
    return 9999;
  }

  getEras() {
    return ['AM'];
  }

  balanceYearMonth(date, previousDate) {
    // Keep date in the same month when switching between leap years and non leap years
    if (previousDate.year !== date.year) {
      if ($7c5f6fbf42389787$var$isLeapYear(previousDate.year) && !$7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month--;else if (!$7c5f6fbf42389787$var$isLeapYear(previousDate.year) && $7c5f6fbf42389787$var$isLeapYear(date.year) && previousDate.month > 6) date.month++;
    }
  }

  constructor() {
    this.identifier = 'hebrew';
  }

}

const $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH = 1723856;
const $b956b2d7a6cf451f$var$COPTIC_EPOCH = 1824665; // The delta between Amete Alem 1 and Amete Mihret 1
// AA 5501 = AM 1

const $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA = 5500;

function $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, day) {
  return epoch // difference from Julian epoch to 1,1,1
  + 365 * year // number of days from years
  + Math.floor(year / 4) // extra day of leap year
  + 30 * (month - 1) // number of days from months (1 based)
  + day - 1 // number of days for present month (1 based)
  ;
}

function $b956b2d7a6cf451f$var$julianDayToCE(calendar, epoch, jd) {
  let year = Math.floor(4 * (jd - epoch) / 1461);
  let month = 1 + Math.floor((jd - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, 1, 1)) / 30);
  let day = jd + 1 - $b956b2d7a6cf451f$var$ceToJulianDay(epoch, year, month, 1);
  return new $35ea8db9cb2ccb90$export$99faa760c7908e4f(calendar, year, month, day);
}

function $b956b2d7a6cf451f$var$getLeapDay(year) {
  return Math.floor(year % 4 / 3);
}

function $b956b2d7a6cf451f$var$getDaysInMonth(year, month) {
  // The Ethiopian and Coptic calendars have 13 months, 12 of 30 days each and
  // an intercalary month at the end of the year of 5 or 6 days, depending whether
  // the year is a leap year or not. The Leap Year follows the same rules as the
  // Julian Calendar so that the extra month always has six days in the year before
  // a Julian Leap Year.
  if (month % 13 !== 0) // not intercalary month
    return 30;else // intercalary month 5 days + possible leap day
    return $b956b2d7a6cf451f$var$getLeapDay(year) + 5;
}

class $b956b2d7a6cf451f$export$26ba6eab5e20cd7d {
  fromJulianDay(jd) {
    let date = $b956b2d7a6cf451f$var$julianDayToCE(this, $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);
    if (date.year > 0) date.era = 'AM';else {
      date.era = 'AA';
      date.year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
    }
    return date;
  }

  toJulianDay(date) {
    let year = date.year;
    if (date.era === 'AA') year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, year, date.month, date.day);
  }

  getDaysInMonth(date) {
    let year = date.year;
    if (date.era === 'AA') year -= $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);
  }

  getMonthsInYear() {
    return 13;
  }

  getDaysInYear(date) {
    return 365 + $b956b2d7a6cf451f$var$getLeapDay(date.year);
  }

  getYearsInEra() {
    return 9999;
  }

  getEras() {
    return ['AA', 'AM'];
  }

  constructor() {
    this.identifier = 'ethiopic';
  }

}

class $b956b2d7a6cf451f$export$d72e0c37005a4914 extends (/* unused pure expression or super */ null && ($b956b2d7a6cf451f$export$26ba6eab5e20cd7d)) {
  fromJulianDay(jd) {
    let date = $b956b2d7a6cf451f$var$julianDayToCE(this, $b956b2d7a6cf451f$var$ETHIOPIC_EPOCH, jd);
    date.era = 'AA';
    date.year += $b956b2d7a6cf451f$var$AMETE_MIHRET_DELTA;
    return date;
  }

  getEras() {
    return ['AA'];
  }

  constructor(...args) {
    super(...args);
    this.identifier // also known as 'ethiopic-amete-alem' in ICU
    = 'ethioaa';
  }

}

class $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1 extends (/* unused pure expression or super */ null && ($b956b2d7a6cf451f$export$26ba6eab5e20cd7d)) {
  fromJulianDay(jd) {
    let date = $b956b2d7a6cf451f$var$julianDayToCE(this, $b956b2d7a6cf451f$var$COPTIC_EPOCH, jd);

    if (date.year <= 0) {
      date.era = 'BCE';
      date.year = 1 - date.year;
    } else date.era = 'CE';

    return date;
  }

  toJulianDay(date) {
    let year = date.year;
    if (date.era === 'BCE') year = 1 - year;
    return $b956b2d7a6cf451f$var$ceToJulianDay($b956b2d7a6cf451f$var$COPTIC_EPOCH, year, date.month, date.day);
  }

  getDaysInMonth(date) {
    let year = date.year;
    if (date.era === 'BCE') year = 1 - year;
    return $b956b2d7a6cf451f$var$getDaysInMonth(year, date.month);
  }

  getYearsToAdd(date, years) {
    return date.era === 'BCE' ? -years : years;
  }

  getEras() {
    return ['BCE', 'CE'];
  }

  constructor(...args) {
    super(...args);
    this.identifier = 'coptic';
  }

}

function $64244302c3013299$export$dd0bbc9b26defe37(name) {
  switch (name) {
    case 'buddhist':
      return new $8d73d47422ca7302$export$42d20a78301dee44();

    case 'ethiopic':
      return new $b956b2d7a6cf451f$export$26ba6eab5e20cd7d();

    case 'ethioaa':
      return new $b956b2d7a6cf451f$export$d72e0c37005a4914();

    case 'coptic':
      return new $b956b2d7a6cf451f$export$fe6243cbe1a4b7c1();

    case 'hebrew':
      return new $7c5f6fbf42389787$export$ca405048b8fb5af();

    case 'indian':
      return new $82c358003bdda0a8$export$39f31c639fa15726();

    case 'islamic-civil':
      return new $f2f3e0e3a817edbd$export$2066795aadd37bfc();

    case 'islamic-tbla':
      return new $f2f3e0e3a817edbd$export$37f0887f2f9d22f7();

    case 'islamic-umalqura':
      return new $f2f3e0e3a817edbd$export$5baab4758c231076();

    case 'japanese':
      return new $62225008020f0a13$export$b746ab2b60cdffbf();

    case 'persian':
      return new $f3ed2e4472ae7e25$export$37fccdbfd14c5939();

    case 'roc':
      return new $5f31bd6f0c8940b2$export$65e01080afcb0799();

    case 'gregory':
    default:
      return new $3b62074eb05584b2$export$80ee6245ec4f29ec();
  }
}

var $484f90c8d1b5efb9$exports = {};
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

let $fb18d541ea1ad717$var$formatterCache = new Map();

class $fb18d541ea1ad717$export$ad991b66133851cf {
  /** Formats a date as a string according to the locale and format options passed to the constructor. */
  format(value) {
    return this.formatter.format(value);
  }
  /** Formats a date to an array of parts such as separators, numbers, punctuation, and more. */


  formatToParts(value) {
    return this.formatter.formatToParts(value);
  }
  /** Formats a date range as a string. */


  formatRange(start, end) {
    // @ts-ignore
    if (typeof this.formatter.formatRange === 'function') // @ts-ignore
      return this.formatter.formatRange(start, end);
    if (end < start) throw new RangeError('End date must be >= start date'); // Very basic fallback for old browsers.

    return `${this.formatter.format(start)} – ${this.formatter.format(end)}`;
  }
  /** Formats a date range as an array of parts. */


  formatRangeToParts(start, end) {
    // @ts-ignore
    if (typeof this.formatter.formatRangeToParts === 'function') // @ts-ignore
      return this.formatter.formatRangeToParts(start, end);
    if (end < start) throw new RangeError('End date must be >= start date');
    let startParts = this.formatter.formatToParts(start);
    let endParts = this.formatter.formatToParts(end);
    return [...startParts.map(p => ({ ...p,
      source: 'startRange'
    })), {
      type: 'literal',
      value: ' – ',
      source: 'shared'
    }, ...endParts.map(p => ({ ...p,
      source: 'endRange'
    }))];
  }
  /** Returns the resolved formatting options based on the values passed to the constructor. */


  resolvedOptions() {
    let resolvedOptions = this.formatter.resolvedOptions();

    if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {
      if (!this.resolvedHourCycle) this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
      resolvedOptions.hourCycle = this.resolvedHourCycle;
      resolvedOptions.hour12 = this.resolvedHourCycle === 'h11' || this.resolvedHourCycle === 'h12';
    }

    return resolvedOptions;
  }

  constructor(locale, options = {}) {
    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);
    this.options = options;
  }

} // There are multiple bugs involving the hour12 and hourCycle options in various browser engines.
//   - Chrome [1] (and the ECMA 402 spec [2]) resolve hour12: false in English and other locales to h24 (24:00 - 23:59)
//     rather than h23 (00:00 - 23:59). Same can happen with hour12: true in French, which Chrome resolves to h11 (00:00 - 11:59)
//     rather than h12 (12:00 - 11:59).
//   - WebKit returns an incorrect hourCycle resolved option in the French locale due to incorrect parsing of 'h' literal
//     in the resolved pattern. It also formats incorrectly when specifying the hourCycle option for the same reason. [3]
// [1] https://bugs.chromium.org/p/chromium/issues/detail?id=1045791
// [2] https://github.com/tc39/ecma402/issues/402
// [3] https://bugs.webkit.org/show_bug.cgi?id=229313
// https://github.com/unicode-org/cldr/blob/018b55eff7ceb389c7e3fc44e2f657eae3b10b38/common/supplemental/supplementalData.xml#L4774-L4802


const $fb18d541ea1ad717$var$hour12Preferences = {
  true: {
    // Only Japanese uses the h11 style for 12 hour time. All others use h12.
    ja: 'h11'
  },
  false: {}
};

function $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options = {}) {
  // Work around buggy hour12 behavior in Chrome / ECMA 402 spec by using hourCycle instead.
  // Only apply the workaround if the issue is detected, because the hourCycle option is buggy in Safari.
  if (typeof options.hour12 === 'boolean' && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {
    options = { ...options
    };
    let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split('-')[0]];
    let defaultHourCycle = options.hour12 ? 'h12' : 'h23';
    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
    delete options.hour12;
  }

  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');
  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey)) return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);
  let numberFormatter = new Intl.DateTimeFormat(locale, options);
  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}

let $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;

function $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {
  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null) $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat('en-US', {
    hour: 'numeric',
    hour12: false
  }).format(new Date(2020, 2, 3, 0)) === '24';
  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;
}

let $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;

function $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {
  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null) $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat('fr', {
    hour: 'numeric',
    hour12: false
  }).resolvedOptions().hourCycle === 'h12';
  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;
}

function $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {
  if (!options.timeStyle && !options.hour) return undefined; // Work around buggy results in resolved hourCycle and hour12 options in WebKit.
  // Format the minimum possible hour and maximum possible hour in a day and parse the results.

  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, '');
  locale += (locale.includes('-u-') ? '' : '-u') + '-nu-latn';
  let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, { ...options,
    timeZone: undefined // use local timezone

  });
  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find(p => p.type === 'hour').value, 10);
  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find(p => p.type === 'hour').value, 10);
  if (min === 0 && max === 23) return 'h23';
  if (min === 24 && max === 23) return 'h24';
  if (min === 0 && max === 11) return 'h11';
  if (min === 12 && max === 11) return 'h12';
  throw new Error('Unexpected hour cycle result');
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/i18n/dist/module.js






function _react_aria_i18n_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $18f2051aff69b9bf$exports = {};
_react_aria_i18n_dist_module_$parcel$export($18f2051aff69b9bf$exports, "I18nProvider", () => $18f2051aff69b9bf$export$a54013f0d02a8f82);
_react_aria_i18n_dist_module_$parcel$export($18f2051aff69b9bf$exports, "useLocale", () => $18f2051aff69b9bf$export$43bb16f9c6d9e3f7);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
// https://en.wikipedia.org/wiki/Right-to-left

const $148a7a147e38ea7f$var$RTL_SCRIPTS = new Set(['Arab', 'Syrc', 'Samr', 'Mand', 'Thaa', 'Mend', 'Nkoo', 'Adlm', 'Rohg', 'Hebr']);
const $148a7a147e38ea7f$var$RTL_LANGS = new Set(['ae', 'ar', 'arc', 'bcc', 'bqi', 'ckb', 'dv', 'fa', 'glk', 'he', 'ku', 'mzn', 'nqo', 'pnb', 'ps', 'sd', 'ug', 'ur', 'yi']);

function $148a7a147e38ea7f$export$702d680b21cbd764(locale) {
  // If the Intl.Locale API is available, use it to get the script for the locale.
  // This is more accurate than guessing by language, since languages can be written in multiple scripts.
  // @ts-ignore
  if (Intl.Locale) {
    // @ts-ignore
    let script = new Intl.Locale(locale).maximize().script;
    return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(script);
  } // If not, just guess by the language (first part of the locale)


  let lang = locale.split('-')[0];
  return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);
}

function $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
  // @ts-ignore
  let locale = typeof navigator !== 'undefined' && (navigator.language || navigator.userLanguage) || 'en-US';
  return {
    locale: locale,
    direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? 'rtl' : 'ltr'
  };
}

let $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
let $1e5a04cdaf7d1af8$var$listeners = new Set();

function $1e5a04cdaf7d1af8$var$updateLocale() {
  $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();

  for (let listener of $1e5a04cdaf7d1af8$var$listeners) listener($1e5a04cdaf7d1af8$var$currentLocale);
}

function $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
  let isSSR = $9d939cbc98267846$export$535bd6ca7f90a273();
  let [defaultLocale, setDefaultLocale] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)($1e5a04cdaf7d1af8$var$currentLocale);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.addEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);
    $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
    return () => {
      $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
      if ($1e5a04cdaf7d1af8$var$listeners.size === 0) window.removeEventListener('languagechange', $1e5a04cdaf7d1af8$var$updateLocale);
    };
  }, []); // We cannot determine the browser's language on the server, so default to
  // en-US. This will be updated after hydration on the client to the correct value.

  if (isSSR) return {
    locale: 'en-US',
    direction: 'ltr'
  };
  return defaultLocale;
}

const $18f2051aff69b9bf$var$I18nContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);

function $18f2051aff69b9bf$export$a54013f0d02a8f82(props) {
  let {
    locale: locale,
    children: children
  } = props;
  let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();
  let value = locale ? {
    locale: locale,
    direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? 'rtl' : 'ltr'
  } : defaultLocale;
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($18f2051aff69b9bf$var$I18nContext.Provider, {
    value: value
  }, children);
}

function $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
  let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($18f2051aff69b9bf$var$I18nContext);
  return context || defaultLocale;
}

var $321bc95feeb923dd$exports = {};
_react_aria_i18n_dist_module_$parcel$export($321bc95feeb923dd$exports, "useMessageFormatter", () => $321bc95feeb923dd$export$ec23bf898b1eed85);
const $321bc95feeb923dd$var$cache = new WeakMap();

function $321bc95feeb923dd$var$getCachedDictionary(strings) {
  let dictionary = $321bc95feeb923dd$var$cache.get(strings);

  if (!dictionary) {
    dictionary = new $70eee6030fd7c1a1$export$64839e615120df17(strings);
    $321bc95feeb923dd$var$cache.set(strings, dictionary);
  }

  return dictionary;
}

function $321bc95feeb923dd$export$ec23bf898b1eed85(strings) {
  let {
    locale: locale
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let dictionary = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => $321bc95feeb923dd$var$getCachedDictionary(strings), [strings]);
  let formatter = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new $a96338b8d4eb3cb0$export$526ebc05ff964723(locale, dictionary), [locale, dictionary]);
  return (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useCallback)((key, variables) => formatter.format(key, variables), [formatter]);
}

var $896ba0a80a8f4d36$exports = {};
_react_aria_i18n_dist_module_$parcel$export($896ba0a80a8f4d36$exports, "useDateFormatter", () => $896ba0a80a8f4d36$export$85fd5fdf27bacc79);

function $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {
  // Reuse last options object if it is shallowly equal, which allows the useMemo result to also be reused.
  let lastOptions = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  if (options && lastOptions.current && $896ba0a80a8f4d36$var$isEqual(options, lastOptions.current)) options = lastOptions.current;
  lastOptions.current = options;
  let {
    locale: locale
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  return (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new $fb18d541ea1ad717$export$ad991b66133851cf(locale, options), [locale, options]);
}

function $896ba0a80a8f4d36$var$isEqual(a, b) {
  if (a === b) return true;
  let aKeys = Object.keys(a);
  let bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) return false;

  for (let key of aKeys) {
    if (b[key] !== a[key]) return false;
  }

  return true;
}

var $a916eb452884faea$exports = {};
_react_aria_i18n_dist_module_$parcel$export($a916eb452884faea$exports, "useNumberFormatter", () => $a916eb452884faea$export$b7a616150fdb9f44);

function $a916eb452884faea$export$b7a616150fdb9f44(options = {}) {
  let {
    locale: locale
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  return (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, options), [locale, options]);
}

var $325a3faab7a68acd$exports = {};
_react_aria_i18n_dist_module_$parcel$export($325a3faab7a68acd$exports, "useCollator", () => $325a3faab7a68acd$export$a16aca283550c30d);
let $325a3faab7a68acd$var$cache = new Map();

function $325a3faab7a68acd$export$a16aca283550c30d(options) {
  let {
    locale: locale
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let cacheKey = locale + (options ? Object.entries(options).sort((a, b) => a[0] < b[0] ? -1 : 1).join() : '');
  if ($325a3faab7a68acd$var$cache.has(cacheKey)) return $325a3faab7a68acd$var$cache.get(cacheKey);
  let formatter = new Intl.Collator(locale, options);
  $325a3faab7a68acd$var$cache.set(cacheKey, formatter);
  return formatter;
}

var $bb77f239b46e8c72$exports = {};
_react_aria_i18n_dist_module_$parcel$export($bb77f239b46e8c72$exports, "useFilter", () => $bb77f239b46e8c72$export$3274cf84b703fff);

function $bb77f239b46e8c72$export$3274cf84b703fff(options) {
  let collator = $325a3faab7a68acd$export$a16aca283550c30d({
    usage: 'search',
    ...options
  }); // TODO(later): these methods don't currently support the ignorePunctuation option.

  return {
    startsWith(string, substring) {
      if (substring.length === 0) return true; // Normalize both strings so we can slice safely
      // TODO: take into account the ignorePunctuation option as well...

      string = string.normalize('NFC');
      substring = substring.normalize('NFC');
      return collator.compare(string.slice(0, substring.length), substring) === 0;
    },

    endsWith(string, substring) {
      if (substring.length === 0) return true;
      string = string.normalize('NFC');
      substring = substring.normalize('NFC');
      return collator.compare(string.slice(-substring.length), substring) === 0;
    },

    contains(string, substring) {
      if (substring.length === 0) return true;
      string = string.normalize('NFC');
      substring = substring.normalize('NFC');
      let scan = 0;
      let sliceLen = substring.length;

      for (; scan + sliceLen <= string.length; scan++) {
        let slice = string.slice(scan, scan + sliceLen);
        if (collator.compare(substring, slice) === 0) return true;
      }

      return false;
    }

  };
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/focus/dist/module.js





function _react_aria_focus_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $9bf71ea28793e738$exports = {};
_react_aria_focus_dist_module_$parcel$export($9bf71ea28793e738$exports, "FocusScope", () => $9bf71ea28793e738$export$20e40289641fbbb6);
_react_aria_focus_dist_module_$parcel$export($9bf71ea28793e738$exports, "useFocusManager", () => $9bf71ea28793e738$export$10c5169755ce7bd7);
_react_aria_focus_dist_module_$parcel$export($9bf71ea28793e738$exports, "getFocusableTreeWalker", () => $9bf71ea28793e738$export$2d6ec8fc375ceafa);
_react_aria_focus_dist_module_$parcel$export($9bf71ea28793e738$exports, "createFocusManager", () => $9bf71ea28793e738$export$c5251b9e124bf29);
var $6a99195332edec8b$exports = {};
_react_aria_focus_dist_module_$parcel$export($6a99195332edec8b$exports, "focusSafely", () => $6a99195332edec8b$export$80f3e147d781571c);

function $6a99195332edec8b$export$80f3e147d781571c(element) {
  // If the user is interacting with a virtual cursor, e.g. screen reader, then
  // wait until after any animated transitions that are currently occurring on
  // the page before shifting focus. This avoids issues with VoiceOver on iOS
  // causing the page to scroll when moving focus if the element is transitioning
  // from off the screen.
  if (module_$507fabe10e71c6fb$export$630ff653c5ada6a9() === 'virtual') {
    let lastFocusedElement = document.activeElement;
    module_$bbed8b41f857bcc0$export$24490316f764c430(() => {
      // If focus did not move and the element is still in the document, focus it.
      if (document.activeElement === lastFocusedElement && document.contains(element)) module_$7215afc6de606d6b$export$de79e2c695e052f3(element);
    });
  } else module_$7215afc6de606d6b$export$de79e2c695e052f3(element);
}
/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */


function $645f2e67b85a24c9$var$isStyleVisible(element) {
  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement)) return false;
  let {
    display: display,
    visibility: visibility
  } = element.style;
  let isVisible = display !== 'none' && visibility !== 'hidden' && visibility !== 'collapse';

  if (isVisible) {
    const {
      getComputedStyle: getComputedStyle
    } = element.ownerDocument.defaultView;
    let {
      display: computedDisplay,
      visibility: computedVisibility
    } = getComputedStyle(element);
    isVisible = computedDisplay !== 'none' && computedVisibility !== 'hidden' && computedVisibility !== 'collapse';
  }

  return isVisible;
}

function $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {
  return !element.hasAttribute('hidden') && (element.nodeName === 'DETAILS' && childElement && childElement.nodeName !== 'SUMMARY' ? element.hasAttribute('open') : true);
}

function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {
  return element.nodeName !== '#comment' && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));
}

const $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);
let $9bf71ea28793e738$var$activeScope = null;
let $9bf71ea28793e738$var$scopes = new Map();

function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
  let {
    children: children,
    contain: contain,
    restoreFocus: restoreFocus,
    autoFocus: autoFocus
  } = props;
  let startRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  let endRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  let scopeRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)([]);
  let ctx = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($9bf71ea28793e738$var$FocusContext);
  let parentScope = ctx === null || ctx === void 0 ? void 0 : ctx.scopeRef;
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    // Find all rendered nodes between the sentinels and add them to the scope.
    let node = startRef.current.nextSibling;
    let nodes = [];

    while (node && node !== endRef.current) {
      nodes.push(node);
      node = node.nextSibling;
    }

    scopeRef.current = nodes;
  }, [children, parentScope]);
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    $9bf71ea28793e738$var$scopes.set(scopeRef, parentScope);
    return () => {
      // Restore the active scope on unmount if this scope or a descendant scope is active.
      // Parent effect cleanups run before children, so we need to check if the
      // parent scope actually still exists before restoring the active scope to it.
      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$var$scopes.has(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;
      $9bf71ea28793e738$var$scopes.delete(scopeRef);
    };
  }, [scopeRef, parentScope]);
  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
  let focusManager = $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($9bf71ea28793e738$var$FocusContext.Provider, {
    value: {
      scopeRef: scopeRef,
      focusManager: focusManager
    }
  }, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}

function $9bf71ea28793e738$export$10c5169755ce7bd7() {
  var ref;
  return (ref = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($9bf71ea28793e738$var$FocusContext)) === null || ref === void 0 ? void 0 : ref.focusManager;
}

function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap
      } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[0].previousElementSibling;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let nextNode = walker.nextNode();

      if (!nextNode && wrap) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }

      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },

    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap
      } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let previousNode = walker.previousNode();

      if (!previousNode && wrap) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }

      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },

    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let {
        tabbable: tabbable
      } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },

    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let {
        tabbable: tabbable
      } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: tabbable
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    }

  };
}

const $9bf71ea28793e738$var$focusableElements = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];
const $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';
$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
const $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');

function $9bf71ea28793e738$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}

function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)();
  let raf = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let scope1 = scopeRef.current;
    if (!contain) return; // Handle the Tab key to contain focus within the scope

    let onKeyDown = e => {
      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || scopeRef !== $9bf71ea28793e738$var$activeScope) return;
      let focusedElement = document.activeElement;
      let scope = scopeRef.current;
      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: true
      }, scope);
      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();

      if (!nextElement) {
        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;
        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      }

      e.preventDefault();
      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);
    };

    let onFocus = e => {
      // If focusing an element in a child scope of the currently active scope, the child becomes active.
      // Moving out of the active scope to an ancestor is not allowed.
      if (!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) {
        $9bf71ea28793e738$var$activeScope = scopeRef;
        focusedNode.current = e.target;
      } else if (scopeRef === $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {
        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),
        // restore focus to the previously focused node or the first tabbable element in the active scope.
        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
      } else if (scopeRef === $9bf71ea28793e738$var$activeScope) focusedNode.current = e.target;
    };

    let onBlur = e => {
      // Firefox doesn't shift focus back to the Dialog properly without this
      raf.current = requestAnimationFrame(() => {
        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe
        if (scopeRef === $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {
          $9bf71ea28793e738$var$activeScope = scopeRef;
          focusedNode.current = e.target;
          focusedNode.current.focus();
        }
      });
    };

    document.addEventListener('keydown', onKeyDown, false);
    document.addEventListener('focusin', onFocus, false);
    scope1.forEach(element => element.addEventListener('focusin', onFocus, false));
    scope1.forEach(element => element.addEventListener('focusout', onBlur, false));
    return () => {
      document.removeEventListener('keydown', onKeyDown, false);
      document.removeEventListener('focusin', onFocus, false);
      scope1.forEach(element => element.removeEventListener('focusin', onFocus, false));
      scope1.forEach(element => element.removeEventListener('focusout', onBlur, false));
    };
  }, [scopeRef, contain]); // eslint-disable-next-line arrow-body-style

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    return () => cancelAnimationFrame(raf.current);
  }, [raf]);
}

function $9bf71ea28793e738$var$isElementInAnyScope(element) {
  for (let scope of $9bf71ea28793e738$var$scopes.keys()) {
    if ($9bf71ea28793e738$var$isElementInScope(element, scope.current)) return true;
  }

  return false;
}

function $9bf71ea28793e738$var$isElementInScope(element, scope) {
  return scope.some(node => node.contains(element));
}

function $9bf71ea28793e738$var$isElementInChildScope(element, scope) {
  // node.contains in isElementInScope covers child scopes that are also DOM children,
  // but does not cover child scopes in portals.
  for (let s of $9bf71ea28793e738$var$scopes.keys()) {
    if ((s === scope || $9bf71ea28793e738$var$isAncestorScope(scope, s)) && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;
  }

  return false;
}

function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
  let parent = $9bf71ea28793e738$var$scopes.get(scope);
  if (!parent) return false;
  if (parent === ancestor) return true;
  return $9bf71ea28793e738$var$isAncestorScope(ancestor, parent);
}

function $9bf71ea28793e738$var$focusElement(element, scroll = false) {
  if (element != null && !scroll) try {
    $6a99195332edec8b$export$80f3e147d781571c(element);
  } catch (err) {// ignore
  } else if (element != null) try {
    element.focus();
  } catch (err1) {// ignore
  }
}

function $9bf71ea28793e738$var$focusFirstInScope(scope) {
  let sentinel = scope[0].previousElementSibling;
  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
    tabbable: true
  }, scope);
  walker.currentNode = sentinel;
  $9bf71ea28793e738$var$focusElement(walker.nextNode());
}

function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useRef(autoFocus);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (autoFocusRef.current) {
      $9bf71ea28793e738$var$activeScope = scopeRef;
      if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current)) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
    }

    autoFocusRef.current = false;
  }, []);
}

function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.
  const nodeToRestoreRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(typeof document !== 'undefined' ? document.activeElement : null); // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.

  module_$f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let nodeToRestore = nodeToRestoreRef.current;
    if (!restoreFocus) return; // Handle the Tab key so that tabbing out of the scope goes to the next element
    // after the node that had focus when the scope mounted. This is important when
    // using portals for overlays, so that focus goes to the expected element when
    // tabbing out of the overlay.

    let onKeyDown = e => {
      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey) return;
      let focusedElement = document.activeElement;
      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return; // Create a DOM tree walker that matches all tabbable elements

      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {
        tabbable: true
      }); // Find the next tabbable element after the currently focused element

      walker.currentNode = focusedElement;
      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body) nodeToRestore = null; // If there is no next element, or it is outside the current scope, move focus to the
      // next element after the node to restore to instead.

      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
        walker.currentNode = nodeToRestore; // Skip over elements within the scope, in case the scope immediately follows the node to restore.

        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));

        e.preventDefault();
        e.stopPropagation();
        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)
          // then move focus to the body.
          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)
          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
      }
    };

    if (!contain) document.addEventListener('keydown', onKeyDown, true);
    return () => {
      if (!contain) document.removeEventListener('keydown', onKeyDown, true);
      if (restoreFocus && nodeToRestore && $9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current)) requestAnimationFrame(() => {
        if (document.body.contains(nodeToRestore)) $9bf71ea28793e738$var$focusElement(nodeToRestore);
      });
    };
  }, [scopeRef, restoreFocus, contain]);
}

function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {
  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;
  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      var ref; // Skip nodes inside the starting node.

      if (opts === null || opts === void 0 ? void 0 : (ref = opts.from) === null || ref === void 0 ? void 0 : ref.contains(node)) return NodeFilter.FILTER_REJECT;
      if (node.matches(selector) && $645f2e67b85a24c9$export$e989c0fffaa6b27a(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope))) return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }

  });
  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;
  return walker;
}

function $9bf71ea28793e738$export$c5251b9e124bf29(ref) {
  return {
    focusNext(opts = {}) {
      let root = ref.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap
      } = opts;
      let node = from || document.activeElement;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable
      });
      if (root.contains(node)) walker.currentNode = node;
      let nextNode = walker.nextNode();

      if (!nextNode && wrap) {
        walker.currentNode = root;
        nextNode = walker.nextNode();
      }

      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },

    focusPrevious(opts = {}) {
      let root = ref.current;
      let {
        from: from,
        tabbable: tabbable,
        wrap: wrap
      } = opts;
      let node = from || document.activeElement;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable
      });
      if (root.contains(node)) walker.currentNode = node;else {
        let next = $9bf71ea28793e738$var$last(walker);
        if (next) $9bf71ea28793e738$var$focusElement(next, true);
        return next;
      }
      let previousNode = walker.previousNode();

      if (!previousNode && wrap) {
        walker.currentNode = root;
        previousNode = $9bf71ea28793e738$var$last(walker);
      }

      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },

    focusFirst(opts = {}) {
      let root = ref.current;
      let {
        tabbable: tabbable
      } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable
      });
      let nextNode = walker.nextNode();
      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },

    focusLast(opts = {}) {
      let root = ref.current;
      let {
        tabbable: tabbable
      } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable: tabbable
      });
      let next = $9bf71ea28793e738$var$last(walker);
      if (next) $9bf71ea28793e738$var$focusElement(next, true);
      return next;
    }

  };
}

function $9bf71ea28793e738$var$last(walker) {
  let next;
  let last;

  do {
    last = walker.lastChild();
    if (last) next = last;
  } while (last);

  return next;
}

var $907718708eab68af$exports = {};
_react_aria_focus_dist_module_$parcel$export($907718708eab68af$exports, "FocusRing", () => $907718708eab68af$export$1a38b4ad7f578e1d);
var $f7dceffc5ad7768b$exports = {};
_react_aria_focus_dist_module_$parcel$export($f7dceffc5ad7768b$exports, "useFocusRing", () => $f7dceffc5ad7768b$export$4e328f61c538687f);

function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
  let {
    autoFocus = false,
    isTextInput: isTextInput,
    within: within
  } = props;
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    isFocused: false,
    isFocusVisible: autoFocus || module_$507fabe10e71c6fb$export$b9b3dfddab17db27()
  }).current;
  let [isFocused1, setFocused] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let [isFocusVisibleState, setFocusVisible] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(() => state.isFocused && state.isFocusVisible);

  let updateState = () => setFocusVisible(state.isFocused && state.isFocusVisible);

  let onFocusChange = isFocused => {
    state.isFocused = isFocused;
    setFocused(isFocused);
    updateState();
  };

  module_$507fabe10e71c6fb$export$ec71b4b83ac08ec3(isFocusVisible => {
    state.isFocusVisible = isFocusVisible;
    updateState();
  }, [], {
    isTextInput: isTextInput
  });
  let {
    focusProps: focusProps
  } = module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    isDisabled: within,
    onFocusChange: onFocusChange
  });
  let {
    focusWithinProps: focusWithinProps
  } = module_$9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled: !within,
    onFocusWithinChange: onFocusChange
  });
  return {
    isFocused: isFocused1,
    isFocusVisible: state.isFocused && isFocusVisibleState,
    focusProps: within ? focusWithinProps : focusProps
  };
}

function $907718708eab68af$export$1a38b4ad7f578e1d(props) {
  let {
    children: children,
    focusClass: focusClass,
    focusRingClass: focusRingClass
  } = props;
  let {
    isFocused: isFocused,
    isFocusVisible: isFocusVisible,
    focusProps: focusProps
  } = $f7dceffc5ad7768b$export$4e328f61c538687f(props);
  let child = external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.only(children);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().cloneElement(child, module_$3ef42575df84b30b$export$9d1611c77c2fe928(child.props, { ...focusProps,
    className: clsx_m({
      [focusClass || '']: isFocused,
      [focusRingClass || '']: isFocusVisible
    })
  }));
}

var $e6afbd83fe6ebbd2$exports = {};
_react_aria_focus_dist_module_$parcel$export($e6afbd83fe6ebbd2$exports, "FocusableProvider", () => $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5);
_react_aria_focus_dist_module_$parcel$export($e6afbd83fe6ebbd2$exports, "useFocusable", () => $e6afbd83fe6ebbd2$export$4c014de7c8940b4c);
let $e6afbd83fe6ebbd2$var$FocusableContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(null);

function $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};
  module_$e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref); // eslint-disable-next-line

  let {
    ref: _,
    ...otherProps
  } = context;
  return otherProps;
}
/**
 * Provides DOM props to the nearest focusable child.
 */


function $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {
  let {
    children: children,
    ...otherProps
  } = props;
  let context = { ...otherProps,
    ref: ref
  };
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {
    value: context
  }, children);
}

let $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider);

function $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {
  let {
    focusProps: focusProps
  } = module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props);
  let {
    keyboardProps: keyboardProps
  } = module_$46d819fcbaf35654$export$8f71654801c2f7cd(props);
  let interactions = module_$3ef42575df84b30b$export$9d1611c77c2fe928(focusProps, keyboardProps);
  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(props.autoFocus);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (autoFocusRef.current && domRef.current) domRef.current.focus();
    autoFocusRef.current = false;
  }, []);
  return {
    focusableProps: module_$3ef42575df84b30b$export$9d1611c77c2fe928({ ...interactions,
      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : undefined
    }, interactionProps)
  };
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/selection/dist/module.js






function selection_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $ae20dd8cbca75726$exports = {};
selection_dist_module_$parcel$export($ae20dd8cbca75726$exports, "useSelectableCollection", () => $ae20dd8cbca75726$export$d6daf82dcd84e87c);

function $feb5ffebff200149$export$d3e3bd3e26688c04(e) {
  // Ctrl + Arrow Up/Arrow Down has a system wide meaning on macOS, so use Alt instead.
  // On Windows and Ubuntu, Alt + Space has a system wide meaning.
  return module_$c87311424ea30a05$export$e1865c3bedcd822b() ? e.altKey : e.ctrlKey;
}

function $feb5ffebff200149$export$16792effe837dba3(e) {
  if (module_$c87311424ea30a05$export$9ac100e40613ea10()) return e.metaKey;
  return e.ctrlKey;
}

var $fb3050f43d946246$exports = {};
selection_dist_module_$parcel$export($fb3050f43d946246$exports, "useTypeSelect", () => $fb3050f43d946246$export$e32c88dfddc6e1d8);

function $fb3050f43d946246$export$e32c88dfddc6e1d8(options) {
  let {
    keyboardDelegate: keyboardDelegate,
    selectionManager: selectionManager,
    onTypeSelect: onTypeSelect
  } = options;
  let state = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    search: '',
    timeout: null
  }).current;

  let onKeyDown = e => {
    let character = $fb3050f43d946246$var$getStringForKey(e.key);
    if (!character || e.ctrlKey || e.metaKey) return; // Do not propagate the Spacebar event if it's meant to be part of the search.
    // When we time out, the search term becomes empty, hence the check on length.
    // Trimming is to account for the case of pressing the Spacebar more than once,
    // which should cycle through the selection/deselection of the focused item.

    if (character === ' ' && state.search.trim().length > 0) {
      e.preventDefault();
      if (!('continuePropagation' in e)) e.stopPropagation();
    }

    state.search += character; // Use the delegate to find a key to focus.
    // Prioritize items after the currently focused item, falling back to searching the whole list.

    let key = keyboardDelegate.getKeyForSearch(state.search, selectionManager.focusedKey); // If no key found, search from the top.

    if (key == null) key = keyboardDelegate.getKeyForSearch(state.search);

    if (key != null) {
      selectionManager.setFocusedKey(key);
      if (onTypeSelect) onTypeSelect(key);
    }

    clearTimeout(state.timeout);
    state.timeout = setTimeout(() => {
      state.search = '';
    }, 500);
  };

  return {
    typeSelectProps: {
      // Using a capturing listener to catch the keydown event before
      // other hooks in order to handle the Spacebar event.
      onKeyDownCapture: keyboardDelegate.getKeyForSearch ? onKeyDown : null
    }
  };
}

function $fb3050f43d946246$var$getStringForKey(key) {
  // If the key is of length 1, it is an ASCII value.
  // Otherwise, if there are no ASCII characters in the key name,
  // it is a Unicode character.
  // See https://www.w3.org/TR/uievents-key/
  if (key.length === 1 || !/^[A-Z]/i.test(key)) return key;
  return '';
}

function $ae20dd8cbca75726$export$d6daf82dcd84e87c(options) {
  let {
    selectionManager: manager,
    keyboardDelegate: delegate,
    ref: ref,
    autoFocus = false,
    shouldFocusWrap = false,
    disallowEmptySelection = false,
    disallowSelectAll = false,
    selectOnFocus = manager.selectionBehavior === 'replace',
    disallowTypeAhead = false,
    shouldUseVirtualFocus: shouldUseVirtualFocus,
    allowsTabNavigation = false,
    isVirtualized: isVirtualized,
    // If no scrollRef is provided, assume the collection ref is the scrollable region
    scrollRef = ref
  } = options;
  let {
    direction: direction
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();

  let onKeyDown = e => {
    // Prevent option + tab from doing anything since it doesn't move focus to the cells, only buttons/checkboxes
    if (e.altKey && e.key === 'Tab') e.preventDefault(); // Keyboard events bubble through portals. Don't handle keyboard events
    // for elements outside the collection (e.g. menus).

    if (!ref.current.contains(e.target)) return;

    const navigateToKey = (key, childFocus) => {
      if (key != null) {
        manager.setFocusedKey(key, childFocus);
        if (e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(key);else if (selectOnFocus && !$feb5ffebff200149$export$d3e3bd3e26688c04(e)) manager.replaceSelection(key);
      }
    };

    switch (e.key) {
      case 'ArrowDown':
        if (delegate.getKeyBelow) {
          var ref4, ref1;
          e.preventDefault();
          let nextKey = manager.focusedKey != null ? delegate.getKeyBelow(manager.focusedKey) : (ref4 = delegate.getFirstKey) === null || ref4 === void 0 ? void 0 : ref4.call(delegate);
          if (nextKey == null && shouldFocusWrap) nextKey = (ref1 = delegate.getFirstKey) === null || ref1 === void 0 ? void 0 : ref1.call(delegate, manager.focusedKey);
          navigateToKey(nextKey);
        }

        break;

      case 'ArrowUp':
        if (delegate.getKeyAbove) {
          var ref2, ref3;
          e.preventDefault();
          let nextKey = manager.focusedKey != null ? delegate.getKeyAbove(manager.focusedKey) : (ref2 = delegate.getLastKey) === null || ref2 === void 0 ? void 0 : ref2.call(delegate);
          if (nextKey == null && shouldFocusWrap) nextKey = (ref3 = delegate.getLastKey) === null || ref3 === void 0 ? void 0 : ref3.call(delegate, manager.focusedKey);
          navigateToKey(nextKey);
        }

        break;

      case 'ArrowLeft':
        if (delegate.getKeyLeftOf) {
          e.preventDefault();
          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);
          navigateToKey(nextKey, direction === 'rtl' ? 'first' : 'last');
        }

        break;

      case 'ArrowRight':
        if (delegate.getKeyRightOf) {
          e.preventDefault();
          let nextKey = delegate.getKeyRightOf(manager.focusedKey);
          navigateToKey(nextKey, direction === 'rtl' ? 'last' : 'first');
        }

        break;

      case 'Home':
        if (delegate.getFirstKey) {
          e.preventDefault();
          let firstKey = delegate.getFirstKey(manager.focusedKey, $feb5ffebff200149$export$16792effe837dba3(e));
          manager.setFocusedKey(firstKey);
          if ($feb5ffebff200149$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(firstKey);else if (selectOnFocus) manager.replaceSelection(firstKey);
        }

        break;

      case 'End':
        if (delegate.getLastKey) {
          e.preventDefault();
          let lastKey = delegate.getLastKey(manager.focusedKey, $feb5ffebff200149$export$16792effe837dba3(e));
          manager.setFocusedKey(lastKey);
          if ($feb5ffebff200149$export$16792effe837dba3(e) && e.shiftKey && manager.selectionMode === 'multiple') manager.extendSelection(lastKey);else if (selectOnFocus) manager.replaceSelection(lastKey);
        }

        break;

      case 'PageDown':
        if (delegate.getKeyPageBelow) {
          e.preventDefault();
          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);
          navigateToKey(nextKey);
        }

        break;

      case 'PageUp':
        if (delegate.getKeyPageAbove) {
          e.preventDefault();
          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);
          navigateToKey(nextKey);
        }

        break;

      case 'a':
        if ($feb5ffebff200149$export$16792effe837dba3(e) && manager.selectionMode === 'multiple' && disallowSelectAll !== true) {
          e.preventDefault();
          manager.selectAll();
        }

        break;

      case 'Escape':
        e.preventDefault();
        if (!disallowEmptySelection) manager.clearSelection();
        break;

      case 'Tab':
        if (!allowsTabNavigation) {
          // There may be elements that are "tabbable" inside a collection (e.g. in a grid cell).
          // However, collections should be treated as a single tab stop, with arrow key navigation internally.
          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.
          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element
          // in the collection, so that the browser default behavior will apply starting from that element
          // rather than the currently focused one.
          if (e.shiftKey) ref.current.focus();else {
            let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ref.current, {
              tabbable: true
            });
            let next;
            let last;

            do {
              last = walker.lastChild();
              if (last) next = last;
            } while (last);

            if (next && !next.contains(document.activeElement)) module_$7215afc6de606d6b$export$de79e2c695e052f3(next);
          }
          break;
        }

    }
  }; // Store the scroll position so we can restore it later.


  let scrollPos = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)({
    top: 0,
    left: 0
  });
  module_$e9faafb641e167db$export$90fc3a17d93f704c(scrollRef, 'scroll', isVirtualized ? null : () => {
    scrollPos.current = {
      top: scrollRef.current.scrollTop,
      left: scrollRef.current.scrollLeft
    };
  });

  let onFocus = e => {
    if (manager.isFocused) {
      // If a focus event bubbled through a portal, reset focus state.
      if (!e.currentTarget.contains(e.target)) manager.setFocused(false);
      return;
    } // Focus events can bubble through portals. Ignore these events.


    if (!e.currentTarget.contains(e.target)) return;
    manager.setFocused(true);

    if (manager.focusedKey == null) {
      let navigateToFirstKey = key => {
        if (key != null) {
          manager.setFocusedKey(key);
          if (selectOnFocus) manager.replaceSelection(key);
        }
      }; // If the user hasn't yet interacted with the collection, there will be no focusedKey set.
      // Attempt to detect whether the user is tabbing forward or backward into the collection
      // and either focus the first or last item accordingly.


      let relatedTarget = e.relatedTarget;

      var _lastSelectedKey, _firstSelectedKey;

      if (relatedTarget && e.currentTarget.compareDocumentPosition(relatedTarget) & Node.DOCUMENT_POSITION_FOLLOWING) navigateToFirstKey((_lastSelectedKey = manager.lastSelectedKey) !== null && _lastSelectedKey !== void 0 ? _lastSelectedKey : delegate.getLastKey());else navigateToFirstKey((_firstSelectedKey = manager.firstSelectedKey) !== null && _firstSelectedKey !== void 0 ? _firstSelectedKey : delegate.getFirstKey());
    } else if (!isVirtualized) {
      // Restore the scroll position to what it was before.
      scrollRef.current.scrollTop = scrollPos.current.top;
      scrollRef.current.scrollLeft = scrollPos.current.left; // Refocus and scroll the focused item into view if it exists within the scrollable region.

      let element = scrollRef.current.querySelector(`[data-key="${manager.focusedKey}"]`);

      if (element) {
        // This prevents a flash of focus on the first/last element in the collection
        module_$7215afc6de606d6b$export$de79e2c695e052f3(element);
        module_$2f04cbc44ee30ce0$export$53a0910f038337bd(scrollRef.current, element);
      }
    }
  };

  let onBlur = e => {
    // Don't set blurred and then focused again if moving focus within the collection.
    if (!e.currentTarget.contains(e.relatedTarget)) manager.setFocused(false);
  };

  const autoFocusRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(autoFocus);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (autoFocusRef.current) {
      let focusedKey = null; // Check focus strategy to determine which item to focus

      if (autoFocus === 'first') focusedKey = delegate.getFirstKey();
      if (autoFocus === 'last') focusedKey = delegate.getLastKey(); // If there are any selected keys, make the first one the new focus target

      let selectedKeys = manager.selectedKeys;
      if (selectedKeys.size) focusedKey = selectedKeys.values().next().value;
      manager.setFocused(true);
      manager.setFocusedKey(focusedKey); // If no default focus key is selected, focus the collection itself.

      if (focusedKey == null && !shouldUseVirtualFocus) $6a99195332edec8b$export$80f3e147d781571c(ref.current);
    }

    autoFocusRef.current = false; // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []); // If not virtualized, scroll the focused element into view when the focusedKey changes.
  // When virtualized, Virtualizer handles this internally.

  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (!isVirtualized && manager.focusedKey && (scrollRef === null || scrollRef === void 0 ? void 0 : scrollRef.current)) {
      let element = scrollRef.current.querySelector(`[data-key="${manager.focusedKey}"]`);
      if (element) module_$2f04cbc44ee30ce0$export$53a0910f038337bd(scrollRef.current, element);
    }
  }, [isVirtualized, scrollRef, manager.focusedKey]);
  let handlers = {
    onKeyDown: onKeyDown,
    onFocus: onFocus,
    onBlur: onBlur,

    onMouseDown(e) {
      // Ignore events that bubbled through portals.
      if (e.currentTarget.contains(e.target)) // Prevent focus going to the collection when clicking on the scrollbar.
        e.preventDefault();
    }

  };
  let {
    typeSelectProps: typeSelectProps
  } = $fb3050f43d946246$export$e32c88dfddc6e1d8({
    keyboardDelegate: delegate,
    selectionManager: manager
  });
  if (!disallowTypeAhead) handlers = module_$3ef42575df84b30b$export$9d1611c77c2fe928(typeSelectProps, handlers); // If nothing is focused within the collection, make the collection itself tabbable.
  // This will be marshalled to either the first or last item depending on where focus came from.
  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try
  // to move real DOM focus to the element anyway.

  let tabIndex;
  if (!shouldUseVirtualFocus) tabIndex = manager.focusedKey == null ? 0 : -1;
  return {
    collectionProps: { ...handlers,
      tabIndex: tabIndex
    }
  };
}

var $880e95eb8b93ba9a$exports = {};
selection_dist_module_$parcel$export($880e95eb8b93ba9a$exports, "useSelectableItem", () => $880e95eb8b93ba9a$export$ecf600387e221c37);

function $880e95eb8b93ba9a$export$ecf600387e221c37(options) {
  let {
    selectionManager: manager,
    key: key,
    ref: ref,
    shouldSelectOnPressUp: shouldSelectOnPressUp,
    isVirtualized: isVirtualized,
    shouldUseVirtualFocus: shouldUseVirtualFocus,
    focus: focus,
    isDisabled: isDisabled,
    onAction: onAction,
    allowsDifferentPressOrigin: allowsDifferentPressOrigin
  } = options;

  let onSelect = e => {
    if (e.pointerType === 'keyboard' && $feb5ffebff200149$export$d3e3bd3e26688c04(e)) manager.toggleSelection(key);else {
      if (manager.selectionMode === 'none') return;

      if (manager.selectionMode === 'single') {
        if (manager.isSelected(key) && !manager.disallowEmptySelection) manager.toggleSelection(key);else manager.replaceSelection(key);
      } else if (e && e.shiftKey) manager.extendSelection(key);else if (manager.selectionBehavior === 'toggle' || e && ($feb5ffebff200149$export$16792effe837dba3(e) || e.pointerType === 'touch' || e.pointerType === 'virtual')) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys
        manager.toggleSelection(key);else manager.replaceSelection(key);
    }
  }; // Focus the associated DOM node when this item becomes the focusedKey


  let isFocused = key === manager.focusedKey;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (isFocused && manager.isFocused && !shouldUseVirtualFocus && document.activeElement !== ref.current) {
      if (focus) focus();else $6a99195332edec8b$export$80f3e147d781571c(ref.current);
    }
  }, [ref, isFocused, manager.focusedKey, manager.childFocusStrategy, manager.isFocused, shouldUseVirtualFocus]); // Set tabIndex to 0 if the element is focused, or -1 otherwise so that only the last focused
  // item is tabbable.  If using virtual focus, don't set a tabIndex at all so that VoiceOver
  // on iOS 14 doesn't try to move real DOM focus to the item anyway.

  let itemProps = {};
  if (!shouldUseVirtualFocus) itemProps = {
    tabIndex: isFocused ? 0 : -1,

    onFocus(e) {
      if (e.target === ref.current) manager.setFocusedKey(key);
    }

  };
  let modality = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let hasPrimaryAction = onAction && manager.selectionMode === 'none';
  let hasSecondaryAction = onAction && manager.selectionMode !== 'none' && manager.selectionBehavior === 'replace';
  let allowsSelection = !isDisabled && manager.canSelectItem(key); // By default, selection occurs on pointer down. This can be strange if selecting an
  // item causes the UI to disappear immediately (e.g. menus).
  // If shouldSelectOnPressUp is true, we use onPressUp instead of onPressStart.
  // onPress requires a pointer down event on the same element as pointer up. For menus,
  // we want to be able to have the pointer down on the trigger that opens the menu and
  // the pointer up on the menu item rather than requiring a separate press.
  // For keyboard events, selection still occurs on key down.

  let itemPressProps = {};

  if (shouldSelectOnPressUp) {
    itemPressProps.onPressStart = e => {
      modality.current = e.pointerType;
      if (e.pointerType === 'keyboard') onSelect(e);
    }; // If allowsDifferentPressOrigin, make selection happen on pressUp (e.g. open menu on press down, selection on menu item happens on press up.)
    // Otherwise, have selection happen onPress (prevents listview row selection when clicking on interactable elements in the row)


    if (!allowsDifferentPressOrigin) itemPressProps.onPress = e => {
      if (e.pointerType !== 'keyboard') onSelect(e);
      if (hasPrimaryAction) onAction();
    };else {
      itemPressProps.onPressUp = e => {
        if (e.pointerType !== 'keyboard') onSelect(e);
      };

      itemPressProps.onPress = hasPrimaryAction ? () => onAction() : null;
    }
  } else {
    // On touch, it feels strange to select on touch down, so we special case this.
    itemPressProps.onPressStart = e => {
      modality.current = e.pointerType;
      if (e.pointerType !== 'touch' && e.pointerType !== 'virtual') onSelect(e);
    };

    itemPressProps.onPress = e => {
      if (e.pointerType === 'touch' || e.pointerType === 'virtual' || hasPrimaryAction) {
        // Single tap on touch with selectionBehavior = 'replace' performs an action, i.e. navigation.
        // Also perform action on press up when selectionMode = 'none'.
        if (hasPrimaryAction || hasSecondaryAction) onAction();else onSelect(e);
      }
    };
  }

  if (!isVirtualized) itemProps['data-key'] = key;
  itemPressProps.preventFocusOnPress = shouldUseVirtualFocus;
  let {
    pressProps: pressProps,
    isPressed: isPressed
  } = module_$f6c31cce2adf654f$export$45712eceda6fad21(itemPressProps); // Double clicking with a mouse with selectionBehavior = 'replace' performs an action.

  let onDoubleClick = hasSecondaryAction ? e => {
    if (modality.current === 'mouse') {
      e.stopPropagation();
      e.preventDefault();
      onAction();
    }
  } : undefined; // Long pressing an item with touch when selectionBehavior = 'replace' switches the selection behavior
  // to 'toggle'. This changes the single tap behavior from performing an action (i.e. navigating) to
  // selecting, and may toggle the appearance of a UI affordance like checkboxes on each item.
  // TODO: what about when drag and drop is also enabled??

  let {
    longPressProps: longPressProps
  } = module_$8a26561d2877236e$export$c24ed0104d07eab9({
    isDisabled: !hasSecondaryAction,

    onLongPress(e) {
      if (e.pointerType === 'touch') {
        onSelect(e);
        manager.setSelectionBehavior('toggle');
      }
    }

  }); // Pressing the Enter key with selectionBehavior = 'replace' performs an action (i.e. navigation).

  let onKeyUp = hasSecondaryAction ? e => {
    if (e.key === 'Enter') onAction();
  } : undefined;
  return {
    itemProps: module_$3ef42575df84b30b$export$9d1611c77c2fe928(itemProps, allowsSelection || hasPrimaryAction ? pressProps : {}, hasSecondaryAction ? longPressProps : {}, {
      onKeyUp: onKeyUp,
      onDoubleClick: onDoubleClick
    }),
    isPressed: isPressed
  };
}

var $982254629710d113$exports = {};
selection_dist_module_$parcel$export($982254629710d113$exports, "useSelectableList", () => $982254629710d113$export$b95089534ab7c1fd);
var $2a25aae57d74318e$exports = {};
selection_dist_module_$parcel$export($2a25aae57d74318e$exports, "ListKeyboardDelegate", () => $2a25aae57d74318e$export$a05409b8bb224a5a);

class $2a25aae57d74318e$export$a05409b8bb224a5a {
  getKeyBelow(key) {
    key = this.collection.getKeyAfter(key);

    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;
      key = this.collection.getKeyAfter(key);
    }
  }

  getKeyAbove(key) {
    key = this.collection.getKeyBefore(key);

    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;
      key = this.collection.getKeyBefore(key);
    }
  }

  getFirstKey() {
    let key = this.collection.getFirstKey();

    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;
      key = this.collection.getKeyAfter(key);
    }
  }

  getLastKey() {
    let key = this.collection.getLastKey();

    while (key != null) {
      let item = this.collection.getItem(key);
      if (item.type === 'item' && !this.disabledKeys.has(key)) return key;
      key = this.collection.getKeyBefore(key);
    }
  }

  getItem(key) {
    return this.ref.current.querySelector(`[data-key="${key}"]`);
  }

  getKeyPageAbove(key) {
    let menu = this.ref.current;
    let item = this.getItem(key);
    if (!item) return null;
    let pageY = Math.max(0, item.offsetTop + item.offsetHeight - menu.offsetHeight);

    while (item && item.offsetTop > pageY) {
      key = this.getKeyAbove(key);
      item = this.getItem(key);
    }

    return key;
  }

  getKeyPageBelow(key) {
    let menu = this.ref.current;
    let item = this.getItem(key);
    if (!item) return null;
    let pageY = Math.min(menu.scrollHeight, item.offsetTop - item.offsetHeight + menu.offsetHeight);

    while (item && item.offsetTop < pageY) {
      key = this.getKeyBelow(key);
      item = this.getItem(key);
    }

    return key;
  }

  getKeyForSearch(search, fromKey) {
    if (!this.collator) return null;
    let collection = this.collection;
    let key = fromKey || this.getFirstKey();

    while (key != null) {
      let item = collection.getItem(key);
      let substring = item.textValue.slice(0, search.length);
      if (item.textValue && this.collator.compare(substring, search) === 0) return key;
      key = this.getKeyBelow(key);
    }

    return null;
  }

  constructor(collection, disabledKeys, ref, collator) {
    this.collection = collection;
    this.disabledKeys = disabledKeys;
    this.ref = ref;
    this.collator = collator;
  }

}

function $982254629710d113$export$b95089534ab7c1fd(props) {
  let {
    selectionManager: selectionManager,
    collection: collection,
    disabledKeys: disabledKeys,
    ref: ref,
    keyboardDelegate: keyboardDelegate,
    autoFocus: autoFocus,
    shouldFocusWrap: shouldFocusWrap,
    isVirtualized: isVirtualized,
    disallowEmptySelection: disallowEmptySelection,
    selectOnFocus = false,
    disallowTypeAhead: disallowTypeAhead,
    shouldUseVirtualFocus: shouldUseVirtualFocus,
    allowsTabNavigation: allowsTabNavigation
  } = props; // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
  // When virtualized, the layout object will be passed in as a prop and override this.

  let collator = $325a3faab7a68acd$export$a16aca283550c30d({
    usage: 'search',
    sensitivity: 'base'
  });
  let delegate = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => keyboardDelegate || new $2a25aae57d74318e$export$a05409b8bb224a5a(collection, disabledKeys, ref, collator), [keyboardDelegate, collection, disabledKeys, ref, collator]);
  let {
    collectionProps: collectionProps
  } = $ae20dd8cbca75726$export$d6daf82dcd84e87c({
    ref: ref,
    selectionManager: selectionManager,
    keyboardDelegate: delegate,
    autoFocus: autoFocus,
    shouldFocusWrap: shouldFocusWrap,
    disallowEmptySelection: disallowEmptySelection,
    selectOnFocus: selectOnFocus,
    disallowTypeAhead: disallowTypeAhead,
    shouldUseVirtualFocus: shouldUseVirtualFocus,
    allowsTabNavigation: allowsTabNavigation,
    isVirtualized: isVirtualized,
    scrollRef: ref
  });
  return {
    listProps: collectionProps
  };
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/grid/dist/module.js









function grid_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

var $d1c300d9c497e402$exports = {};
grid_dist_module_$parcel$export($d1c300d9c497e402$exports, "GridKeyboardDelegate", () => $d1c300d9c497e402$export$de9feff04fda126e);

class $d1c300d9c497e402$export$de9feff04fda126e {
  isCell(node) {
    return node.type === 'cell';
  }

  isRow(node) {
    return node.type === 'row' || node.type === 'item';
  }

  findPreviousKey(fromKey, pred) {
    let key = fromKey != null ? this.collection.getKeyBefore(fromKey) : this.collection.getLastKey();

    while (key != null) {
      let item = this.collection.getItem(key);
      if (!pred || pred(item)) return key;
      key = this.collection.getKeyBefore(key);
    }
  }

  findNextKey(fromKey, pred) {
    let key = fromKey != null ? this.collection.getKeyAfter(fromKey) : this.collection.getFirstKey();

    while (key != null) {
      let item = this.collection.getItem(key);
      if (!pred || pred(item)) return key;
      key = this.collection.getKeyAfter(key);
    }
  }

  getKeyBelow(key) {
    let startItem = this.collection.getItem(key);
    if (!startItem) return; // If focus was on a cell, start searching from the parent row

    if (this.isCell(startItem)) key = startItem.parentKey; // Find the next item

    key = this.findNextKey(key);

    if (key != null) {
      // If focus was on a cell, focus the cell with the same index in the next row.
      if (this.isCell(startItem)) {
        let item = this.collection.getItem(key);
        return [...item.childNodes][startItem.index].key;
      } // Otherwise, focus the next row


      if (this.focusMode === 'row') return key;
    }
  }

  getKeyAbove(key) {
    let startItem = this.collection.getItem(key);
    if (!startItem) return; // If focus is on a cell, start searching from the parent row

    if (this.isCell(startItem)) key = startItem.parentKey; // Find the previous item

    key = this.findPreviousKey(key);

    if (key != null) {
      // If focus was on a cell, focus the cell with the same index in the previous row.
      if (this.isCell(startItem)) {
        let item = this.collection.getItem(key);
        return [...item.childNodes][startItem.index].key;
      } // Otherwise, focus the previous row


      if (this.focusMode === 'row') return key;
    }
  }

  getKeyRightOf(key) {
    let item = this.collection.getItem(key);
    if (!item) return; // If focus is on a row, focus the first child cell.

    if (this.isRow(item)) {
      let children = [...item.childNodes];
      return this.direction === 'rtl' ? children[children.length - 1].key : children[0].key;
    } // If focus is on a cell, focus the next cell if any,
    // otherwise focus the parent row.


    if (this.isCell(item)) {
      let parent = this.collection.getItem(item.parentKey);
      let children = [...parent.childNodes];
      let next = this.direction === 'rtl' ? children[item.index - 1] : children[item.index + 1];
      if (next) return next.key; // focus row only if focusMode is set to row

      if (this.focusMode === 'row') return item.parentKey;
      return this.direction === 'rtl' ? this.getFirstKey(key) : this.getLastKey(key);
    }
  }

  getKeyLeftOf(key) {
    let item = this.collection.getItem(key);
    if (!item) return; // If focus is on a row, focus the last child cell.

    if (this.isRow(item)) {
      let children = [...item.childNodes];
      return this.direction === 'rtl' ? children[0].key : children[children.length - 1].key;
    } // If focus is on a cell, focus the previous cell if any,
    // otherwise focus the parent row.


    if (this.isCell(item)) {
      let parent = this.collection.getItem(item.parentKey);
      let children = [...parent.childNodes];
      let prev = this.direction === 'rtl' ? children[item.index + 1] : children[item.index - 1];
      if (prev) return prev.key; // focus row only if focusMode is set to row

      if (this.focusMode === 'row') return item.parentKey;
      return this.direction === 'rtl' ? this.getLastKey(key) : this.getFirstKey(key);
    }
  }

  getFirstKey(key, global) {
    let item;

    if (key != null) {
      item = this.collection.getItem(key);
      if (!item) return; // If global flag is not set, and a cell is currently focused,
      // move focus to the first cell in the parent row.

      if (this.isCell(item) && !global) {
        let parent = this.collection.getItem(item.parentKey);
        return [...parent.childNodes][0].key;
      }
    } // Find the first row


    key = this.findNextKey(); // If global flag is set (or if focus mode is cell), focus the first cell in the first row.

    if (key != null && item && this.isCell(item) && global || this.focusMode === 'cell') {
      let item = this.collection.getItem(key);
      key = [...item.childNodes][0].key;
    } // Otherwise, focus the row itself.


    return key;
  }

  getLastKey(key, global) {
    let item;

    if (key != null) {
      item = this.collection.getItem(key);
      if (!item) return; // If global flag is not set, and a cell is currently focused,
      // move focus to the last cell in the parent row.

      if (this.isCell(item) && !global) {
        let parent = this.collection.getItem(item.parentKey);
        let children = [...parent.childNodes];
        return children[children.length - 1].key;
      }
    } // Find the last row


    key = this.findPreviousKey(); // If global flag is set (or if focus mode is cell), focus the last cell in the last row.

    if (key != null && item && this.isCell(item) && global || this.focusMode === 'cell') {
      let item = this.collection.getItem(key);
      let children = [...item.childNodes];
      key = children[children.length - 1].key;
    } // Otherwise, focus the row itself.


    return key;
  }

  getItem(key) {
    return this.ref.current.querySelector(`[data-key="${key}"]`);
  }

  getItemRect(key) {
    var ref;
    if (this.layout) return (ref = this.layout.getLayoutInfo(key)) === null || ref === void 0 ? void 0 : ref.rect;
    let item = this.getItem(key);
    if (item) return new $60423f92c7f9ad87$export$c79fc6492f3af13d(item.offsetLeft, item.offsetTop, item.offsetWidth, item.offsetHeight);
  }

  getPageHeight() {
    var ref, ref1, ref2;
    if (this.layout) return (ref = this.layout.virtualizer) === null || ref === void 0 ? void 0 : ref.visibleRect.height;
    return (ref1 = this.ref) === null || ref1 === void 0 ? void 0 : (ref2 = ref1.current) === null || ref2 === void 0 ? void 0 : ref2.offsetHeight;
  }

  getContentHeight() {
    var ref, ref3;
    if (this.layout) return this.layout.getContentSize().height;
    return (ref = this.ref) === null || ref === void 0 ? void 0 : (ref3 = ref.current) === null || ref3 === void 0 ? void 0 : ref3.scrollHeight;
  }

  getKeyPageAbove(key) {
    let itemRect = this.getItemRect(key);
    if (!itemRect) return null;
    let pageY = Math.max(0, itemRect.maxY - this.getPageHeight());

    while (itemRect && itemRect.y > pageY) {
      key = this.getKeyAbove(key);
      itemRect = this.getItemRect(key);
    }

    return key;
  }

  getKeyPageBelow(key) {
    let itemRect = this.getItemRect(key);
    if (!itemRect) return null;
    let pageHeight = this.getPageHeight();
    let pageY = Math.min(this.getContentHeight(), itemRect.y + pageHeight);

    while (itemRect && itemRect.maxY < pageY) {
      let nextKey = this.getKeyBelow(key);
      itemRect = this.getItemRect(nextKey); // Guard against case where maxY of the last key is barely less than pageY due to rounding
      // and thus it attempts to set key to null

      if (nextKey != null) key = nextKey;
    }

    return key;
  }

  getKeyForSearch(search, fromKey) {
    if (!this.collator) return null;
    let collection = this.collection;
    let key = fromKey !== null && fromKey !== void 0 ? fromKey : this.getFirstKey(); // If the starting key is a cell, search from its parent row.

    let startItem = collection.getItem(key);
    if (startItem.type === 'cell') key = startItem.parentKey;
    let hasWrapped = false;

    while (key != null) {
      let item = collection.getItem(key); // check row text value for match

      if (item.textValue) {
        let substring = item.textValue.slice(0, search.length);

        if (this.collator.compare(substring, search) === 0) {
          if (this.isRow(item) && this.focusMode === 'cell') return [...item.childNodes][0].key;
          return item.key;
        }
      }

      key = this.findNextKey(key); // Wrap around when reaching the end of the collection

      if (key == null && !hasWrapped) {
        key = this.getFirstKey();
        hasWrapped = true;
      }
    }

    return null;
  }

  constructor(options) {
    this.collection = options.collection;
    this.disabledKeys = options.disabledKeys;
    this.ref = options.ref;
    this.direction = options.direction;
    this.collator = options.collator;
    this.layout = options.layout;
    this.focusMode = options.focusMode || 'row';
  }

}

var $83c6e2eafa584c67$exports = {};
grid_dist_module_$parcel$export($83c6e2eafa584c67$exports, "useGrid", () => $83c6e2eafa584c67$export$f6b86a04e5d66d90);
const $1af922eb41e03c8f$export$e6235c0d09b995d0 = new WeakMap();
var $1dbe5ffd32adb38c$exports = {};
var $682989befd4f478d$exports = {};
$682989befd4f478d$exports = JSON.parse("{\"deselectedItem\":\"{item} غير المحدد\",\"longPressToSelect\":\"اضغط مطولًا للدخول إلى وضع التحديد.\",\"select\":\"تحديد\",\"selectedAll\":\"جميع العناصر المحددة.\",\"selectedCount\":\"{count, plural, =0 {لم يتم تحديد عناصر} one {# عنصر محدد} other {# عنصر محدد}}.\",\"selectedItem\":\"{item} المحدد\"}");
var $f7fca02019afd941$exports = {};
$f7fca02019afd941$exports = JSON.parse("{\"deselectedItem\":\"{item} не е избран.\",\"longPressToSelect\":\"Натиснете и задръжте за да влезете в избирателен режим.\",\"select\":\"Изберете\",\"selectedAll\":\"Всички елементи са избрани.\",\"selectedCount\":\"{count, plural, =0 {Няма избрани елементи} one {# избран елемент} other {# избрани елементи}}.\",\"selectedItem\":\"{item} избран.\"}");
var $8f86f40be75387f1$exports = {};
$8f86f40be75387f1$exports = JSON.parse("{\"deselectedItem\":\"Položka {item} není vybrána.\",\"longPressToSelect\":\"Dlouhým stisknutím přejdete do režimu výběru.\",\"select\":\"Vybrat\",\"selectedAll\":\"Vybrány všechny položky.\",\"selectedCount\":\"{count, plural, =0 {Nevybrány žádné položky} one {Vybrána # položka} other {Vybráno # položek}}.\",\"selectedItem\":\"Vybrána položka {item}.\"}");
var $db24ba43c8d652ee$exports = {};
$db24ba43c8d652ee$exports = JSON.parse("{\"deselectedItem\":\"{item} ikke valgt.\",\"longPressToSelect\":\"Lav et langt tryk for at aktivere valgtilstand.\",\"select\":\"Vælg\",\"selectedAll\":\"Alle elementer valgt.\",\"selectedCount\":\"{count, plural, =0 {Ingen elementer valgt} one {# element valgt} other {# elementer valgt}}.\",\"selectedItem\":\"{item} valgt.\"}");
var $f8f1e72c8b5447d6$exports = {};
$f8f1e72c8b5447d6$exports = JSON.parse("{\"deselectedItem\":\"{item} nicht ausgewählt.\",\"longPressToSelect\":\"Gedrückt halten, um Auswahlmodus zu öffnen.\",\"select\":\"Auswählen\",\"selectedAll\":\"Alle Elemente ausgewählt.\",\"selectedCount\":\"{count, plural, =0 {Keine Elemente ausgewählt} one {# Element ausgewählt} other {# Elemente ausgewählt}}.\",\"selectedItem\":\"{item} ausgewählt.\"}");
var $9a73ed2983c3ab0b$exports = {};
$9a73ed2983c3ab0b$exports = JSON.parse("{\"deselectedItem\":\"Δεν επιλέχθηκε το στοιχείο {item}.\",\"longPressToSelect\":\"Πατήστε παρατεταμένα για να μπείτε σε λειτουργία επιλογής.\",\"select\":\"Επιλογή\",\"selectedAll\":\"Επιλέχθηκαν όλα τα στοιχεία.\",\"selectedCount\":\"{count, plural, =0 {Δεν επιλέχθηκαν στοιχεία} one {Επιλέχθηκε # στοιχείο} other {Επιλέχθηκαν # στοιχεία}}.\",\"selectedItem\":\"Επιλέχθηκε το στοιχείο {item}.\"}");
var $583de0b3587601b9$exports = {};
$583de0b3587601b9$exports = JSON.parse("{\"deselectedItem\":\"{item} not selected.\",\"select\":\"Select\",\"selectedCount\":\"{count, plural, =0 {No items selected} one {# item selected} other {# items selected}}.\",\"selectedAll\":\"All items selected.\",\"selectedItem\":\"{item} selected.\",\"longPressToSelect\":\"Long press to enter selection mode.\"}");
var $147159c978043442$exports = {};
$147159c978043442$exports = JSON.parse("{\"deselectedItem\":\"{item} no seleccionado.\",\"longPressToSelect\":\"Mantenga pulsado para abrir el modo de selección.\",\"select\":\"Seleccionar\",\"selectedAll\":\"Todos los elementos seleccionados.\",\"selectedCount\":\"{count, plural, =0 {Ningún elemento seleccionado} one {# elemento seleccionado} other {# elementos seleccionados}}.\",\"selectedItem\":\"{item} seleccionado.\"}");
var $5cbb62c8a19173ac$exports = {};
$5cbb62c8a19173ac$exports = JSON.parse("{\"deselectedItem\":\"{item} pole valitud.\",\"longPressToSelect\":\"Valikurežiimi sisenemiseks vajutage pikalt.\",\"select\":\"Vali\",\"selectedAll\":\"Kõik üksused valitud.\",\"selectedCount\":\"{count, plural, =0 {Üksusi pole valitud} one {# üksus valitud} other {# üksust valitud}}.\",\"selectedItem\":\"{item} valitud.\"}");
var $a33d71dc804cc59e$exports = {};
$a33d71dc804cc59e$exports = JSON.parse("{\"deselectedItem\":\"Kohdetta {item} ei valittu.\",\"longPressToSelect\":\"Siirry valintatilaan painamalla pitkään.\",\"select\":\"Valitse\",\"selectedAll\":\"Kaikki kohteet valittu.\",\"selectedCount\":\"{count, plural, =0 {Ei yhtään kohdetta valittu} one {# kohde valittu} other {# kohdetta valittu}}.\",\"selectedItem\":\"{item} valittu.\"}");
var $92d800447793d084$exports = {};
$92d800447793d084$exports = JSON.parse("{\"deselectedItem\":\"{item} non sélectionné.\",\"longPressToSelect\":\"Appuyez de manière prolongée pour passer en mode de sélection.\",\"select\":\"Sélectionner\",\"selectedAll\":\"Tous les éléments sélectionnés.\",\"selectedCount\":\"{count, plural, =0 {Aucun élément sélectionné} one {# élément sélectionné} other {# éléments sélectionnés}}.\",\"selectedItem\":\"{item} sélectionné.\"}");
var $fe732cdb32124ea8$exports = {};
$fe732cdb32124ea8$exports = JSON.parse("{\"deselectedItem\":\"{item} לא נבחר.\",\"longPressToSelect\":\"הקשה ארוכה לכניסה למצב בחירה.\",\"select\":\"בחר\",\"selectedAll\":\"כל הפריטים נבחרו.\",\"selectedCount\":\"{count, plural, =0 {לא נבחרו פריטים} one {פריט # נבחר} other {# פריטים נבחרו}}.\",\"selectedItem\":\"{item} נבחר.\"}");
var $e41234e934efb4f5$exports = {};
$e41234e934efb4f5$exports = JSON.parse("{\"deselectedItem\":\"Stavka {item} nije odabrana.\",\"longPressToSelect\":\"Dugo pritisnite za ulazak u način odabira.\",\"select\":\"Odaberite\",\"selectedAll\":\"Odabrane su sve stavke.\",\"selectedCount\":\"{count, plural, =0 {Nije odabrana nijedna stavka} one {Odabrana je # stavka} other {Odabrano je # stavki}}.\",\"selectedItem\":\"Stavka {item} je odabrana.\"}");
var $1b0393182473bf9e$exports = {};
$1b0393182473bf9e$exports = JSON.parse("{\"deselectedItem\":\"{item} nincs kijelölve.\",\"longPressToSelect\":\"Nyomja hosszan a kijelöléshez.\",\"select\":\"Kijelölés\",\"selectedAll\":\"Az összes elem kijelölve.\",\"selectedCount\":\"{count, plural, =0 {Egy elem sincs kijelölve} one {# elem kijelölve} other {# elem kijelölve}}.\",\"selectedItem\":\"{item} kijelölve.\"}");
var $2eed782c1c110ce7$exports = {};
$2eed782c1c110ce7$exports = JSON.parse("{\"deselectedItem\":\"{item} non selezionato.\",\"longPressToSelect\":\"Premi a lungo per passare alla modalità di selezione.\",\"select\":\"Seleziona\",\"selectedAll\":\"Tutti gli elementi selezionati.\",\"selectedCount\":\"{count, plural, =0 {Nessun elemento selezionato} one {# elemento selezionato} other {# elementi selezionati}}.\",\"selectedItem\":\"{item} selezionato.\"}");
var $8b5d459f86e9b23c$exports = {};
$8b5d459f86e9b23c$exports = JSON.parse("{\"deselectedItem\":\"{item} が選択されていません。\",\"longPressToSelect\":\"長押しして選択モードを開きます。\",\"select\":\"選択\",\"selectedAll\":\"すべての項目を選択しました。\",\"selectedCount\":\"{count, plural, =0 {項目が選択されていません} one {# 項目を選択しました} other {# 項目を選択しました}}。\",\"selectedItem\":\"{item} を選択しました。\"}");
var $1949c3ad17295fd4$exports = {};
$1949c3ad17295fd4$exports = JSON.parse("{\"deselectedItem\":\"{item}이(가) 선택되지 않았습니다.\",\"longPressToSelect\":\"선택 모드로 들어가려면 길게 누르십시오.\",\"select\":\"선택\",\"selectedAll\":\"모든 항목이 선택되었습니다.\",\"selectedCount\":\"{count, plural, =0 {선택된 항목이 없습니다} one {#개 항목이 선택되었습니다} other {#개 항목이 선택되었습니다}}.\",\"selectedItem\":\"{item}이(가) 선택되었습니다.\"}");
var $f5e3df4dc8aa7b54$exports = {};
$f5e3df4dc8aa7b54$exports = JSON.parse("{\"deselectedItem\":\"{item} nepasirinkta.\",\"longPressToSelect\":\"Norėdami įjungti pasirinkimo režimą, paspauskite ir palaikykite.\",\"select\":\"Pasirinkti\",\"selectedAll\":\"Pasirinkti visi elementai.\",\"selectedCount\":\"{count, plural, =0 {Nepasirinktas nė vienas elementas} one {Pasirinktas # elementas} other {Pasirinkta elementų: #}}.\",\"selectedItem\":\"Pasirinkta: {item}.\"}");
var $9dd86690a5c2b2c5$exports = {};
$9dd86690a5c2b2c5$exports = JSON.parse("{\"deselectedItem\":\"Vienums {item} nav atlasīts.\",\"longPressToSelect\":\"Ilgi turiet nospiestu. lai ieslēgtu atlases režīmu.\",\"select\":\"Atlasīt\",\"selectedAll\":\"Atlasīti visi vienumi.\",\"selectedCount\":\"{count, plural, =0 {Nav atlasīts neviens vienums} one {Atlasīto vienumu skaits: #} other {Atlasīto vienumu skaits: #}}.\",\"selectedItem\":\"Atlasīts vienums {item}.\"}");
var $843964c3bf9a7d24$exports = {};
$843964c3bf9a7d24$exports = JSON.parse("{\"deselectedItem\":\"{item} er ikke valgt.\",\"longPressToSelect\":\"Bruk et langt trykk for å gå inn i valgmodus.\",\"select\":\"Velg\",\"selectedAll\":\"Alle elementer er valgt.\",\"selectedCount\":\"{count, plural, =0 {Ingen elementer er valgt} one {# element er valgt} other {# elementer er valgt}}.\",\"selectedItem\":\"{item} er valgt.\"}");
var $73f50e845f9ef3b4$exports = {};
$73f50e845f9ef3b4$exports = JSON.parse("{\"deselectedItem\":\"{item} niet geselecteerd.\",\"longPressToSelect\":\"Druk lang om de selectiemodus te openen.\",\"select\":\"Selecteren\",\"selectedAll\":\"Alle items geselecteerd.\",\"selectedCount\":\"{count, plural, =0 {Geen items geselecteerd} one {# item geselecteerd} other {# items geselecteerd}}.\",\"selectedItem\":\"{item} geselecteerd.\"}");
var $87f92a7e077514b2$exports = {};
$87f92a7e077514b2$exports = JSON.parse("{\"deselectedItem\":\"Nie zaznaczono {item}.\",\"longPressToSelect\":\"Naciśnij i przytrzymaj, aby wejść do trybu wyboru.\",\"select\":\"Zaznacz\",\"selectedAll\":\"Wszystkie zaznaczone elementy.\",\"selectedCount\":\"{count, plural, =0 {Nie zaznaczono żadnych elementów} one {# zaznaczony element} other {# zaznaczonych elementów}}.\",\"selectedItem\":\"Zaznaczono {item}.\"}");
var $c28c98d58ee9ff6f$exports = {};
$c28c98d58ee9ff6f$exports = JSON.parse("{\"deselectedItem\":\"{item} não selecionado.\",\"longPressToSelect\":\"Mantenha pressionado para entrar no modo de seleção.\",\"select\":\"Selecionar\",\"selectedAll\":\"Todos os itens selecionados.\",\"selectedCount\":\"{count, plural, =0 {Nenhum item selecionado} one {# item selecionado} other {# itens selecionados}}.\",\"selectedItem\":\"{item} selecionado.\"}");
var $b6b1503b17b2254d$exports = {};
$b6b1503b17b2254d$exports = JSON.parse("{\"deselectedItem\":\"{item} não selecionado.\",\"longPressToSelect\":\"Prima continuamente para entrar no modo de seleção.\",\"select\":\"Selecionar\",\"selectedAll\":\"Todos os itens selecionados.\",\"selectedCount\":\"{count, plural, =0 {Nenhum item selecionado} one {# item selecionado} other {# itens selecionados}}.\",\"selectedItem\":\"{item} selecionado.\"}");
var $8bdaeb71e50c3e1a$exports = {};
$8bdaeb71e50c3e1a$exports = JSON.parse("{\"deselectedItem\":\"{item} neselectat.\",\"longPressToSelect\":\"Apăsați lung pentru a intra în modul de selectare.\",\"select\":\"Selectare\",\"selectedAll\":\"Toate elementele selectate.\",\"selectedCount\":\"{count, plural, =0 {Niciun element selectat} one {# element selectat} other {# elemente selectate}}.\",\"selectedItem\":\"{item} selectat.\"}");
var $ec2b852dd7c3d1f2$exports = {};
$ec2b852dd7c3d1f2$exports = JSON.parse("{\"deselectedItem\":\"{item} не выбрано.\",\"longPressToSelect\":\"Нажмите и удерживайте для входа в режим выбора.\",\"select\":\"Выбрать\",\"selectedAll\":\"Выбраны все элементы.\",\"selectedCount\":\"{count, plural, =0 {Нет выбранных элементов} one {# элемент выбран} other {# элементов выбрано}}.\",\"selectedItem\":\"{item} выбрано.\"}");
var $79e6d900d6a4f82d$exports = {};
$79e6d900d6a4f82d$exports = JSON.parse("{\"deselectedItem\":\"Nevybraté položky: {item}.\",\"longPressToSelect\":\"Dlhším stlačením prejdite do režimu výberu.\",\"select\":\"Vybrať\",\"selectedAll\":\"Všetky vybraté položky.\",\"selectedCount\":\"{count, plural, =0 {Žiadne vybraté položky} one {# vybratá položka} other {Počet vybratých položiek:#}}.\",\"selectedItem\":\"Vybraté položky: {item}.\"}");
var $f4c1f0d5d4d03d80$exports = {};
$f4c1f0d5d4d03d80$exports = JSON.parse("{\"deselectedItem\":\"Element {item} ni izbran.\",\"longPressToSelect\":\"Za izbirni način pritisnite in dlje časa držite.\",\"select\":\"Izberite\",\"selectedAll\":\"Vsi elementi so izbrani.\",\"selectedCount\":\"{count, plural, =0 {Noben element ni izbran} one {# element je izbran} other {# elementov je izbranih}}.\",\"selectedItem\":\"Element {item} je izbran.\"}");
var $46252cd87269b10b$exports = {};
$46252cd87269b10b$exports = JSON.parse("{\"deselectedItem\":\"{item} nije izabrano.\",\"longPressToSelect\":\"Dugo pritisnite za ulazak u režim biranja.\",\"select\":\"Izaberite\",\"selectedAll\":\"Izabrane su sve stavke.\",\"selectedCount\":\"{count, plural, =0 {Nije izabrana nijedna stavka} one {Izabrana je # stavka} other {Izabrano je # stavki}}.\",\"selectedItem\":\"{item} je izabrano.\"}");
var $d4d5d8dab362555c$exports = {};
$d4d5d8dab362555c$exports = JSON.parse("{\"deselectedItem\":\"{item} ej markerat.\",\"longPressToSelect\":\"Tryck länge när du vill öppna väljarläge.\",\"select\":\"Markera\",\"selectedAll\":\"Alla markerade objekt.\",\"selectedCount\":\"{count, plural, =0 {Inga markerade objekt} one {# markerat objekt} other {# markerade objekt}}.\",\"selectedItem\":\"{item} markerat.\"}");
var $3d55d1f97c377e83$exports = {};
$3d55d1f97c377e83$exports = JSON.parse("{\"deselectedItem\":\"{item} seçilmedi.\",\"longPressToSelect\":\"Seçim moduna girmek için uzun basın.\",\"select\":\"Seç\",\"selectedAll\":\"Tüm ögeler seçildi.\",\"selectedCount\":\"{count, plural, =0 {Hiçbir öge seçilmedi} one {# öge seçildi} other {# öge seçildi}}.\",\"selectedItem\":\"{item} seçildi.\"}");
var $5368512f1c703a3f$exports = {};
$5368512f1c703a3f$exports = JSON.parse("{\"deselectedItem\":\"{item} не вибрано.\",\"longPressToSelect\":\"Виконайте довге натиснення, щоб перейти в режим вибору.\",\"select\":\"Вибрати\",\"selectedAll\":\"Усі елементи вибрано.\",\"selectedCount\":\"{count, plural, =0 {Жодних елементів не вибрано} one {# елемент вибрано} other {Вибрано елементів: #}}.\",\"selectedItem\":\"{item} вибрано.\"}");
var $f1316b1074463583$exports = {};
$f1316b1074463583$exports = JSON.parse("{\"deselectedItem\":\"未选择 {item}。\",\"longPressToSelect\":\"长按以进入选择模式。\",\"select\":\"选择\",\"selectedAll\":\"已选择所有项目。\",\"selectedCount\":\"{count, plural, =0 {未选择项目} one {已选择 # 个项目} other {已选择 # 个项目}}。\",\"selectedItem\":\"已选择 {item}。\"}");
var $7e60654723031b6f$exports = {};
$7e60654723031b6f$exports = JSON.parse("{\"deselectedItem\":\"未選取「{item}」。\",\"longPressToSelect\":\"長按以進入選擇模式。\",\"select\":\"選取\",\"selectedAll\":\"已選取所有項目。\",\"selectedCount\":\"{count, plural, =0 {未選取任何項目} one {已選取 # 個項目} other {已選取 # 個項目}}。\",\"selectedItem\":\"已選取「{item}」。\"}");
$1dbe5ffd32adb38c$exports = {
  "ar-AE": $682989befd4f478d$exports,
  "bg-BG": $f7fca02019afd941$exports,
  "cs-CZ": $8f86f40be75387f1$exports,
  "da-DK": $db24ba43c8d652ee$exports,
  "de-DE": $f8f1e72c8b5447d6$exports,
  "el-GR": $9a73ed2983c3ab0b$exports,
  "en-US": $583de0b3587601b9$exports,
  "es-ES": $147159c978043442$exports,
  "et-EE": $5cbb62c8a19173ac$exports,
  "fi-FI": $a33d71dc804cc59e$exports,
  "fr-FR": $92d800447793d084$exports,
  "he-IL": $fe732cdb32124ea8$exports,
  "hr-HR": $e41234e934efb4f5$exports,
  "hu-HU": $1b0393182473bf9e$exports,
  "it-IT": $2eed782c1c110ce7$exports,
  "ja-JP": $8b5d459f86e9b23c$exports,
  "ko-KR": $1949c3ad17295fd4$exports,
  "lt-LT": $f5e3df4dc8aa7b54$exports,
  "lv-LV": $9dd86690a5c2b2c5$exports,
  "nb-NO": $843964c3bf9a7d24$exports,
  "nl-NL": $73f50e845f9ef3b4$exports,
  "pl-PL": $87f92a7e077514b2$exports,
  "pt-BR": $c28c98d58ee9ff6f$exports,
  "pt-PT": $b6b1503b17b2254d$exports,
  "ro-RO": $8bdaeb71e50c3e1a$exports,
  "ru-RU": $ec2b852dd7c3d1f2$exports,
  "sk-SK": $79e6d900d6a4f82d$exports,
  "sl-SI": $f4c1f0d5d4d03d80$exports,
  "sr-SP": $46252cd87269b10b$exports,
  "sv-SE": $d4d5d8dab362555c$exports,
  "tr-TR": $3d55d1f97c377e83$exports,
  "uk-UA": $5368512f1c703a3f$exports,
  "zh-CN": $f1316b1074463583$exports,
  "zh-TW": $7e60654723031b6f$exports
};

function $5b9b5b5723db6ae1$export$be42ebdab07ae4c2(props) {
  let formatMessage = $321bc95feeb923dd$export$ec23bf898b1eed85( /*@__PURE__*/$parcel$interopDefault($1dbe5ffd32adb38c$exports));
  let modality = module_$507fabe10e71c6fb$export$98e20ec92f614cfe(); // null is the default if the user hasn't interacted with the table at all yet or the rest of the page

  let shouldLongPress = (modality === 'pointer' || modality === 'virtual' || modality == null) && typeof window !== 'undefined' && 'ontouchstart' in window;
  let interactionDescription = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let selectionMode = props.selectionManager.selectionMode;
    let selectionBehavior = props.selectionManager.selectionBehavior;
    let message = undefined;
    if (shouldLongPress) message = formatMessage('longPressToSelect');
    return selectionBehavior === 'replace' && selectionMode !== 'none' && props.hasItemActions ? message : undefined;
  }, [props.selectionManager.selectionMode, props.selectionManager.selectionBehavior, props.hasItemActions, formatMessage, shouldLongPress]);
  let descriptionProps = module_$ef06256079686ba0$export$f8aeda7b10753fa1(interactionDescription);
  return descriptionProps;
}

function $83c6e2eafa584c67$export$f6b86a04e5d66d90(props, state, ref1) {
  let {
    isVirtualized: isVirtualized,
    keyboardDelegate: keyboardDelegate,
    focusMode: focusMode,
    getRowText = key => {
      var ref;
      return (ref = state.collection.getItem(key)) === null || ref === void 0 ? void 0 : ref.textValue;
    },
    scrollRef: scrollRef,
    onRowAction: onRowAction,
    onCellAction: onCellAction
  } = props;
  let formatMessage = $321bc95feeb923dd$export$ec23bf898b1eed85( /*@__PURE__*/$parcel$interopDefault($1dbe5ffd32adb38c$exports));
  if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.'); // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
  // When virtualized, the layout object will be passed in as a prop and override this.

  let collator = $325a3faab7a68acd$export$a16aca283550c30d({
    usage: 'search',
    sensitivity: 'base'
  });
  let {
    direction: direction
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let delegate = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => keyboardDelegate || new $d1c300d9c497e402$export$de9feff04fda126e({
    collection: state.collection,
    disabledKeys: state.disabledKeys,
    ref: ref1,
    direction: direction,
    collator: collator,
    focusMode: focusMode
  }), [keyboardDelegate, state.collection, state.disabledKeys, ref1, direction, collator, focusMode]);
  let {
    collectionProps: collectionProps
  } = $ae20dd8cbca75726$export$d6daf82dcd84e87c({
    ref: ref1,
    selectionManager: state.selectionManager,
    keyboardDelegate: delegate,
    isVirtualized: isVirtualized,
    scrollRef: scrollRef
  });
  let id = module_$bdb11010cef70236$export$f680877a34711e37();
  $1af922eb41e03c8f$export$e6235c0d09b995d0.set(state, {
    keyboardDelegate: delegate,
    actions: {
      onRowAction: onRowAction,
      onCellAction: onCellAction
    }
  });
  let descriptionProps = $5b9b5b5723db6ae1$export$be42ebdab07ae4c2({
    selectionManager: state.selectionManager,
    hasItemActions: !!(onRowAction || onCellAction)
  });
  let domProps = module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  });
  let gridProps = module_$3ef42575df84b30b$export$9d1611c77c2fe928(domProps, {
    role: 'grid',
    id: id,
    'aria-multiselectable': state.selectionManager.selectionMode === 'multiple' ? 'true' : undefined
  }, collectionProps, descriptionProps);

  if (isVirtualized) {
    gridProps['aria-rowcount'] = state.collection.size;
    gridProps['aria-colcount'] = state.collection.columnCount;
  } // Many screen readers do not announce when items in a grid are selected/deselected.
  // We do this using an ARIA live region.


  let selection = state.selectionManager.rawSelection;
  let lastSelection = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(selection);
  module_$4f58c5f72bcf79f7$export$496315a1608d9602(() => {
    var ref;

    if (!state.selectionManager.isFocused) {
      lastSelection.current = selection;
      return;
    }

    let addedKeys = $83c6e2eafa584c67$var$diffSelection(selection, lastSelection.current);
    let removedKeys = $83c6e2eafa584c67$var$diffSelection(lastSelection.current, selection); // If adding or removing a single row from the selection, announce the name of that item.

    let isReplace = state.selectionManager.selectionBehavior === 'replace';
    let messages = [];

    if (state.selectionManager.selectedKeys.size === 1 && isReplace) {
      if (state.collection.getItem(state.selectionManager.selectedKeys.keys().next().value)) {
        let currentSelectionText = getRowText(state.selectionManager.selectedKeys.keys().next().value);
        if (currentSelectionText) messages.push(formatMessage('selectedItem', {
          item: currentSelectionText
        }));
      }
    } else if (addedKeys.size === 1 && removedKeys.size === 0) {
      let addedText = getRowText(addedKeys.keys().next().value);
      if (addedText) messages.push(formatMessage('selectedItem', {
        item: addedText
      }));
    } else if (removedKeys.size === 1 && addedKeys.size === 0) {
      if (state.collection.getItem(removedKeys.keys().next().value)) {
        let removedText = getRowText(removedKeys.keys().next().value);
        if (removedText) messages.push(formatMessage('deselectedItem', {
          item: removedText
        }));
      }
    } // Announce how many items are selected, except when selecting the first item.


    if (state.selectionManager.selectionMode === 'multiple') {
      if (messages.length === 0 || selection === 'all' || selection.size > 1 || lastSelection.current === 'all' || ((ref = lastSelection.current) === null || ref === void 0 ? void 0 : ref.size) > 1) messages.push(selection === 'all' ? formatMessage('selectedAll') : formatMessage('selectedCount', {
        count: selection.size
      }));
    }

    if (messages.length > 0) $319e236875307eab$export$a9b970dcc4ae71a9(messages.join(' '));
    lastSelection.current = selection;
  }, [selection]);
  return {
    gridProps: gridProps
  };
}

function $83c6e2eafa584c67$var$diffSelection(a, b) {
  let res = new Set();
  if (a === 'all' || b === 'all') return res;

  for (let key of a.keys()) if (!b.has(key)) res.add(key);

  return res;
}

var $e45487f8ba1cbdbf$exports = {};
grid_dist_module_$parcel$export($e45487f8ba1cbdbf$exports, "useGridRowGroup", () => $e45487f8ba1cbdbf$export$d3037f5d3f3e51bf);

function $e45487f8ba1cbdbf$export$d3037f5d3f3e51bf() {
  return {
    rowGroupProps: {
      role: 'rowgroup'
    }
  };
}

var $4159a7a9cbb0cc18$exports = {};
grid_dist_module_$parcel$export($4159a7a9cbb0cc18$exports, "useGridRow", () => $4159a7a9cbb0cc18$export$96357d5a73f686fa);

function $4159a7a9cbb0cc18$export$96357d5a73f686fa(props, state, ref) {
  let {
    node: node,
    isVirtualized: isVirtualized,
    shouldSelectOnPressUp: shouldSelectOnPressUp,
    onAction: onAction
  } = props;
  let {
    actions: {
      onRowAction: onRowAction
    }
  } = $1af922eb41e03c8f$export$e6235c0d09b995d0.get(state);
  let {
    itemProps: itemProps,
    isPressed: isPressed
  } = $880e95eb8b93ba9a$export$ecf600387e221c37({
    selectionManager: state.selectionManager,
    key: node.key,
    ref: ref,
    isVirtualized: isVirtualized,
    shouldSelectOnPressUp: shouldSelectOnPressUp,
    onAction: onRowAction ? () => onRowAction(node.key) : onAction
  });
  let isSelected = state.selectionManager.isSelected(node.key);
  let rowProps = {
    role: 'row',
    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined,
    ...itemProps
  };
  if (isVirtualized) rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based

  return {
    rowProps: rowProps,
    isPressed: isPressed
  };
}

var $ab90dcbc1b5466d0$exports = {};
grid_dist_module_$parcel$export($ab90dcbc1b5466d0$exports, "useGridCell", () => $ab90dcbc1b5466d0$export$c7e10bfc0c59f67c);

function $ab90dcbc1b5466d0$export$c7e10bfc0c59f67c(props, state, ref) {
  let {
    node: node,
    isVirtualized: isVirtualized,
    focusMode = 'child',
    shouldSelectOnPressUp: shouldSelectOnPressUp,
    onAction: onAction
  } = props;
  let {
    direction: direction
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let {
    keyboardDelegate: keyboardDelegate,
    actions: {
      onCellAction: onCellAction
    }
  } = $1af922eb41e03c8f$export$e6235c0d09b995d0.get(state); // Handles focusing the cell. If there is a focusable child,
  // it is focused, otherwise the cell itself is focused.

  let focus = () => {
    let treeWalker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ref.current);

    if (focusMode === 'child') {
      let focusable = state.selectionManager.childFocusStrategy === 'last' ? $ab90dcbc1b5466d0$var$last(treeWalker) : treeWalker.firstChild();

      if (focusable) {
        $6a99195332edec8b$export$80f3e147d781571c(focusable);
        return;
      }
    }

    if (!ref.current.contains(document.activeElement)) $6a99195332edec8b$export$80f3e147d781571c(ref.current);
  };

  let {
    itemProps: itemProps,
    isPressed: isPressed
  } = $880e95eb8b93ba9a$export$ecf600387e221c37({
    selectionManager: state.selectionManager,
    key: node.key,
    ref: ref,
    isVirtualized: isVirtualized,
    focus: focus,
    shouldSelectOnPressUp: shouldSelectOnPressUp,
    onAction: onCellAction ? () => onCellAction(node.key) : onAction
  });

  let onKeyDown = e => {
    if (!e.currentTarget.contains(e.target)) return;
    let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ref.current);
    walker.currentNode = document.activeElement;

    switch (e.key) {
      case 'ArrowLeft':
        {
          // Find the next focusable element within the cell.
          let focusable = direction === 'rtl' ? walker.nextNode() : walker.previousNode(); // Don't focus the cell itself if focusMode is "child"

          if (focusMode === 'child' && focusable === ref.current) focusable = null;

          if (focusable) {
            e.preventDefault();
            e.stopPropagation();
            $6a99195332edec8b$export$80f3e147d781571c(focusable);
          } else {
            // If there is no next focusable child, then move to the next cell to the left of this one.
            // This will be handled by useSelectableCollection. However, if there is no cell to the left
            // of this one, only one column, and the grid doesn't focus rows, then the next key will be the
            // same as this one. In that case we need to handle focusing either the cell or the first/last
            // child, depending on the focus mode.
            let prev = keyboardDelegate.getKeyLeftOf(node.key);
            if (prev !== node.key) break;
            e.preventDefault();
            e.stopPropagation();
            if (focusMode === 'cell' && direction === 'rtl') $6a99195332edec8b$export$80f3e147d781571c(ref.current);else {
              walker.currentNode = ref.current;
              focusable = direction === 'rtl' ? walker.firstChild() : $ab90dcbc1b5466d0$var$last(walker);
              if (focusable) $6a99195332edec8b$export$80f3e147d781571c(focusable);
            }
          }

          break;
        }

      case 'ArrowRight':
        {
          let focusable = direction === 'rtl' ? walker.previousNode() : walker.nextNode();
          if (focusMode === 'child' && focusable === ref.current) focusable = null;

          if (focusable) {
            e.preventDefault();
            e.stopPropagation();
            $6a99195332edec8b$export$80f3e147d781571c(focusable);
          } else {
            let next = keyboardDelegate.getKeyRightOf(node.key);
            if (next !== node.key) break;
            e.preventDefault();
            e.stopPropagation();
            if (focusMode === 'cell' && direction === 'ltr') $6a99195332edec8b$export$80f3e147d781571c(ref.current);else {
              walker.currentNode = ref.current;
              focusable = direction === 'rtl' ? $ab90dcbc1b5466d0$var$last(walker) : walker.firstChild();
              if (focusable) $6a99195332edec8b$export$80f3e147d781571c(focusable);
            }
          }

          break;
        }

      case 'ArrowUp':
      case 'ArrowDown':
        // Prevent this event from reaching cell children, e.g. menu buttons. We want arrow keys to navigate
        // to the cell above/below instead. We need to re-dispatch the event from a higher parent so it still
        // bubbles and gets handled by useSelectableCollection.
        if (!e.altKey && ref.current.contains(e.target)) {
          e.stopPropagation();
          e.preventDefault();
          ref.current.parentElement.dispatchEvent(new KeyboardEvent(e.nativeEvent.type, e.nativeEvent));
        }

        break;
    }
  }; // Grid cells can have focusable elements inside them. In this case, focus should
  // be marshalled to that element rather than focusing the cell itself.


  let onFocus = e => {
    if (e.target !== ref.current) {
      // useSelectableItem only handles setting the focused key when
      // the focused element is the gridcell itself. We also want to
      // set the focused key when a child element receives focus.
      // If focus is currently visible (e.g. the user is navigating with the keyboard),
      // then skip this. We want to restore focus to the previously focused row/cell
      // in that case since the table should act like a single tab stop.
      if (!module_$507fabe10e71c6fb$export$b9b3dfddab17db27()) state.selectionManager.setFocusedKey(node.key);
      return;
    } // If the cell itself is focused, wait a frame so that focus finishes propagatating
    // up to the tree, and move focus to a focusable child if possible.


    requestAnimationFrame(() => {
      if (focusMode === 'child' && document.activeElement === ref.current) focus();
    });
  };

  let gridCellProps = module_$3ef42575df84b30b$export$9d1611c77c2fe928(itemProps, {
    role: 'gridcell',
    onKeyDownCapture: onKeyDown,
    onFocus: onFocus
  });
  if (isVirtualized) gridCellProps['aria-colindex'] = node.index + 1; // aria-colindex is 1-based

  return {
    gridCellProps: gridCellProps,
    isPressed: isPressed
  };
}

function $ab90dcbc1b5466d0$var$last(walker) {
  let next;
  let last;

  do {
    last = walker.lastChild();
    if (last) next = last;
  } while (last);

  return next;
}

var $7cb39d07f245a780$exports = {};
grid_dist_module_$parcel$export($7cb39d07f245a780$exports, "useGridSelectionCheckbox", () => $7cb39d07f245a780$export$70e2eed1a92976ad);

function $7cb39d07f245a780$export$70e2eed1a92976ad(props, state) {
  let {
    key: key
  } = props;
  let manager = state.selectionManager;
  let checkboxId = module_$bdb11010cef70236$export$f680877a34711e37();
  let isDisabled = state.disabledKeys.has(key);
  let isSelected = state.selectionManager.isSelected(key);

  let onChange = () => manager.select(key);

  const formatMessage = $321bc95feeb923dd$export$ec23bf898b1eed85( /*@__PURE__*/$parcel$interopDefault($1dbe5ffd32adb38c$exports));
  return {
    checkboxProps: {
      id: checkboxId,
      'aria-label': formatMessage('select'),
      isSelected: isSelected,
      isDisabled: isDisabled || manager.selectionMode === 'none',
      onChange: onChange
    }
  };
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/table/dist/module.js








function module_$parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

function table_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $58b38183c6c3f0ee$exports = {};
table_dist_module_$parcel$export($58b38183c6c3f0ee$exports, "useTable", () => $58b38183c6c3f0ee$export$25bceaac3c7e4dc7);
const $7313df745d52c961$export$552312adfd451dab = new WeakMap();

function $7313df745d52c961$var$normalizeKey(key) {
  if (typeof key === 'string') return key.replace(/\s*/g, '');
  return '' + key;
}

function $7313df745d52c961$export$37cd4213f2ad742e(state, columnKey) {
  let gridId = $7313df745d52c961$export$552312adfd451dab.get(state);
  if (!gridId) throw new Error('Unknown grid');
  return `${gridId}-${$7313df745d52c961$var$normalizeKey(columnKey)}`;
}

function $7313df745d52c961$export$19baff3266315d44(state, rowKey, columnKey) {
  let gridId = $7313df745d52c961$export$552312adfd451dab.get(state);
  if (!gridId) throw new Error('Unknown grid');
  return `${gridId}-${$7313df745d52c961$var$normalizeKey(rowKey)}-${$7313df745d52c961$var$normalizeKey(columnKey)}`;
}

function $7313df745d52c961$export$85069b70317f543(state, rowKey) {
  // A row is labelled by it's row headers.
  return [...state.collection.rowHeaderColumnKeys].map(columnKey => $7313df745d52c961$export$19baff3266315d44(state, rowKey, columnKey)).join(' ');
}

var $c7646422f16a0df1$exports = {};
var $1186e5e0799b36ac$exports = {};
$1186e5e0799b36ac$exports = JSON.parse("{\"ascending\":\"تصاعدي\",\"ascendingSort\":\"ترتيب حسب العمود {columnName} بترتيب تصاعدي\",\"descending\":\"تنازلي\",\"descendingSort\":\"ترتيب حسب العمود {columnName} بترتيب تنازلي\",\"select\":\"تحديد\",\"selectAll\":\"تحديد الكل\",\"sortable\":\"عمود قابل للترتيب\"}");
var $05552a49bd2dff40$exports = {};
$05552a49bd2dff40$exports = JSON.parse("{\"ascending\":\"възходящ\",\"ascendingSort\":\"сортирано по колона {columnName} във възходящ ред\",\"descending\":\"низходящ\",\"descendingSort\":\"сортирано по колона {columnName} в низходящ ред\",\"select\":\"Изберете\",\"selectAll\":\"Изберете всичко\",\"sortable\":\"сортираща колона\"}");
var $d5ddf806ae6b18d7$exports = {};
$d5ddf806ae6b18d7$exports = JSON.parse("{\"ascending\":\"vzestupně\",\"ascendingSort\":\"řazeno vzestupně podle sloupce {columnName}\",\"descending\":\"sestupně\",\"descendingSort\":\"řazeno sestupně podle sloupce {columnName}\",\"select\":\"Vybrat\",\"selectAll\":\"Vybrat vše\",\"sortable\":\"sloupec s možností řazení\"}");
var $a07754e38ed53b62$exports = {};
$a07754e38ed53b62$exports = JSON.parse("{\"ascending\":\"stigende\",\"ascendingSort\":\"sorteret efter kolonne {columnName} i stigende rækkefølge\",\"descending\":\"faldende\",\"descendingSort\":\"sorteret efter kolonne {columnName} i faldende rækkefølge\",\"select\":\"Vælg\",\"selectAll\":\"Vælg alle\",\"sortable\":\"sorterbar kolonne\"}");
var $d635f89a9d936a8b$exports = {};
$d635f89a9d936a8b$exports = JSON.parse("{\"ascending\":\"aufsteigend\",\"ascendingSort\":\"sortiert nach Spalte {columnName} in aufsteigender Reihenfolge\",\"descending\":\"absteigend\",\"descendingSort\":\"sortiert nach Spalte {columnName} in absteigender Reihenfolge\",\"select\":\"Auswählen\",\"selectAll\":\"Alles auswählen\",\"sortable\":\"sortierbare Spalte\"}");
var $000d6149b3a1b9d0$exports = {};
$000d6149b3a1b9d0$exports = JSON.parse("{\"ascending\":\"αύξουσα\",\"ascendingSort\":\"διαλογή ανά στήλη {columnName} σε αύξουσα σειρά\",\"descending\":\"φθίνουσα\",\"descendingSort\":\"διαλογή ανά στήλη {columnName} σε φθίνουσα σειρά\",\"select\":\"Επιλογή\",\"selectAll\":\"Επιλογή όλων\",\"sortable\":\"Στήλη διαλογής\"}");
var $191544919a1c5c22$exports = {};
$191544919a1c5c22$exports = JSON.parse("{\"select\":\"Select\",\"selectAll\":\"Select All\",\"sortable\":\"sortable column\",\"ascending\":\"ascending\",\"descending\":\"descending\",\"ascendingSort\":\"sorted by column {columnName} in ascending order\",\"descendingSort\":\"sorted by column {columnName} in descending order\"}");
var $c02c85bf08ae994f$exports = {};
$c02c85bf08ae994f$exports = JSON.parse("{\"ascending\":\"de subida\",\"ascendingSort\":\"ordenado por columna {columnName} en orden de subida\",\"descending\":\"de bajada\",\"descendingSort\":\"ordenado por columna {columnName} en orden de bajada\",\"select\":\"Seleccionar\",\"selectAll\":\"Seleccionar todos\",\"sortable\":\"columna ordenable\"}");
var $4d45058d81ae6af8$exports = {};
$4d45058d81ae6af8$exports = JSON.parse("{\"ascending\":\"tõusev järjestus\",\"ascendingSort\":\"sorditud veeru järgi {columnName} tõusvas järjestuses\",\"descending\":\"laskuv järjestus\",\"descendingSort\":\"sorditud veeru järgi {columnName} laskuvas järjestuses\",\"select\":\"Vali\",\"selectAll\":\"Vali kõik\",\"sortable\":\"sorditav veerg\"}");
var $f116f4de9eb991af$exports = {};
$f116f4de9eb991af$exports = JSON.parse("{\"ascending\":\"nouseva\",\"ascendingSort\":\"lajiteltu sarakkeen {columnName} mukaan nousevassa järjestyksessä\",\"descending\":\"laskeva\",\"descendingSort\":\"lajiteltu sarakkeen {columnName} mukaan laskevassa järjestyksessä\",\"select\":\"Valitse\",\"selectAll\":\"Valitse kaikki\",\"sortable\":\"lajiteltava sarake\"}");
var $894a03bd79ce68ec$exports = {};
$894a03bd79ce68ec$exports = JSON.parse("{\"ascending\":\"croissant\",\"ascendingSort\":\"trié en fonction de la colonne {columnName} par ordre croissant\",\"descending\":\"décroissant\",\"descendingSort\":\"trié en fonction de la colonne {columnName} par ordre décroissant\",\"select\":\"Sélectionner\",\"selectAll\":\"Sélectionner tout\",\"sortable\":\"colonne triable\"}");
var $aae83a6427b8f1d1$exports = {};
$aae83a6427b8f1d1$exports = JSON.parse("{\"ascending\":\"עולה\",\"ascendingSort\":\"מוין לפי עמודה {columnName} בסדר עולה\",\"descending\":\"יורד\",\"descendingSort\":\"מוין לפי עמודה {columnName} בסדר יורד\",\"select\":\"בחר\",\"selectAll\":\"בחר הכול\",\"sortable\":\"עמודה שניתן למיין\"}");
var $e59996873902677f$exports = {};
$e59996873902677f$exports = JSON.parse("{\"ascending\":\"rastući\",\"ascendingSort\":\"razvrstano po stupcima {columnName} rastućem redoslijedom\",\"descending\":\"padajući\",\"descendingSort\":\"razvrstano po stupcima {columnName} padajućim redoslijedom\",\"select\":\"Odaberite\",\"selectAll\":\"Odaberite sve\",\"sortable\":\"stupac koji se može razvrstati\"}");
var $620c5a38bc1e0143$exports = {};
$620c5a38bc1e0143$exports = JSON.parse("{\"ascending\":\"növekvő\",\"ascendingSort\":\"rendezve a(z) {columnName} oszlop szerint, növekvő sorrendben\",\"descending\":\"csökkenő\",\"descendingSort\":\"rendezve a(z) {columnName} oszlop szerint, csökkenő sorrendben\",\"select\":\"Kijelölés\",\"selectAll\":\"Összes kijelölése\",\"sortable\":\"rendezendő oszlop\"}");
var $d17599c6fe9c695e$exports = {};
$d17599c6fe9c695e$exports = JSON.parse("{\"ascending\":\"crescente\",\"ascendingSort\":\"in ordine crescente in base alla colonna {columnName}\",\"descending\":\"decrescente\",\"descendingSort\":\"in ordine decrescente in base alla colonna {columnName}\",\"select\":\"Seleziona\",\"selectAll\":\"Seleziona tutto\",\"sortable\":\"colonna ordinabile\"}");
var $fdfa9d5314fe9612$exports = {};
$fdfa9d5314fe9612$exports = JSON.parse("{\"ascending\":\"昇順\",\"ascendingSort\":\"列 {columnName} を昇順で並べ替え\",\"descending\":\"降順\",\"descendingSort\":\"列 {columnName} を降順で並べ替え\",\"select\":\"選択\",\"selectAll\":\"すべて選択\",\"sortable\":\"並べ替え可能な列\"}");
var $26ae573b123ba408$exports = {};
$26ae573b123ba408$exports = JSON.parse("{\"ascending\":\"오름차순\",\"ascendingSort\":\"{columnName} 열을 기준으로 오름차순으로 정렬됨\",\"descending\":\"내림차순\",\"descendingSort\":\"{columnName} 열을 기준으로 내림차순으로 정렬됨\",\"select\":\"선택\",\"selectAll\":\"모두 선택\",\"sortable\":\"정렬 가능한 열\"}");
var $b8295c230bb18cf5$exports = {};
$b8295c230bb18cf5$exports = JSON.parse("{\"ascending\":\"didėjančia tvarka\",\"ascendingSort\":\"surikiuota pagal stulpelį {columnName} didėjančia tvarka\",\"descending\":\"mažėjančia tvarka\",\"descendingSort\":\"surikiuota pagal stulpelį {columnName} mažėjančia tvarka\",\"select\":\"Pasirinkti\",\"selectAll\":\"Pasirinkti viską\",\"sortable\":\"rikiuojamas stulpelis\"}");
var $679845996aabac22$exports = {};
$679845996aabac22$exports = JSON.parse("{\"ascending\":\"augošā secībā\",\"ascendingSort\":\"kārtots pēc kolonnas {columnName} augošā secībā\",\"descending\":\"dilstošā secībā\",\"descendingSort\":\"kārtots pēc kolonnas {columnName} dilstošā secībā\",\"select\":\"Atlasīt\",\"selectAll\":\"Atlasīt visu\",\"sortable\":\"kārtojamā kolonna\"}");
var $32237e8ade9e39c5$exports = {};
$32237e8ade9e39c5$exports = JSON.parse("{\"ascending\":\"stigende\",\"ascendingSort\":\"sortert etter kolonne {columnName} i stigende rekkefølge\",\"descending\":\"synkende\",\"descendingSort\":\"sortert etter kolonne {columnName} i synkende rekkefølge\",\"select\":\"Velg\",\"selectAll\":\"Velg alle\",\"sortable\":\"kolonne som kan sorteres\"}");
var $192233641148fdc7$exports = {};
$192233641148fdc7$exports = JSON.parse("{\"ascending\":\"oplopend\",\"ascendingSort\":\"gesorteerd in oplopende volgorde in kolom {columnName}\",\"descending\":\"aflopend\",\"descendingSort\":\"gesorteerd in aflopende volgorde in kolom {columnName}\",\"select\":\"Selecteren\",\"selectAll\":\"Alles selecteren\",\"sortable\":\"sorteerbare kolom\"}");
var $eb8ad06c43cd5d81$exports = {};
$eb8ad06c43cd5d81$exports = JSON.parse("{\"ascending\":\"rosnąco\",\"ascendingSort\":\"posortowano według kolumny {columnName} w porządku rosnącym\",\"descending\":\"malejąco\",\"descendingSort\":\"posortowano według kolumny {columnName} w porządku malejącym\",\"select\":\"Zaznacz\",\"selectAll\":\"Zaznacz wszystko\",\"sortable\":\"kolumna z możliwością sortowania\"}");
var $27bd89305f3e4e54$exports = {};
$27bd89305f3e4e54$exports = JSON.parse("{\"ascending\":\"crescente\",\"ascendingSort\":\"classificado pela coluna {columnName} em ordem crescente\",\"descending\":\"decrescente\",\"descendingSort\":\"classificado pela coluna {columnName} em ordem decrescente\",\"select\":\"Selecionar\",\"selectAll\":\"Selecionar tudo\",\"sortable\":\"coluna classificável\"}");
var $3677096ca14c6d5d$exports = {};
$3677096ca14c6d5d$exports = JSON.parse("{\"ascending\":\"ascendente\",\"ascendingSort\":\"Ordenar por coluna {columnName} em ordem ascendente\",\"descending\":\"descendente\",\"descendingSort\":\"Ordenar por coluna {columnName} em ordem descendente\",\"select\":\"Selecionar\",\"selectAll\":\"Selecionar tudo\",\"sortable\":\"Coluna ordenável\"}");
var $0428c8cc26995dbd$exports = {};
$0428c8cc26995dbd$exports = JSON.parse("{\"ascending\":\"crescătoare\",\"ascendingSort\":\"sortate după coloana {columnName} în ordine crescătoare\",\"descending\":\"descrescătoare\",\"descendingSort\":\"sortate după coloana {columnName} în ordine descrescătoare\",\"select\":\"Selectare\",\"selectAll\":\"Selectare totală\",\"sortable\":\"coloană sortabilă\"}");
var $92fdadb8d81ea931$exports = {};
$92fdadb8d81ea931$exports = JSON.parse("{\"ascending\":\"возрастание\",\"ascendingSort\":\"сортировать столбец {columnName} в порядке возрастания\",\"descending\":\"убывание\",\"descendingSort\":\"сортировать столбец {columnName} в порядке убывания\",\"select\":\"Выбрать\",\"selectAll\":\"Выбрать все\",\"sortable\":\"сортируемый столбец\"}");
var $7e0e2e9927559d58$exports = {};
$7e0e2e9927559d58$exports = JSON.parse("{\"ascending\":\"vzostupne\",\"ascendingSort\":\"zoradené zostupne podľa stĺpca {columnName}\",\"descending\":\"zostupne\",\"descendingSort\":\"zoradené zostupne podľa stĺpca {columnName}\",\"select\":\"Vybrať\",\"selectAll\":\"Vybrať všetko\",\"sortable\":\"zoraditeľný stĺpec\"}");
var $f6a9ae5c6127241a$exports = {};
$f6a9ae5c6127241a$exports = JSON.parse("{\"ascending\":\"naraščajoče\",\"ascendingSort\":\"razvrščeno po stolpcu {columnName} v naraščajočem vrstnem redu\",\"descending\":\"padajoče\",\"descendingSort\":\"razvrščeno po stolpcu {columnName} v padajočem vrstnem redu\",\"select\":\"Izberite\",\"selectAll\":\"Izberite vse\",\"sortable\":\"razvrstljivi stolpec\"}");
var $847ba751391a0af0$exports = {};
$847ba751391a0af0$exports = JSON.parse("{\"ascending\":\"rastući\",\"ascendingSort\":\"sortirano po kolonama {columnName} rastućim redosledom\",\"descending\":\"padajući\",\"descendingSort\":\"sortirano po kolonama {columnName} padajućim redosledom\",\"select\":\"Izaberite\",\"selectAll\":\"Izaberite sve\",\"sortable\":\"kolona koja se može sortirati\"}");
var $7271101036b813d5$exports = {};
$7271101036b813d5$exports = JSON.parse("{\"ascending\":\"stigande\",\"ascendingSort\":\"sorterat på kolumn {columnName} i stigande ordning\",\"descending\":\"fallande\",\"descendingSort\":\"sorterat på kolumn {columnName} i fallande ordning\",\"select\":\"Markera\",\"selectAll\":\"Markera allt\",\"sortable\":\"sorterbar kolumn\"}");
var $72c9fcabf238033a$exports = {};
$72c9fcabf238033a$exports = JSON.parse("{\"ascending\":\"artan sırada\",\"ascendingSort\":\"{columnName} sütuna göre artan düzende sırala\",\"descending\":\"azalan sırada\",\"descendingSort\":\"{columnName} sütuna göre azalan düzende sırala\",\"select\":\"Seç\",\"selectAll\":\"Tümünü Seç\",\"sortable\":\"Sıralanabilir sütun\"}");
var $75d2317f8a8b5065$exports = {};
$75d2317f8a8b5065$exports = JSON.parse("{\"ascending\":\"висхідний\",\"ascendingSort\":\"відсортовано за стовпцем {columnName} у висхідному порядку\",\"descending\":\"низхідний\",\"descendingSort\":\"відсортовано за стовпцем {columnName} у низхідному порядку\",\"select\":\"Вибрати\",\"selectAll\":\"Вибрати все\",\"sortable\":\"сортувальний стовпець\"}");
var $281e2c16dc742b2c$exports = {};
$281e2c16dc742b2c$exports = JSON.parse("{\"ascending\":\"升序\",\"ascendingSort\":\"按列 {columnName} 升序排序\",\"descending\":\"降序\",\"descendingSort\":\"按列 {columnName} 降序排序\",\"select\":\"选择\",\"selectAll\":\"全选\",\"sortable\":\"可排序的列\"}");
var $00c99c64c0775c43$exports = {};
$00c99c64c0775c43$exports = JSON.parse("{\"ascending\":\"遞增\",\"ascendingSort\":\"已依據「{columnName}」欄遞增排序\",\"descending\":\"遞減\",\"descendingSort\":\"已依據「{columnName}」欄遞減排序\",\"select\":\"選取\",\"selectAll\":\"全選\",\"sortable\":\"可排序的欄\"}");
$c7646422f16a0df1$exports = {
  "ar-AE": $1186e5e0799b36ac$exports,
  "bg-BG": $05552a49bd2dff40$exports,
  "cs-CZ": $d5ddf806ae6b18d7$exports,
  "da-DK": $a07754e38ed53b62$exports,
  "de-DE": $d635f89a9d936a8b$exports,
  "el-GR": $000d6149b3a1b9d0$exports,
  "en-US": $191544919a1c5c22$exports,
  "es-ES": $c02c85bf08ae994f$exports,
  "et-EE": $4d45058d81ae6af8$exports,
  "fi-FI": $f116f4de9eb991af$exports,
  "fr-FR": $894a03bd79ce68ec$exports,
  "he-IL": $aae83a6427b8f1d1$exports,
  "hr-HR": $e59996873902677f$exports,
  "hu-HU": $620c5a38bc1e0143$exports,
  "it-IT": $d17599c6fe9c695e$exports,
  "ja-JP": $fdfa9d5314fe9612$exports,
  "ko-KR": $26ae573b123ba408$exports,
  "lt-LT": $b8295c230bb18cf5$exports,
  "lv-LV": $679845996aabac22$exports,
  "nb-NO": $32237e8ade9e39c5$exports,
  "nl-NL": $192233641148fdc7$exports,
  "pl-PL": $eb8ad06c43cd5d81$exports,
  "pt-BR": $27bd89305f3e4e54$exports,
  "pt-PT": $3677096ca14c6d5d$exports,
  "ro-RO": $0428c8cc26995dbd$exports,
  "ru-RU": $92fdadb8d81ea931$exports,
  "sk-SK": $7e0e2e9927559d58$exports,
  "sl-SI": $f6a9ae5c6127241a$exports,
  "sr-SP": $847ba751391a0af0$exports,
  "sv-SE": $7271101036b813d5$exports,
  "tr-TR": $72c9fcabf238033a$exports,
  "uk-UA": $75d2317f8a8b5065$exports,
  "zh-CN": $281e2c16dc742b2c$exports,
  "zh-TW": $00c99c64c0775c43$exports
};

class $dd79673240264ae1$export$da43f8f5cb04028d extends $d1c300d9c497e402$export$de9feff04fda126e {
  isCell(node) {
    return node.type === 'cell' || node.type === 'rowheader' || node.type === 'column';
  }

  getKeyBelow(key) {
    let startItem = this.collection.getItem(key);
    if (!startItem) return; // If focus was on a column, then focus the first child column if any,
    // or find the corresponding cell in the first row.

    if (startItem.type === 'column') {
      let child = [...startItem.childNodes][0];
      if (child) return child.key;
      let firstKey = this.getFirstKey();
      if (firstKey == null) return;
      let firstItem = this.collection.getItem(firstKey);
      return [...firstItem.childNodes][startItem.index].key;
    }

    return super.getKeyBelow(key);
  }

  getKeyAbove(key) {
    let startItem = this.collection.getItem(key);
    if (!startItem) return; // If focus was on a column, focus the parent column if any

    if (startItem.type === 'column') {
      let parent = this.collection.getItem(startItem.parentKey);
      if (parent && parent.type === 'column') return parent.key;
      return;
    } // only return above row key if not header row


    let superKey = super.getKeyAbove(key);
    if (superKey != null && this.collection.getItem(superKey).type !== 'headerrow') return superKey; // If no item was found, and focus was on a cell, then focus the
    // corresponding column header.

    if (this.isCell(startItem)) return this.collection.columns[startItem.index].key; // If focus was on a row, then focus the first column header.

    return this.collection.columns[0].key;
  }

  findNextColumnKey(column) {
    // Search following columns
    let key = this.findNextKey(column.key, item => item.type === 'column');
    if (key != null) return key; // Wrap around to the first column

    let row = this.collection.headerRows[column.level];

    for (let item1 of row.childNodes) {
      if (item1.type === 'column') return item1.key;
    }
  }

  findPreviousColumnKey(column) {
    // Search previous columns
    let key = this.findPreviousKey(column.key, item => item.type === 'column');
    if (key != null) return key; // Wrap around to the last column

    let row = this.collection.headerRows[column.level];
    let childNodes = [...row.childNodes];

    for (let i = childNodes.length - 1; i >= 0; i--) {
      let item = childNodes[i];
      if (item.type === 'column') return item.key;
    }
  }

  getKeyRightOf(key) {
    let item = this.collection.getItem(key);
    if (!item) return; // If focus was on a column, then focus the next column

    if (item.type === 'column') return this.direction === 'rtl' ? this.findPreviousColumnKey(item) : this.findNextColumnKey(item);
    return super.getKeyRightOf(key);
  }

  getKeyLeftOf(key) {
    let item = this.collection.getItem(key);
    if (!item) return; // If focus was on a column, then focus the previous column

    if (item.type === 'column') return this.direction === 'rtl' ? this.findNextColumnKey(item) : this.findPreviousColumnKey(item);
    return super.getKeyLeftOf(key);
  }

  getKeyForSearch(search, fromKey) {
    if (!this.collator) return null;
    let collection = this.collection;
    let key = fromKey ?? this.getFirstKey();
    if (key == null) return null; // If the starting key is a cell, search from its parent row.

    let startItem = collection.getItem(key);
    if (startItem.type === 'cell') key = startItem.parentKey;
    let hasWrapped = false;

    while (key != null) {
      let item = collection.getItem(key); // Check each of the row header cells in this row for a match

      for (let cell of item.childNodes) {
        let column = collection.columns[cell.index];

        if (collection.rowHeaderColumnKeys.has(column.key) && cell.textValue) {
          let substring = cell.textValue.slice(0, search.length);

          if (this.collator.compare(substring, search) === 0) {
            // If we started on a cell, end on the matching cell. Otherwise, end on the row.
            let fromItem = fromKey != null ? collection.getItem(fromKey) : startItem;
            return fromItem.type === 'cell' ? cell.key : item.key;
          }
        }
      }

      key = this.getKeyBelow(key); // Wrap around when reaching the end of the collection

      if (key == null && !hasWrapped) {
        key = this.getFirstKey();
        hasWrapped = true;
      }
    }

    return null;
  }

}

function $58b38183c6c3f0ee$export$25bceaac3c7e4dc7(props, state, ref) {
  let {
    keyboardDelegate: keyboardDelegate,
    isVirtualized: isVirtualized,
    layout: layout
  } = props; // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).
  // When virtualized, the layout object will be passed in as a prop and override this.

  let collator = $325a3faab7a68acd$export$a16aca283550c30d({
    usage: 'search',
    sensitivity: 'base'
  });
  let {
    direction: direction
  } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let delegate = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => keyboardDelegate || new $dd79673240264ae1$export$da43f8f5cb04028d({
    collection: state.collection,
    disabledKeys: state.disabledKeys,
    ref: ref,
    direction: direction,
    collator: collator,
    layout: layout
  }), [keyboardDelegate, state.collection, state.disabledKeys, ref, direction, collator, layout]);
  let id = module_$bdb11010cef70236$export$f680877a34711e37();
  $7313df745d52c961$export$552312adfd451dab.set(state, id);
  let {
    gridProps: gridProps
  } = $83c6e2eafa584c67$export$f6b86a04e5d66d90({ ...props,
    id: id,
    keyboardDelegate: delegate,

    getRowText(key) {
      let added = state.collection.getItem(key);
      if (!added) return ''; // If the row has a textValue, use that.

      if (added.textValue != null) return added.textValue; // Otherwise combine the text of each of the row header columns.

      let rowHeaderColumnKeys = state.collection.rowHeaderColumnKeys;

      if (rowHeaderColumnKeys) {
        let text = [];

        for (let cell of added.childNodes) {
          let column = state.collection.columns[cell.index];
          if (rowHeaderColumnKeys.has(column.key) && cell.textValue) text.push(cell.textValue);
          if (text.length === rowHeaderColumnKeys.size) break;
        }

        return text.join(' ');
      }

      return '';
    }

  }, state, ref); // Override to include header rows

  if (isVirtualized) gridProps['aria-rowcount'] = state.collection.size + state.collection.headerRows.length;
  let {
    column: column1,
    direction: sortDirection
  } = state.sortDescriptor || {};
  let formatMessage = $321bc95feeb923dd$export$ec23bf898b1eed85( /*@__PURE__*/module_$parcel$interopDefault($c7646422f16a0df1$exports));
  let sortDescription = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let columnName = state.collection.columns.find(c => c.key === column1)?.textValue;
    return sortDirection && column1 ? formatMessage(`${sortDirection}Sort`, {
      columnName: columnName
    }) : undefined;
  }, [sortDirection, column1, state.collection.columns]);
  let descriptionProps = module_$ef06256079686ba0$export$f8aeda7b10753fa1(sortDescription); // Only announce after initial render, tabbing to the table will tell you the initial sort info already

  module_$4f58c5f72bcf79f7$export$496315a1608d9602(() => {
    $319e236875307eab$export$a9b970dcc4ae71a9(sortDescription, 'assertive', 500);
  }, [sortDescription]);
  return {
    gridProps: module_$3ef42575df84b30b$export$9d1611c77c2fe928(gridProps, descriptionProps, {
      // merge sort description with long press information
      'aria-describedby': [descriptionProps['aria-describedby'], gridProps['aria-describedby']].filter(Boolean).join(' ')
    })
  };
}

var $e00d682c9b61b6ca$exports = {};
table_dist_module_$parcel$export($e00d682c9b61b6ca$exports, "useTableColumnHeader", () => $e00d682c9b61b6ca$export$9514819a8c81e960);

function $e00d682c9b61b6ca$export$9514819a8c81e960(props, state, ref) {
  let {
    node: node
  } = props;
  let allowsSorting = node.props.allowsSorting;
  let {
    gridCellProps: gridCellProps
  } = $ab90dcbc1b5466d0$export$c7e10bfc0c59f67c(props, state, ref);
  let isSelectionCellDisabled = node.props.isSelectionCell && state.selectionManager.selectionMode === 'single';
  let {
    pressProps: pressProps
  } = module_$f6c31cce2adf654f$export$45712eceda6fad21({
    isDisabled: !allowsSorting || isSelectionCellDisabled,

    onPress() {
      state.sort(node.key);
    }

  }); // Needed to pick up the focusable context, enabling things like Tooltips for example

  let {
    focusableProps: focusableProps
  } = $e6afbd83fe6ebbd2$export$4c014de7c8940b4c({}, ref);
  let ariaSort = null;
  let isSortedColumn = state.sortDescriptor?.column === node.key;
  let sortDirection = state.sortDescriptor?.direction; // aria-sort not supported in Android Talkback

  if (node.props.allowsSorting && !module_$c87311424ea30a05$export$a11b0059900ceec8()) ariaSort = isSortedColumn ? sortDirection : 'none';
  let formatMessage = $321bc95feeb923dd$export$ec23bf898b1eed85( /*@__PURE__*/module_$parcel$interopDefault($c7646422f16a0df1$exports));
  let sortDescription;

  if (allowsSorting) {
    sortDescription = `${formatMessage('sortable')}`; // Android Talkback doesn't support aria-sort so we add sort order details to the aria-described by here

    if (isSortedColumn && sortDirection && module_$c87311424ea30a05$export$a11b0059900ceec8()) sortDescription = `${sortDescription}, ${formatMessage(sortDirection)}`;
  }

  let descriptionProps = module_$ef06256079686ba0$export$f8aeda7b10753fa1(sortDescription);
  return {
    columnHeaderProps: { ...module_$3ef42575df84b30b$export$9d1611c77c2fe928(gridCellProps, pressProps, focusableProps, descriptionProps),
      role: 'columnheader',
      id: $7313df745d52c961$export$37cd4213f2ad742e(state, node.key),
      'aria-colspan': node.colspan && node.colspan > 1 ? node.colspan : null,
      'aria-sort': ariaSort
    }
  };
}

var $601c09ad619dd758$exports = {};
table_dist_module_$parcel$export($601c09ad619dd758$exports, "useTableRow", () => $601c09ad619dd758$export$7f2f6ae19e707aa5);

function $601c09ad619dd758$export$7f2f6ae19e707aa5(props, state, ref) {
  let {
    node: node
  } = props;
  let {
    rowProps: rowProps,
    isPressed: isPressed
  } = $4159a7a9cbb0cc18$export$96357d5a73f686fa(props, state, ref);
  return {
    rowProps: { ...rowProps,
      'aria-labelledby': $7313df745d52c961$export$85069b70317f543(state, node.key)
    },
    isPressed: isPressed
  };
}

var $977e76ff58b065ed$exports = {};
table_dist_module_$parcel$export($977e76ff58b065ed$exports, "useTableHeaderRow", () => $977e76ff58b065ed$export$1b95a7d2d517b841);

function $977e76ff58b065ed$export$1b95a7d2d517b841(props, state, ref) {
  let {
    node: node,
    isVirtualized: isVirtualized
  } = props;
  let rowProps = {
    role: 'row'
  };
  if (isVirtualized) rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based

  return {
    rowProps: rowProps
  };
}

var $a262418ffbc55256$exports = {};
table_dist_module_$parcel$export($a262418ffbc55256$exports, "useTableCell", () => $a262418ffbc55256$export$49571c903d73624c);

function $a262418ffbc55256$export$49571c903d73624c(props, state, ref) {
  let {
    gridCellProps: gridCellProps,
    isPressed: isPressed
  } = $ab90dcbc1b5466d0$export$c7e10bfc0c59f67c(props, state, ref);
  let columnKey = props.node.column.key;

  if (state.collection.rowHeaderColumnKeys.has(columnKey)) {
    gridCellProps.role = 'rowheader';
    gridCellProps.id = $7313df745d52c961$export$19baff3266315d44(state, props.node.parentKey, columnKey);
  }

  return {
    gridCellProps: gridCellProps,
    isPressed: isPressed
  };
}

var $d38e85e844ed4409$exports = {};
table_dist_module_$parcel$export($d38e85e844ed4409$exports, "useTableSelectionCheckbox", () => $d38e85e844ed4409$export$16ea7f650bd7c1bb);
table_dist_module_$parcel$export($d38e85e844ed4409$exports, "useTableSelectAllCheckbox", () => $d38e85e844ed4409$export$1003db6a7e384b99);

function $d38e85e844ed4409$export$16ea7f650bd7c1bb(props, state) {
  let {
    key: key
  } = props;
  const {
    checkboxProps: checkboxProps
  } = $7cb39d07f245a780$export$70e2eed1a92976ad(props, state);
  return {
    checkboxProps: { ...checkboxProps,
      'aria-labelledby': `${checkboxProps.id} ${$7313df745d52c961$export$85069b70317f543(state, key)}`
    }
  };
}

function $d38e85e844ed4409$export$1003db6a7e384b99(state) {
  let {
    isEmpty: isEmpty,
    isSelectAll: isSelectAll,
    selectionMode: selectionMode
  } = state.selectionManager;
  const formatMessage = $321bc95feeb923dd$export$ec23bf898b1eed85( /*@__PURE__*/module_$parcel$interopDefault($c7646422f16a0df1$exports));
  return {
    checkboxProps: {
      'aria-label': formatMessage(selectionMode === 'single' ? 'select' : 'selectAll'),
      isSelected: isSelectAll,
      isDisabled: selectionMode !== 'multiple',
      isIndeterminate: !isEmpty && !isSelectAll,
      onChange: () => state.selectionManager.toggleSelectAll()
    }
  };
}

function $e10d6c50e0041fd0$export$6fb1613bd7b28198() {
  return $e45487f8ba1cbdbf$export$d3037f5d3f3e51bf();
}


;// CONCATENATED MODULE: ../../node_modules/@react-stately/collections/dist/module.js


function collections_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $c1d7fb2ec91bae71$exports = {};
collections_dist_module_$parcel$export($c1d7fb2ec91bae71$exports, "Item", () => $c1d7fb2ec91bae71$export$6d08773d2e66f8f2);

function $c1d7fb2ec91bae71$var$Item(props) {
  return null;
}

$c1d7fb2ec91bae71$var$Item.getCollectionNode = function* getCollectionNode(props, context) {
  let {
    childItems: childItems,
    title: title,
    children: children
  } = props;
  let rendered = props.title || props.children;
  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'] || ''; // suppressTextValueWarning is used in components like Tabs, which don't have type to select support.

  if (!textValue && !(context === null || context === void 0 ? void 0 : context.suppressTextValueWarning)) console.warn('<Item> with non-plain text contents is unsupported by type to select for accessibility. Please add a `textValue` prop.');
  yield {
    type: 'item',
    props: props,
    rendered: rendered,
    textValue: textValue,
    'aria-label': props['aria-label'],
    hasChildNodes: $c1d7fb2ec91bae71$var$hasChildItems(props),

    *childNodes() {
      if (childItems) for (let child1 of childItems) yield {
        type: 'item',
        value: child1
      };else if (title) {
        let items = [];
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, child => {
          items.push({
            type: 'item',
            element: child
          });
        });
        yield* items;
      }
    }

  };
};

function $c1d7fb2ec91bae71$var$hasChildItems(props) {
  if (props.hasChildItems != null) return props.hasChildItems;
  if (props.childItems) return true;
  if (props.title && external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.count(props.children) > 0) return true;
  return false;
} // We don't want getCollectionNode to show up in the type definition


let $c1d7fb2ec91bae71$export$6d08773d2e66f8f2 = $c1d7fb2ec91bae71$var$Item;
var $9fc4852771d079eb$exports = {};
collections_dist_module_$parcel$export($9fc4852771d079eb$exports, "Section", () => $9fc4852771d079eb$export$6e2c8f0811a474ce);

function $9fc4852771d079eb$var$Section(props) {
  return null;
}

$9fc4852771d079eb$var$Section.getCollectionNode = function* getCollectionNode(props) {
  let {
    children: children,
    title: title,
    items: items1
  } = props;
  yield {
    type: 'section',
    hasChildNodes: true,
    rendered: title,
    'aria-label': props['aria-label'],

    *childNodes() {
      if (typeof children === 'function') {
        if (!items1) throw new Error('props.children was a function but props.items is missing');

        for (let item of items1) yield {
          type: 'item',
          value: item,
          renderer: children
        };
      } else {
        let items = [];
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, child => {
          items.push({
            type: 'item',
            element: child
          });
        });
        yield* items;
      }
    }

  };
}; // We don't want getCollectionNode to show up in the type definition


let $9fc4852771d079eb$export$6e2c8f0811a474ce = $9fc4852771d079eb$var$Section;
var $abe69ec9966cc167$exports = {};
var $7613b1592d41b092$exports = {};
collections_dist_module_$parcel$export($7613b1592d41b092$exports, "useCollection", () => $7613b1592d41b092$export$6cd28814d92fa9c9);

class $eb2240fc39a57fa5$export$bf788dd355e3a401 {
  build(props, context) {
    this.context = context;
    return $eb2240fc39a57fa5$var$iterable(() => this.iterateCollection(props));
  }

  *iterateCollection(props) {
    let {
      children: children,
      items: items
    } = props;

    if (typeof children === 'function') {
      if (!items) throw new Error('props.children was a function but props.items is missing');

      for (let item of props.items) yield* this.getFullNode({
        value: item
      }, {
        renderer: children
      });
    } else {
      let items = [];
      external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, child => {
        items.push(child);
      });
      let index = 0;

      for (let item of items) {
        let nodes = this.getFullNode({
          element: item,
          index: index
        }, {});

        for (let node of nodes) {
          index++;
          yield node;
        }
      }
    }
  }

  getKey(item, partialNode, state, parentKey) {
    if (item.key != null) return item.key;
    if (partialNode.type === 'cell' && partialNode.key != null) return `${parentKey}${partialNode.key}`;
    let v = partialNode.value;

    if (v != null) {
      var _key;

      let key = (_key = v.key) !== null && _key !== void 0 ? _key : v.id;
      if (key == null) throw new Error('No key found for item');
      return key;
    }

    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;
  }

  getChildState(state, partialNode) {
    return {
      renderer: partialNode.renderer || state.renderer
    };
  }

  *getFullNode(partialNode, state, parentKey, parentNode) {
    // If there's a value instead of an element on the node, and a parent renderer function is available,
    // use it to render an element for the value.
    let element = partialNode.element;

    if (!element && partialNode.value && state && state.renderer) {
      let cached = this.cache.get(partialNode.value);

      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {
        cached.index = partialNode.index;
        cached.parentKey = parentNode ? parentNode.key : null;
        yield cached;
        return;
      }

      element = state.renderer(partialNode.value);
    } // If there's an element with a getCollectionNode function on its type, then it's a supported component.
    // Call this function to get a partial node, and recursively build a full node from there.


    if (external_root_React_commonjs2_react_commonjs_react_amd_react_default().isValidElement(element)) {
      let type = element.type;

      if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {
        let name = typeof element.type === 'function' ? element.type.name : element.type;
        throw new Error(`Unknown element <${name}> in collection.`);
      }

      let childNodes = type.getCollectionNode(element.props, this.context);
      let index = partialNode.index;
      let result = childNodes.next();

      while (!result.done && result.value) {
        let childNode = result.value;
        partialNode.index = index;
        let nodeKey = childNode.key;
        if (!nodeKey) nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);
        let nodes = this.getFullNode({ ...childNode,
          key: nodeKey,
          index: index,
          wrapper: $eb2240fc39a57fa5$var$compose(partialNode.wrapper, childNode.wrapper)
        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);
        let children = [...nodes];

        for (let node of children) {
          // Cache the node based on its value
          node.value = childNode.value || partialNode.value;
          if (node.value) this.cache.set(node.value, node); // The partial node may have specified a type for the child in order to specify a constraint.
          // Verify that the full node that was built recursively matches this type.

          if (partialNode.type && node.type !== partialNode.type) throw new Error(`Unsupported type <${$eb2240fc39a57fa5$var$capitalize(node.type)}> in <${$eb2240fc39a57fa5$var$capitalize(parentNode.type)}>. Only <${$eb2240fc39a57fa5$var$capitalize(partialNode.type)}> is supported.`);
          index++;
          yield node;
        }

        result = childNodes.next(children);
      }

      return;
    } // Ignore invalid elements


    if (partialNode.key == null) return; // Create full node

    let builder = this;
    let node = {
      type: partialNode.type,
      props: partialNode.props,
      key: partialNode.key,
      parentKey: parentNode ? parentNode.key : null,
      value: partialNode.value,
      level: parentNode ? parentNode.level + 1 : 0,
      index: partialNode.index,
      rendered: partialNode.rendered,
      textValue: partialNode.textValue,
      'aria-label': partialNode['aria-label'],
      wrapper: partialNode.wrapper,
      shouldInvalidate: partialNode.shouldInvalidate,
      hasChildNodes: partialNode.hasChildNodes,
      childNodes: $eb2240fc39a57fa5$var$iterable(function* () {
        if (!partialNode.hasChildNodes) return;
        let index = 0;

        for (let child of partialNode.childNodes()) {
          // Ensure child keys are globally unique by prepending the parent node's key
          if (child.key != null) // TODO: Remove this line entirely and enforce that users always provide unique keys.
            // Currently this line will have issues when a parent has a key `a` and a child with key `bc`
            // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both
            // children having a key of `abc`.
            child.key = `${node.key}${child.key}`;
          child.index = index;
          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);

          for (let node1 of nodes) {
            index++;
            yield node1;
          }
        }
      })
    };
    yield node;
  }

  constructor() {
    this.cache = new WeakMap();
  }

} // Wraps an iterator function as an iterable object, and caches the results.


function $eb2240fc39a57fa5$var$iterable(iterator) {
  let cache = [];
  let iterable = null;
  return {
    *[Symbol.iterator]() {
      for (let item of cache) yield item;

      if (!iterable) iterable = iterator();

      for (let item1 of iterable) {
        cache.push(item1);
        yield item1;
      }
    }

  };
}

function $eb2240fc39a57fa5$var$compose(outer, inner) {
  if (outer && inner) return element => outer(inner(element));
  if (outer) return outer;
  if (inner) return inner;
}

function $eb2240fc39a57fa5$var$capitalize(str) {
  return str[0].toUpperCase() + str.slice(1);
}

function $7613b1592d41b092$export$6cd28814d92fa9c9(props, factory, context, invalidators = []) {
  let builder = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => new $eb2240fc39a57fa5$export$bf788dd355e3a401(), []);
  let prev = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  return (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    let nodes = builder.build(props, context);
    prev.current = factory(nodes, prev.current);
    return prev.current; // Don't invalidate when any prop changes, just the two we care about.
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [builder, props.children, props.items, context, ...invalidators]);
}

var $453cc9f0df89c0a5$exports = {};
collections_dist_module_$parcel$export($453cc9f0df89c0a5$exports, "getItemCount", () => $453cc9f0df89c0a5$export$77d5aafae4e095b2);
const $453cc9f0df89c0a5$var$cache = new WeakMap();

function $453cc9f0df89c0a5$export$77d5aafae4e095b2(collection) {
  let count = $453cc9f0df89c0a5$var$cache.get(collection);
  if (count != null) return count;
  count = 0;

  for (let item of collection) if (item.type === 'section') count += $453cc9f0df89c0a5$export$77d5aafae4e095b2(item.childNodes);else count++;

  $453cc9f0df89c0a5$var$cache.set(collection, count);
  return count;
}


;// CONCATENATED MODULE: ../../node_modules/@react-stately/selection/dist/module.js



function _react_stately_selection_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $7af3f5b51489e0b5$exports = {};
_react_stately_selection_dist_module_$parcel$export($7af3f5b51489e0b5$exports, "useMultipleSelectionState", () => $7af3f5b51489e0b5$export$253fe78d46329472);

class $e40ea825a81a3709$export$52baac22726c72bf extends Set {
  constructor(keys, anchorKey, currentKey) {
    super(keys);

    if (keys instanceof $e40ea825a81a3709$export$52baac22726c72bf) {
      this.anchorKey = anchorKey || keys.anchorKey;
      this.currentKey = currentKey || keys.currentKey;
    } else {
      this.anchorKey = anchorKey;
      this.currentKey = currentKey;
    }
  }

}

function $7af3f5b51489e0b5$var$equalSets(setA, setB) {
  if (setA.size !== setB.size) return false;

  for (let item of setA) {
    if (!setB.has(item)) return false;
  }

  return true;
}

function $7af3f5b51489e0b5$export$253fe78d46329472(props) {
  let {
    selectionMode = 'none',
    disallowEmptySelection: disallowEmptySelection,
    allowDuplicateSelectionEvents: allowDuplicateSelectionEvents
  } = props; // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.
  // But we also need to trigger a react re-render. So, we have both a ref (sync) and state (async).

  let isFocusedRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(false);
  let [, setFocused] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let focusedKeyRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let childFocusStrategyRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  let [, setFocusedKey] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(null);
  let selectedKeysProp = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.selectedKeys), [props.selectedKeys]);
  let defaultSelectedKeys = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => $7af3f5b51489e0b5$var$convertSelection(props.defaultSelectedKeys, new $e40ea825a81a3709$export$52baac22726c72bf()), [props.defaultSelectedKeys]);
  let [selectedKeys, setSelectedKeys] = $bfee1151ccb0650f$export$40bfa8c7b0832715(selectedKeysProp, defaultSelectedKeys, props.onSelectionChange);
  let disabledKeysProp = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);
  let [selectionBehavior, setSelectionBehavior] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(props.selectionBehavior || 'toggle'); // If the selectionBehavior prop is set to replace, but the current state is toggle (e.g. due to long press
  // to enter selection mode on touch), and the selection becomes empty, reset the selection behavior.

  if (props.selectionBehavior === 'replace' && selectionBehavior === 'toggle' && typeof selectedKeys === 'object' && selectedKeys.size === 0) setSelectionBehavior('replace');
  return {
    selectionMode: selectionMode,
    disallowEmptySelection: disallowEmptySelection,
    selectionBehavior: selectionBehavior,
    setSelectionBehavior: setSelectionBehavior,

    get isFocused() {
      return isFocusedRef.current;
    },

    setFocused(f) {
      isFocusedRef.current = f;
      setFocused(f);
    },

    get focusedKey() {
      return focusedKeyRef.current;
    },

    get childFocusStrategy() {
      return childFocusStrategyRef.current;
    },

    setFocusedKey(k, childFocusStrategy = 'first') {
      focusedKeyRef.current = k;
      childFocusStrategyRef.current = childFocusStrategy;
      setFocusedKey(k);
    },

    selectedKeys: selectedKeys,

    setSelectedKeys(keys) {
      if (allowDuplicateSelectionEvents || !$7af3f5b51489e0b5$var$equalSets(keys, selectedKeys)) setSelectedKeys(keys);
    },

    disabledKeys: disabledKeysProp
  };
}

function $7af3f5b51489e0b5$var$convertSelection(selection, defaultValue) {
  if (!selection) return defaultValue;
  return selection === 'all' ? 'all' : new $e40ea825a81a3709$export$52baac22726c72bf(selection);
}

var $d496c0a20b6e58ec$exports = {};
_react_stately_selection_dist_module_$parcel$export($d496c0a20b6e58ec$exports, "SelectionManager", () => $d496c0a20b6e58ec$export$6c8a5aaad13c9852);

class $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {
  /**
  * The type of selection that is allowed in the collection.
  */
  get selectionMode() {
    return this.state.selectionMode;
  }
  /**
  * Whether the collection allows empty selection.
  */


  get disallowEmptySelection() {
    return this.state.disallowEmptySelection;
  }
  /**
  * The selection behavior for the collection.
  */


  get selectionBehavior() {
    return this.state.selectionBehavior;
  }
  /**
  * Sets the selection behavior for the collection.
  */


  setSelectionBehavior(selectionBehavior) {
    this.state.setSelectionBehavior(selectionBehavior);
  }
  /**
  * Whether the collection is currently focused.
  */


  get isFocused() {
    return this.state.isFocused;
  }
  /**
  * Sets whether the collection is focused.
  */


  setFocused(isFocused) {
    this.state.setFocused(isFocused);
  }
  /**
  * The current focused key in the collection.
  */


  get focusedKey() {
    return this.state.focusedKey;
  }
  /** Whether the first or last child of the focused key should receive focus. */


  get childFocusStrategy() {
    return this.state.childFocusStrategy;
  }
  /**
  * Sets the focused key.
  */


  setFocusedKey(key, childFocusStrategy) {
    this.state.setFocusedKey(key, childFocusStrategy);
  }
  /**
  * The currently selected keys in the collection.
  */


  get selectedKeys() {
    return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;
  }
  /**
  * The raw selection value for the collection.
  * Either 'all' for select all, or a set of keys.
  */


  get rawSelection() {
    return this.state.selectedKeys;
  }
  /**
  * Returns whether a key is selected.
  */


  isSelected(key) {
    if (this.state.selectionMode === 'none') return false;
    key = this.getKey(key);
    return this.state.selectedKeys === 'all' ? !this.state.disabledKeys.has(key) : this.state.selectedKeys.has(key);
  }
  /**
  * Whether the selection is empty.
  */


  get isEmpty() {
    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;
  }
  /**
  * Whether all items in the collection are selected.
  */


  get isSelectAll() {
    if (this.isEmpty) return false;
    if (this.state.selectedKeys === 'all') return true;
    if (this._isSelectAll != null) return this._isSelectAll;
    let allKeys = this.getSelectAllKeys();
    let selectedKeys = this.state.selectedKeys;
    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));
    return this._isSelectAll;
  }

  get firstSelectedKey() {
    let first = null;

    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!first || (item === null || item === void 0 ? void 0 : item.index) < first.index) first = item;
    }

    return first === null || first === void 0 ? void 0 : first.key;
  }

  get lastSelectedKey() {
    let last = null;

    for (let key of this.state.selectedKeys) {
      let item = this.collection.getItem(key);
      if (!last || (item === null || item === void 0 ? void 0 : item.index) > last.index) last = item;
    }

    return last === null || last === void 0 ? void 0 : last.key;
  }
  /**
  * Extends the selection to the given key.
  */


  extendSelection(toKey) {
    if (this.selectionMode === 'none') return;

    if (this.selectionMode === 'single') {
      this.replaceSelection(toKey);
      return;
    }

    toKey = this.getKey(toKey);
    let selection; // Only select the one key if coming from a select all.

    if (this.state.selectedKeys === 'all') selection = new $e40ea825a81a3709$export$52baac22726c72bf([toKey], toKey, toKey);else {
      let selectedKeys = this.state.selectedKeys;
      let anchorKey = selectedKeys.anchorKey || toKey;
      selection = new $e40ea825a81a3709$export$52baac22726c72bf(selectedKeys, anchorKey, toKey);

      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) selection.delete(key);

      for (let key1 of this.getKeyRange(toKey, anchorKey)) if (!this.state.disabledKeys.has(key1)) selection.add(key1);
    }
    this.state.setSelectedKeys(selection);
  }

  getKeyRange(from, to) {
    let fromItem = this.collection.getItem(from);
    let toItem = this.collection.getItem(to);

    if (fromItem && toItem) {
      if (fromItem.index <= toItem.index) return this.getKeyRangeInternal(from, to);
      return this.getKeyRangeInternal(to, from);
    }

    return [];
  }

  getKeyRangeInternal(from, to) {
    let keys = [];
    let key = from;

    while (key) {
      let item = this.collection.getItem(key);
      if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);
      if (key === to) return keys;
      key = this.collection.getKeyAfter(key);
    }

    return [];
  }

  getKey(key) {
    let item = this.collection.getItem(key);
    if (!item) // ¯\_(ツ)_/¯
      return key; // If cell selection is allowed, just return the key.

    if (item.type === 'cell' && this.allowsCellSelection) return key; // Find a parent item to select

    while (item.type !== 'item' && item.parentKey != null) item = this.collection.getItem(item.parentKey);

    if (!item || item.type !== 'item') return null;
    return item.key;
  }
  /**
  * Toggles whether the given key is selected.
  */


  toggleSelection(key) {
    if (this.selectionMode === 'none') return;

    if (this.selectionMode === 'single' && !this.isSelected(key)) {
      this.replaceSelection(key);
      return;
    }

    key = this.getKey(key);
    if (key == null) return;
    let keys = new $e40ea825a81a3709$export$52baac22726c72bf(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);
    if (keys.has(key)) keys.delete(key);else {
      keys.add(key);
      keys.anchorKey = key;
      keys.currentKey = key;
    }
    if (this.disallowEmptySelection && keys.size === 0) return;
    this.state.setSelectedKeys(keys);
  }
  /**
  * Replaces the selection with only the given key.
  */


  replaceSelection(key) {
    if (this.selectionMode === 'none') return;
    key = this.getKey(key);
    if (key == null) return;
    this.state.setSelectedKeys(new $e40ea825a81a3709$export$52baac22726c72bf([key], key, key));
  }
  /**
  * Replaces the selection with the given keys.
  */


  setSelectedKeys(keys) {
    if (this.selectionMode === 'none') return;
    let selection = new $e40ea825a81a3709$export$52baac22726c72bf();

    for (let key of keys) {
      key = this.getKey(key);

      if (key != null) {
        selection.add(key);
        if (this.selectionMode === 'single') break;
      }
    }

    this.state.setSelectedKeys(selection);
  }

  getSelectAllKeys() {
    let keys = [];

    let addKeys = key => {
      while (key) {
        if (!this.state.disabledKeys.has(key)) {
          let item = this.collection.getItem(key);
          if (item.type === 'item') keys.push(key); // Add child keys. If cell selection is allowed, then include item children too.

          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) addKeys([...item.childNodes][0].key);
        }

        key = this.collection.getKeyAfter(key);
      }
    };

    addKeys(this.collection.getFirstKey());
    return keys;
  }
  /**
  * Selects all items in the collection.
  */


  selectAll() {
    if (this.selectionMode === 'multiple') this.state.setSelectedKeys('all');
  }
  /**
  * Removes all keys from the selection.
  */


  clearSelection() {
    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new $e40ea825a81a3709$export$52baac22726c72bf());
  }
  /**
  * Toggles between select all and an empty selection.
  */


  toggleSelectAll() {
    if (this.isSelectAll) this.clearSelection();else this.selectAll();
  }

  select(key, e) {
    if (this.selectionMode === 'none') return;

    if (this.selectionMode === 'single') {
      if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);
    } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual')) // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys
      this.toggleSelection(key);else this.replaceSelection(key);
  }
  /**
  * Returns whether the current selection is equal to the given selection.
  */


  isSelectionEqual(selection) {
    if (selection === this.state.selectedKeys) return true; // Check if the set of keys match.

    let selectedKeys = this.selectedKeys;
    if (selection.size !== selectedKeys.size) return false;

    for (let key of selection) {
      if (!selectedKeys.has(key)) return false;
    }

    for (let key2 of selectedKeys) {
      if (!selection.has(key2)) return false;
    }

    return true;
  }

  canSelectItem(key) {
    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;
    let item = this.collection.getItem(key);
    if (!item || item.type === 'cell' && !this.allowsCellSelection) return false;
    return true;
  }

  constructor(collection, state, options) {
    this.collection = collection;
    this.state = state;
    var ref;
    this.allowsCellSelection = (ref = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && ref !== void 0 ? ref : false;
    this._isSelectAll = null;
  }

}

var $63d397230baf7bd4$exports = {};

;// CONCATENATED MODULE: ../../node_modules/@react-stately/grid/dist/module.js



function _react_stately_grid_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $62967d126f3aa823$exports = {};
_react_stately_grid_dist_module_$parcel$export($62967d126f3aa823$exports, "useGridState", () => $62967d126f3aa823$export$4007ac09ff9c68ed);

function $62967d126f3aa823$export$4007ac09ff9c68ed(props) {
  let {
    collection: collection,
    focusMode: focusMode
  } = props;
  let selectionState = $7af3f5b51489e0b5$export$253fe78d46329472(props);
  let disabledKeys = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => props.disabledKeys ? new Set(props.disabledKeys) : new Set(), [props.disabledKeys]);
  let setFocusedKey = selectionState.setFocusedKey;

  selectionState.setFocusedKey = (key, child) => {
    // If focusMode is cell and an item is focused, focus a child cell instead.
    if (focusMode === 'cell' && key != null) {
      let item = collection.getItem(key);

      if ((item === null || item === void 0 ? void 0 : item.type) === 'item') {
        var ref, ref1;
        let children = [...item.childNodes];
        if (child === 'last') key = (ref = children[children.length - 1]) === null || ref === void 0 ? void 0 : ref.key;else key = (ref1 = children[0]) === null || ref1 === void 0 ? void 0 : ref1.key;
      }
    }

    setFocusedKey(key, child);
  }; // Reset focused key if that item is deleted from the collection.


  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);
  }, [collection, selectionState.focusedKey]);
  return {
    collection: collection,
    disabledKeys: disabledKeys,
    selectionManager: new $d496c0a20b6e58ec$export$6c8a5aaad13c9852(collection, selectionState)
  };
}

var $16805b1b18093c5f$exports = {};
_react_stately_grid_dist_module_$parcel$export($16805b1b18093c5f$exports, "GridCollection", () => $16805b1b18093c5f$export$de3fdf6493c353d);
var tmp = Symbol.iterator;

class $16805b1b18093c5f$export$de3fdf6493c353d {
  *[tmp]() {
    yield* [...this.rows];
  }

  get size() {
    return [...this.rows].length;
  }

  getKeys() {
    return this.keyMap.keys();
  }

  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }

  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }

  getFirstKey() {
    var ref;
    return (ref = [...this.rows][0]) === null || ref === void 0 ? void 0 : ref.key;
  }

  getLastKey() {
    var ref;
    let rows = [...this.rows];
    return (ref = rows[rows.length - 1]) === null || ref === void 0 ? void 0 : ref.key;
  }

  getItem(key) {
    return this.keyMap.get(key);
  }

  at(idx) {
    const keys = [...this.getKeys()];
    return this.getItem(keys[idx]);
  }

  constructor(opts) {
    this.keyMap = new Map();
    this.keyMap = new Map();
    this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;
    this.rows = [];

    let visit = node => {
      // If the node is the same object as the previous node for the same key,
      // we can skip this node and its children. We always visit columns though,
      // because we depend on order to build the columns array.
      let prevNode = this.keyMap.get(node.key);
      if (opts.visitNode) node = opts.visitNode(node);
      this.keyMap.set(node.key, node);
      let childKeys = new Set();
      let last;

      for (let child of node.childNodes) {
        if (child.type === 'cell' && child.parentKey == null) // if child is a cell parent key isn't already established by the collection, match child node to parent row
          child.parentKey = node.key;
        childKeys.add(child.key);

        if (last) {
          last.nextKey = child.key;
          child.prevKey = last.key;
        } else child.prevKey = null;

        visit(child);
        last = child;
      }

      if (last) last.nextKey = null; // Remove deleted nodes and their children from the key map

      if (prevNode) {
        for (let child of prevNode.childNodes) if (!childKeys.has(child.key)) remove(child);
      }
    };

    let remove = node => {
      this.keyMap.delete(node.key);

      for (let child of node.childNodes) if (this.keyMap.get(child.key) === child) remove(child);
    };

    let last1;
    opts.items.forEach((node, i) => {
      let rowNode = {
        level: 0,
        key: 'row-' + i,
        type: 'row',
        value: undefined,
        hasChildNodes: true,
        childNodes: [...node.childNodes],
        rendered: undefined,
        textValue: undefined,
        ...node,
        index: i
      };

      if (last1) {
        last1.nextKey = rowNode.key;
        rowNode.prevKey = last1.key;
      } else rowNode.prevKey = null;

      this.rows.push(rowNode);
      visit(rowNode);
      last1 = rowNode;
    });
    if (last1) last1.nextKey = null;
  }

}


;// CONCATENATED MODULE: ../../node_modules/@react-stately/table/dist/module.js




function _react_stately_table_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $494692f36da31136$exports = {};
_react_stately_table_dist_module_$parcel$export($494692f36da31136$exports, "useTableState", () => $494692f36da31136$export$907bcc6c48325fd6);
const $1ca231328db2f66a$var$ROW_HEADER_COLUMN_KEY = 'row-header-column-' + Math.random().toString(36).slice(2);

function $1ca231328db2f66a$var$buildHeaderRows(keyMap, columnNodes) {
  let columns = [];
  let seen = new Map();

  for (let column of columnNodes) {
    let parentKey = column.parentKey;
    let col = [column];

    while (parentKey) {
      let parent = keyMap.get(parentKey); // If we've already seen this parent, than it is shared
      // with a previous column. If the current column is taller
      // than the previous column, than we need to shift the parent
      // in the previous column so it's level with the current column.

      if (seen.has(parent)) {
        parent.colspan++;
        let {
          column: column,
          index: index
        } = seen.get(parent);
        if (index > col.length) break;

        for (let i = index; i < col.length; i++) column.splice(i, 0, null); // Adjust shifted indices


        for (let i1 = col.length; i1 < column.length; i1++) if (column[i1] && seen.has(column[i1])) seen.get(column[i1]).index = i1;
      } else {
        parent.colspan = 1;
        col.push(parent);
        seen.set(parent, {
          column: col,
          index: col.length - 1
        });
      }

      parentKey = parent.parentKey;
    }

    columns.push(col);
    column.index = columns.length - 1;
  }

  let maxLength = Math.max(...columns.map(c => c.length));
  let headerRows = Array(maxLength).fill(0).map(() => []); // Convert columns into rows.

  let colIndex = 0;

  for (let column1 of columns) {
    let i = maxLength - 1;

    for (let item of column1) {
      if (item) {
        // Fill the space up until the current column with a placeholder
        let row = headerRows[i];
        let rowLength = row.reduce((p, c) => p + c.colspan, 0);

        if (rowLength < colIndex) {
          let placeholder = {
            type: 'placeholder',
            key: 'placeholder-' + item.key,
            colspan: colIndex - rowLength,
            index: rowLength,
            value: null,
            rendered: null,
            level: i,
            hasChildNodes: false,
            childNodes: [],
            textValue: null
          };

          if (row.length > 0) {
            row[row.length - 1].nextKey = placeholder.key;
            placeholder.prevKey = row[row.length - 1].key;
          }

          row.push(placeholder);
        }

        if (row.length > 0) {
          row[row.length - 1].nextKey = item.key;
          item.prevKey = row[row.length - 1].key;
        }

        item.level = i;
        item.index = colIndex;
        row.push(item);
      }

      i--;
    }

    colIndex++;
  } // Add placeholders at the end of each row that is shorter than the maximum


  let i = 0;

  for (let row1 of headerRows) {
    let rowLength = row1.reduce((p, c) => p + c.colspan, 0);

    if (rowLength < columnNodes.length) {
      let placeholder = {
        type: 'placeholder',
        key: 'placeholder-' + row1[row1.length - 1].key,
        colspan: columnNodes.length - rowLength,
        index: rowLength,
        value: null,
        rendered: null,
        level: i,
        hasChildNodes: false,
        childNodes: [],
        textValue: null,
        prevKey: row1[row1.length - 1].key
      };
      row1.push(placeholder);
    }

    i++;
  }

  return headerRows.map((childNodes, index) => {
    let row = {
      type: 'headerrow',
      key: 'headerrow-' + index,
      index: index,
      value: null,
      rendered: null,
      level: 0,
      hasChildNodes: true,
      childNodes: childNodes,
      textValue: null
    };
    return row;
  });
}

class $1ca231328db2f66a$export$596e1b2e2cf93690 extends $16805b1b18093c5f$export$de3fdf6493c353d {
  constructor(nodes, prev, opts) {
    let rowHeaderColumnKeys = new Set();
    let body;
    let columns = []; // Add cell for selection checkboxes if needed.

    if (opts?.showSelectionCheckboxes) {
      let rowHeaderColumn = {
        type: 'column',
        key: $1ca231328db2f66a$var$ROW_HEADER_COLUMN_KEY,
        value: null,
        textValue: '',
        level: 0,
        index: 0,
        hasChildNodes: false,
        rendered: null,
        childNodes: [],
        props: {
          isSelectionCell: true
        }
      };
      columns.unshift(rowHeaderColumn);
    }

    let rows = [];
    let columnKeyMap = new Map();

    let visit = node => {
      switch (node.type) {
        case 'body':
          body = node;
          break;

        case 'column':
          columnKeyMap.set(node.key, node);

          if (!node.hasChildNodes) {
            columns.push(node);
            if (node.props.isRowHeader) rowHeaderColumnKeys.add(node.key);
          }

          break;

        case 'item':
          rows.push(node);
          return;
        // do not go into childNodes
      }

      for (let child of node.childNodes) visit(child);
    };

    for (let node1 of nodes) visit(node1);

    let headerRows = $1ca231328db2f66a$var$buildHeaderRows(columnKeyMap, columns);
    headerRows.forEach((row, i) => rows.splice(i, 0, row));
    super({
      columnCount: columns.length,
      items: rows,
      visitNode: node => {
        node.column = columns[node.index];
        return node;
      }
    });
    this.columns = columns;
    this.rowHeaderColumnKeys = rowHeaderColumnKeys;
    this.body = body;
    this.headerRows = headerRows; // Default row header column to the first one.

    if (this.rowHeaderColumnKeys.size === 0) this.rowHeaderColumnKeys.add(this.columns[opts?.showSelectionCheckboxes ? 1 : 0].key);
  }

  *[Symbol.iterator]() {
    yield* this.body.childNodes;
  }

  get size() {
    return [...this.body.childNodes].length;
  }

  getKeys() {
    return this.keyMap.keys();
  }

  getKeyBefore(key) {
    let node = this.keyMap.get(key);
    return node ? node.prevKey : null;
  }

  getKeyAfter(key) {
    let node = this.keyMap.get(key);
    return node ? node.nextKey : null;
  }

  getFirstKey() {
    return [...this.body.childNodes][0]?.key;
  }

  getLastKey() {
    let rows = [...this.body.childNodes];
    return rows[rows.length - 1]?.key;
  }

  getItem(key) {
    return this.keyMap.get(key);
  }

  at(idx) {
    const keys = [...this.getKeys()];
    return this.getItem(keys[idx]);
  }

}

const $494692f36da31136$var$OPPOSITE_SORT_DIRECTION = {
  ascending: 'descending',
  descending: 'ascending'
};

function $494692f36da31136$export$907bcc6c48325fd6(props) {
  let {
    selectionMode = 'none'
  } = props;
  let context = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => ({
    showSelectionCheckboxes: props.showSelectionCheckboxes && selectionMode !== 'none',
    selectionMode: selectionMode,
    columns: []
  }), [props.children, props.showSelectionCheckboxes, selectionMode]);
  let collection = $7613b1592d41b092$export$6cd28814d92fa9c9(props, (nodes, prev) => new $1ca231328db2f66a$export$596e1b2e2cf93690(nodes, prev, context), context);
  let {
    disabledKeys: disabledKeys,
    selectionManager: selectionManager
  } = $62967d126f3aa823$export$4007ac09ff9c68ed({ ...props,
    collection: collection
  });
  return {
    collection: collection,
    disabledKeys: disabledKeys,
    selectionManager: selectionManager,
    showSelectionCheckboxes: props.showSelectionCheckboxes || false,
    sortDescriptor: props.sortDescriptor,

    sort(columnKey) {
      props.onSortChange({
        column: columnKey,
        direction: props.sortDescriptor?.column === columnKey ? $494692f36da31136$var$OPPOSITE_SORT_DIRECTION[props.sortDescriptor.direction] : 'ascending'
      });
    }

  };
}

var $3657764c2db588d6$exports = {};
_react_stately_table_dist_module_$parcel$export($3657764c2db588d6$exports, "TableHeader", () => $3657764c2db588d6$export$f850895b287ef28e);

function $3657764c2db588d6$var$TableHeader(props) {
  return null;
}

$3657764c2db588d6$var$TableHeader.getCollectionNode = function* getCollectionNode(props) {
  let {
    children: children,
    columns: columns
  } = props;

  if (typeof children === 'function') {
    if (!columns) throw new Error('props.children was a function but props.columns is missing');

    for (let column of columns) yield {
      type: 'column',
      value: column,
      renderer: children
    };
  } else {
    let columns = [];
    external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, column => {
      columns.push({
        type: 'column',
        element: column
      });
    });
    yield* columns;
  }
};
/**
 * A TableHeader is a container for the Column elements in a Table. Columns can be statically defined
 * as children, or generated dynamically using a function based on the data passed to the `columns` prop.
 */
// We don't want getCollectionNode to show up in the type definition


let $3657764c2db588d6$export$f850895b287ef28e = $3657764c2db588d6$var$TableHeader;
var $99858a7515d0e6da$exports = {};
_react_stately_table_dist_module_$parcel$export($99858a7515d0e6da$exports, "TableBody", () => $99858a7515d0e6da$export$76ccd210b9029917);

function $99858a7515d0e6da$var$TableBody(props) {
  return null;
}

$99858a7515d0e6da$var$TableBody.getCollectionNode = function* getCollectionNode(props) {
  let {
    children: children,
    items: items1
  } = props;
  yield {
    type: 'body',
    hasChildNodes: true,
    props: props,

    *childNodes() {
      if (typeof children === 'function') {
        if (!items1) throw new Error('props.children was a function but props.items is missing');

        for (let item of items1) yield {
          type: 'item',
          value: item,
          renderer: children
        };
      } else {
        let items = [];
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, item => {
          items.push({
            type: 'item',
            element: item
          });
        });
        yield* items;
      }
    }

  };
};
/**
 * A TableBody is a container for the Row elements of a Table. Rows can be statically defined
 * as children, or generated dynamically using a function based on the data passed to the `items` prop.
 */
// We don't want getCollectionNode to show up in the type definition


let $99858a7515d0e6da$export$76ccd210b9029917 = $99858a7515d0e6da$var$TableBody;
var $687413af9bbb06c5$exports = {};
_react_stately_table_dist_module_$parcel$export($687413af9bbb06c5$exports, "Column", () => $687413af9bbb06c5$export$816b5d811295e6bc);

function $687413af9bbb06c5$var$Column(props) {
  return null;
}

$687413af9bbb06c5$var$Column.getCollectionNode = function* getCollectionNode(props, context1) {
  let {
    title: title,
    children: children,
    childColumns: childColumns1
  } = props;
  let rendered = title || children;
  let textValue = props.textValue || (typeof rendered === 'string' ? rendered : '') || props['aria-label'];
  let fullNodes = yield {
    type: 'column',
    hasChildNodes: !!childColumns1 || title && external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.count(children) > 0,
    rendered: rendered,
    textValue: textValue,
    props: props,

    *childNodes() {
      if (childColumns1) for (let child1 of childColumns1) yield {
        type: 'column',
        value: child1
      };else if (title) {
        let childColumns = [];
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, child => {
          childColumns.push({
            type: 'column',
            element: child
          });
        });
        yield* childColumns;
      }
    },

    shouldInvalidate(newContext) {
      // This is a bit of a hack, but it works.
      // If this method is called, then there's a cached version of this node available.
      // But, we need to keep the list of columns in the new context up to date.
      updateContext(newContext);
      return false;
    }

  };

  let updateContext = context => {
    // register leaf columns on the context so that <Row> can access them
    for (let node of fullNodes) if (!node.hasChildNodes) context.columns.push(node);
  };

  updateContext(context1);
};
/**
 * A Column represents a field of each item within a Table. Columns may also contain nested
 * Column elements to represent column groups. Nested columns can be statically defined as
 * children, or dynamically generated using a function based on the `childColumns` prop.
 */
// We don't want getCollectionNode to show up in the type definition


let $687413af9bbb06c5$export$816b5d811295e6bc = $687413af9bbb06c5$var$Column;
var $f711e0e1fe2dac16$exports = {};
_react_stately_table_dist_module_$parcel$export($f711e0e1fe2dac16$exports, "Row", () => $f711e0e1fe2dac16$export$b59bdbef9ce70de2);

function $f711e0e1fe2dac16$var$Row(props) {
  return null;
}

$f711e0e1fe2dac16$var$Row.getCollectionNode = function* getCollectionNode(props, context) {
  let {
    children: children,
    textValue: textValue
  } = props;
  yield {
    type: 'item',
    props: props,
    textValue: textValue,
    'aria-label': props['aria-label'],
    hasChildNodes: true,

    *childNodes() {
      // Process cells first
      if (context.showSelectionCheckboxes && context.selectionMode !== 'none') yield {
        type: 'cell',
        key: 'header',
        props: {
          isSelectionCell: true
        }
      };
      if (typeof children === 'function') for (let column of context.columns) yield {
        type: 'cell',
        element: children(column.key),
        key: column.key // this is combined with the row key by CollectionBuilder

      };else {
        let cells = [];
        external_root_React_commonjs2_react_commonjs_react_amd_react_default().Children.forEach(children, cell => {
          cells.push({
            type: 'cell',
            element: cell
          });
        });
        if (cells.length !== context.columns.length) throw new Error(`Cell count must match column count. Found ${cells.length} cells and ${context.columns.length} columns.`);
        yield* cells;
      }
    },

    shouldInvalidate(newContext) {
      // Invalidate all rows if the columns changed.
      return newContext.columns.length !== context.columns.length || newContext.columns.some((c, i) => c.key !== context.columns[i].key) || newContext.showSelectionCheckboxes !== context.showSelectionCheckboxes || newContext.selectionMode !== context.selectionMode;
    }

  };
};
/**
 * A Row represents a single item in a Table and contains Cell elements for each column.
 * Cells can be statically defined as children, or generated dynamically using a function
 * based on the columns defined in the TableHeader.
 */
// We don't want getCollectionNode to show up in the type definition


let $f711e0e1fe2dac16$export$b59bdbef9ce70de2 = $f711e0e1fe2dac16$var$Row;
var $7926cbd9620c5dcc$exports = {};
_react_stately_table_dist_module_$parcel$export($7926cbd9620c5dcc$exports, "Cell", () => $7926cbd9620c5dcc$export$f6f0c3fe4ec306ea);

function $7926cbd9620c5dcc$var$Cell(props) {
  return null;
}

$7926cbd9620c5dcc$var$Cell.getCollectionNode = function* getCollectionNode(props) {
  let {
    children: children
  } = props;
  let textValue = props.textValue || (typeof children === 'string' ? children : '') || props['aria-label'] || '';
  yield {
    type: 'cell',
    props: props,
    rendered: children,
    textValue: textValue,
    'aria-label': props['aria-label'],
    hasChildNodes: false
  };
};
/**
 * A Cell represents the value of a single Column within a Table Row.
 */
// We don't want getCollectionNode to show up in the type definition


let $7926cbd9620c5dcc$export$f6f0c3fe4ec306ea = $7926cbd9620c5dcc$var$Cell;

;// CONCATENATED MODULE: ./src/table/table.styles.ts

const StyledTableHeaderRow = styled('tr', {
  ov: 'visible'
});
const StyledTableColumnHeader = styled('th', {
  height: '$14',
  cursor: 'default',
  bg: '$accents1',
  color: '$accents6',
  fontSize: '$tiny',
  textAlign: 'left',
  transition: '$default',
  position: 'relative',
  '@motion': {
    transition: 'none'
  },
  '&:first-child': {
    pl: '$8',
    br: '$md 0 0 $md'
  },
  '&:last-child': {
    pr: '$8',
    br: '0 $md $md 0'
  },
  variants: {
    align: {
      start: {
        textAlign: 'left'
      },
      center: {
        textAlign: 'center'
      },
      end: {
        textAlign: 'right'
      }
    },
    animated: {
      false: {
        transition: 'none'
      }
    },
    allowsSorting: {
      true: {
        transition: '$default',
        cursor: 'pointer',
        '@motion': {
          transition: 'none'
        },
        '&:hover': {
          color: '$accents7',
          bg: '$accents2'
        }
      }
    }
  },
  defaultVariants: {
    align: 'left',
    animated: true
  },
  compoundVariants: [// !animated & allowsSorting
  {
    animated: false,
    allowsSorting: true,
    css: {
      transition: 'none'
    }
  }]
}, cssFocusVisible);
const StyledTableHeaderCell = styled(StyledTableColumnHeader, cssFocusVisible);
const StyledTableFooter = styled('tfoot', {
  height: '$14',
  variants: {
    align: {
      start: {
        textAlign: 'left'
      },
      center: {
        textAlign: 'center'
      },
      end: {
        textAlign: 'right'
      }
    }
  },
  defaultVariants: {
    align: 'right'
  }
});
const StyledBaseTableCell = styled('td', {});
const StyledTableCell = styled(StyledBaseTableCell, {
  position: 'relative',
  userSelect: 'none',
  py: '$5',
  zIndex: '$2',
  transition: '$default',
  ov: 'hidden',
  whiteSpace: 'nowrap',
  textOverflow: 'ellipsis',
  '&:first-child': {
    pl: '$8'
  },
  '&:last-child': {
    pr: '$8'
  },
  '&:before': {
    zIndex: '-$1',
    transition: '$default',
    content: '""',
    position: 'absolute',
    size: '100%',
    top: 0,
    left: 0,
    opacity: 0
  },
  variants: {
    align: {
      start: {
        textAlign: 'left'
      },
      center: {
        textAlign: 'center'
      },
      end: {
        textAlign: 'right'
      }
    }
  }
}, cssFocusVisible);
const StyledTableRow = styled('tr', {
  ov: 'visible',
  color: '$text',
  variants: {
    isDisabled: {
      true: {
        color: '$accents3',
        pointerEvents: 'none',
        cursor: 'not-allowed'
      }
    },
    isSelected: {
      true: {
        color: '$$tableRowTextColor',
        [`& ${StyledTableCell}:before`]: {
          opacity: 1,
          bg: '$$tableRowColor'
        }
      }
    }
  }
}, cssFocusVisible);
const StyledTableRowGroup = styled('thead', {
  variants: {
    isFixed: {
      true: {
        display: 'table',
        width: '100%',
        tableLayout: 'fixed'
      }
    },
    isInfinityScroll: {
      true: {
        display: 'block',
        height: '100%',
        overflow: 'auto',
        [`& ${StyledTableRow}`]: {
          display: 'table',
          width: '100%',
          tableLayout: 'fixed'
        }
      }
    }
  },
  defaultVariants: {
    isInfinityScroll: false
  }
});
const StyledTableLoadingRow = styled('tr', {
  width: '100%',
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  height: 'calc(100% - $space$14)',
  variants: {
    isAtEnd: {
      true: {
        height: '$space$18'
      }
    },
    isAbsolute: {
      true: {
        position: 'absolute',
        left: '0',
        top: '$10'
      }
    }
  }
});
const StyledTable = styled('table', {
  borderCollapse: 'separate',
  borderSpacing: 0,
  width: '100%',
  p: '$md $sm',
  '@motion': {
    [`& ${StyledTableCell}`]: {
      transition: 'none'
    },
    [`& ${StyledTableCell}:before`]: {
      transition: 'none'
    }
  },
  variants: {
    animated: {
      false: {
        [`& ${StyledTableCell}`]: {
          transition: 'none'
        },
        [`& ${StyledTableCell}:before`]: {
          transition: 'none'
        }
      }
    },
    color: {
      primary: {
        $$tableRowColor: '$colors$primaryLight',
        $$tableRowTextColor: '$colors$primary'
      },
      secondary: {
        $$tableRowColor: '$colors$secondaryLight',
        $$tableRowTextColor: '$colors$secondary'
      },
      success: {
        $$tableRowColor: '$colors$successLight',
        $$tableRowTextColor: '$colors$success'
      },
      warning: {
        $$tableRowColor: '$colors$warningLight',
        $$tableRowTextColor: '$colors$warning'
      },
      error: {
        $$tableRowColor: '$colors$errorLight',
        $$tableRowTextColor: '$colors$error'
      }
    },
    striped: {
      true: {
        [`& ${StyledTableRow}[aria-selected=false]:nth-child(even)`]: {
          [`& ${StyledTableCell}`]: {
            bg: '$accents1'
          }
        },
        [`& ${StyledTableRow}:nth-child(even)`]: {
          [`& ${StyledTableCell}:first-child`]: {
            br: '$lg 0 0 $lg'
          },
          [`& ${StyledTableCell}:last-child`]: {
            br: '0 $lg $lg 0'
          }
        }
      }
    },
    sticked: {
      true: {
        p: 0,
        [`& ${StyledTableColumnHeader}:first-child`]: {
          br: '$lg 0 0 0'
        },
        [`& ${StyledTableColumnHeader}:last-child`]: {
          br: '0 $lg 0 0'
        }
      }
    },
    lineWeight: {
      light: {
        $$tableLineWeight: '$borderWeights$light'
      },
      normal: {
        $$tableLineWeight: '$borderWeights$normal'
      },
      bold: {
        $$tableLineWeight: '$borderWeights$bold'
      },
      extrabold: {
        $$tableLineWeight: '$borderWeights$extrabold'
      },
      black: {
        $$tableLineWeight: '$borderWeights$black'
      }
    },
    headerLined: {
      true: {
        [`& ${StyledTableColumnHeader}`]: {
          position: 'relative',
          bg: 'transparent',
          '&:after': {
            content: '',
            position: 'absolute',
            left: 0,
            right: 0,
            bottom: 0,
            height: 'calc($$tableLineWeight * 1.5)',
            bg: '$accents2'
          },
          '&:first-child': {
            ml: '$12',
            br: '0',
            '&:after': {
              left: '$space$md'
            }
          },
          '&:last-child': {
            br: '0',
            '&:after': {
              right: '$space$md'
            }
          }
        }
      }
    },
    lined: {
      true: {
        [`& ${StyledTableRow}:not(:last-child)`]: {
          position: 'relative',
          [`& ${StyledTableCell}:after`]: {
            content: '',
            position: 'absolute',
            bottom: 0,
            left: 0,
            right: 0,
            height: '$$tableLineWeight',
            bg: '$border'
          },
          [`& ${StyledTableCell}:first-child`]: {
            '&:after': {
              left: '$space$md'
            }
          },
          [`& ${StyledTableCell}:last-child`]: {
            '&:after': {
              right: '$space$md'
            }
          }
        },
        [`& ${StyledTableRow}[aria-selected=true]:not(last-child)`]: {
          [`& ${StyledTableCell}:after`]: {
            bg: '$$tableRowTextColor',
            opacity: 0.3
          }
        }
      }
    },
    fixed: {
      true: {
        tableLayout: 'fixed'
      }
    },
    hoverable: {
      true: {
        [`& ${StyledTableCell}:first-child`]: {
          br: '$md 0 0 $md'
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: '0 $md $md 0'
        },
        [`& ${StyledTableRow}`]: {
          cursor: 'pointer'
        },
        [`& ${StyledTableRow}[aria-selected=false]`]: {
          '&:hover': {
            [`& ${StyledTableCell}:before`]: {
              opacity: 1,
              bg: '$accents1'
            }
          }
        },
        [`& ${StyledTableRow}[aria-selected=true]`]: {
          '&:hover': {
            [`& ${StyledTableCell}:before`]: {
              opacity: 0.8
            }
          }
        }
      },
      false: {
        [`& ${StyledTableCell}`]: {
          userSelect: 'all'
        }
      }
    },
    isMultiple: {
      true: {}
    },
    hasPagination: {
      true: {}
    },
    shadow: {
      true: {}
    },
    compact: {
      true: {
        [`& ${StyledTableCell}`]: {
          py: '$1'
        },
        [`& ${StyledTableColumnHeader}`]: {
          height: '$12',
          '&:first-child': {
            br: '$sm 0 0 $sm'
          },
          '&:last-child': {
            br: '0 $sm $sm 0'
          }
        }
      }
    }
  },
  compoundVariants: [// isMultiple && hoverable
  {
    isMultiple: true,
    hoverable: true,
    css: {
      [`& ${StyledTableRow}:not(:first-child):not(:last-child)`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: 0
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: 0
        }
      },
      [`& ${StyledTableRow}:first-child`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: '$md 0 0 0'
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: '0 $md 0 0'
        }
      },
      [`& ${StyledTableRow}:last-child`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: '0 0 0 $md'
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: '0 0 $md 0'
        }
      }
    }
  }, // isMultiple && hoverable && sticked
  {
    isMultiple: true,
    hoverable: true,
    sticked: true,
    css: {
      [`& ${StyledTableRow}:first-child`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: '0'
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: '0'
        }
      }
    }
  }, // compact && shadow
  {
    compact: true,
    shadow: true,
    css: {
      p: '$md $sm'
    }
  }, // compact && sticked
  {
    compact: true,
    sticked: true,
    css: {
      p: 0
    }
  }, // sticked && !isMultiple && hoverable && !hasPagination
  {
    sticked: true,
    isMultiple: false,
    hoverable: true,
    hasPagination: false,
    css: {
      [`& ${StyledTableRow}:not(:last-child)`]: {
        [`& ${StyledTableCell}`]: {
          br: '0'
        }
      },
      [`& ${StyledTableRow}:last-child`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: '0 0 0 $md'
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: '0 0 $md 0'
        }
      }
    }
  }, // sticked && !isMultiple && hoverable && hasPagination
  {
    sticked: true,
    isMultiple: false,
    hoverable: true,
    hasPagination: true,
    css: {
      [`& ${StyledTableRow}`]: {
        [`& ${StyledTableCell}`]: {
          br: '0'
        }
      }
    }
  }, // sticked && hasPagination
  {
    sticked: true,
    hasPagination: true,
    css: {
      pb: '$5'
    }
  }, // sticked && hasPagination && isMultiple && hoverable
  {
    sticked: true,
    hasPagination: true,
    isMultiple: true,
    hoverable: true,
    css: {
      [`& ${StyledTableRow}:last-child`]: {
        [`& ${StyledTableCell}:first-child`]: {
          br: '0'
        },
        [`& ${StyledTableCell}:last-child`]: {
          br: '0'
        }
      }
    }
  }],
  defaultVariants: {
    sticked: false,
    color: 'primary',
    lineWeight: 'light'
  }
});
const StyledTableContainer = styled('div', {
  display: 'flex',
  flexDirection: 'column',
  br: '$xl',
  overflowX: 'scroll',
  variants: {
    shadow: {
      true: {
        bs: '$md'
      }
    },
    bordered: {
      true: {
        borderStyle: 'solid',
        borderColor: '$border'
      },
      false: {
        bw: 0
      }
    },
    borderWeight: {
      light: {
        bw: '$light'
      },
      normal: {
        bw: '$normal'
      },
      bold: {
        bw: '$bold'
      },
      extrabold: {
        bw: '$extrabold'
      },
      black: {
        bw: '$black'
      }
    }
  },
  defaultVariants: {
    shadow: true,
    borderWeight: 'normal'
  }
});
;// CONCATENATED MODULE: ./src/table/table-row-group.tsx
var table_row_group_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-row-group.tsx";






const table_row_group_defaultProps = {
  as: 'thead'
};

const TableRowGroup = ({
  children,
  ...props
}) => {
  const {
    rowGroupProps
  } = $e10d6c50e0041fd0$export$6fb1613bd7b28198();
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableRowGroup, {
    className: clsx('nextui-table-row-group', props.className),
    ...props,
    ...rowGroupProps,
    children: children
  }, void 0, false, {
    fileName: table_row_group_jsxFileName,
    lineNumber: 36,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ const table_row_group = (with_defaults(TableRowGroup, table_row_group_defaultProps));
;// CONCATENATED MODULE: ../../node_modules/@react-aria/visually-hidden/dist/module.js




function _react_aria_visually_hidden_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $b05beb39a168f0a6$exports = {};
_react_aria_visually_hidden_dist_module_$parcel$export($b05beb39a168f0a6$exports, "useVisuallyHidden", () => $b05beb39a168f0a6$export$a966af930f325cab);
_react_aria_visually_hidden_dist_module_$parcel$export($b05beb39a168f0a6$exports, "VisuallyHidden", () => $b05beb39a168f0a6$export$439d29a4e110a164);
const $b05beb39a168f0a6$var$styles = {
  border: 0,
  clip: 'rect(0 0 0 0)',
  clipPath: 'inset(50%)',
  height: 1,
  margin: '0 -1px -1px 0',
  overflow: 'hidden',
  padding: 0,
  position: 'absolute',
  width: 1,
  whiteSpace: 'nowrap'
};

function $b05beb39a168f0a6$export$a966af930f325cab(props = {}) {
  let {
    style: style,
    isFocusable: isFocusable
  } = props;
  let [isFocused, setFocused] = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useState)(false);
  let {
    focusProps: focusProps
  } = module_$a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    isDisabled: !isFocusable,
    onFocusChange: setFocused
  }); // If focused, don't hide the element.

  let combinedStyles = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    if (isFocused) return style;else if (style) return { ...$b05beb39a168f0a6$var$styles,
      ...style
    };else return $b05beb39a168f0a6$var$styles;
  }, [isFocused]);
  return {
    visuallyHiddenProps: { ...focusProps,
      style: combinedStyles
    }
  };
}

function $b05beb39a168f0a6$export$439d29a4e110a164(props) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  let {
    children: children,
    elementType: Element = 'div',
    isFocusable: isFocusable,
    style: style,
    ...otherProps
  } = props;
  let {
    visuallyHiddenProps: visuallyHiddenProps
  } = $b05beb39a168f0a6$export$a966af930f325cab(props);
  return /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createElement(Element, module_$3ef42575df84b30b$export$9d1611c77c2fe928(otherProps, visuallyHiddenProps), children);
}


;// CONCATENATED MODULE: ./src/table/table-sort-icon.tsx
var table_sort_icon_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-sort-icon.tsx";



const StyledSortIcon = styled('svg', {
  opacity: 0,
  transition: '$default',
  path: {
    fill: '$$tableRowTextColor'
  },
  variants: {
    visible: {
      true: {
        opacity: 1
      }
    },
    ascending: {
      true: {
        transform: 'rotate(180deg)'
      }
    }
  }
});
const ICON_SIZE = 22;

const TableSortIcon = props => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledSortIcon, {
  role: "presentation",
  "aria-hidden": "true",
  focusable: "false",
  className: "nextui-table-sort-icon",
  width: ICON_SIZE,
  height: ICON_SIZE,
  viewBox: "0 0 24 24",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg",
  ...props,
  children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("path", {
    d: "M12 2C6.49 2 2 6.49 2 12C2 17.51 6.49 22 12 22C17.51 22 22 17.51 22 12C22 6.49 17.51 2 12 2ZM16.06 11.27L12.53 14.8C12.38 14.95 12.19 15.02 12 15.02C11.81 15.02 11.62 14.95 11.47 14.8L7.94 11.27C7.65 10.98 7.65 10.5 7.94 10.21C8.23 9.92 8.71 9.92 9 10.21L12 13.21L15 10.21C15.29 9.92 15.77 9.92 16.06 10.21C16.35 10.5 16.35 10.97 16.06 11.27Z"
  }, void 0, false, {
    fileName: table_sort_icon_jsxFileName,
    lineNumber: 48,
    columnNumber: 5
  }, undefined)
}, void 0, false, {
  fileName: table_sort_icon_jsxFileName,
  lineNumber: 36,
  columnNumber: 3
}, undefined);

/* harmony default export */ const table_sort_icon = (TableSortIcon);
;// CONCATENATED MODULE: ./src/table/table-column-header.tsx
var table_column_header_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-column-header.tsx";









const TableColumnHeader = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  column,
  state,
  ...props
}, ref) => {
  var _state$sortDescriptor, _state$sortDescriptor2;

  const tableColumnHeaderRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableColumnHeaderRef == null ? void 0 : tableColumnHeaderRef.current);
  const {
    columnHeaderProps
  } = $e00d682c9b61b6ca$export$9514819a8c81e960({
    node: column
  }, state, tableColumnHeaderRef);
  const {
    isFocusVisible,
    focusProps
  } = $e974583017b16a4e$export$4e328f61c538687f();
  const {
    hideHeader,
    ...columnProps
  } = column.props;
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableColumnHeader, {
    ref: tableColumnHeaderRef,
    isFocusVisible: isFocusVisible,
    colSpan: column.colspan,
    className: clsx('nextui-table-column-header', props.className),
    ...$699afe8e9e0f66de$export$9d1611c77c2fe928(props, columnHeaderProps, focusProps, columnProps),
    children: [hideHeader ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)($b05beb39a168f0a6$export$439d29a4e110a164, {
      children: column.rendered
    }, void 0, false, {
      fileName: table_column_header_jsxFileName,
      lineNumber: 57,
      columnNumber: 9
    }, undefined) : column.rendered, columnProps.allowsSorting && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_sort_icon, {
      visible: ((_state$sortDescriptor = state.sortDescriptor) == null ? void 0 : _state$sortDescriptor.column) === column.key,
      ascending: ((_state$sortDescriptor2 = state.sortDescriptor) == null ? void 0 : _state$sortDescriptor2.direction) === 'ascending',
      css: {
        position: 'absolute',
        m: '0 $2',
        bottom: `calc(50% - ${ICON_SIZE / 2}px)`
      }
    }, void 0, false, {
      fileName: table_column_header_jsxFileName,
      lineNumber: 62,
      columnNumber: 9
    }, undefined)]
  }, void 0, true, {
    fileName: table_column_header_jsxFileName,
    lineNumber: 49,
    columnNumber: 5
  }, undefined);
});
TableColumnHeader.displayName = 'NextUI - TableColumnHeader';

TableColumnHeader.toString = () => '.nextui-table-column-header';

/* harmony default export */ const table_column_header = (TableColumnHeader);
;// CONCATENATED MODULE: ./src/table/table-header-row.tsx
var table_header_row_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-header-row.tsx";





const TableHeaderRow = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children,
  item,
  state,
  ...props
}, ref) => {
  const tableHeaderRowRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableHeaderRowRef == null ? void 0 : tableHeaderRowRef.current);
  const {
    rowProps
  } = $977e76ff58b065ed$export$1b95a7d2d517b841({
    node: item
  }, state, tableHeaderRowRef);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableHeaderRow, {
    ref: tableHeaderRowRef,
    className: clsx('nextui-table-header-row', props.className),
    ...props,
    ...rowProps,
    children: children
  }, void 0, false, {
    fileName: table_header_row_jsxFileName,
    lineNumber: 42,
    columnNumber: 7
  }, undefined);
});
TableHeaderRow.displayName = 'NextUI - TableHeaderRow';

TableHeaderRow.toString = () => '.nextui-table-header-row';

/* harmony default export */ const table_header_row = (TableHeaderRow);
;// CONCATENATED MODULE: ./node_modules/@react-stately/toggle/dist/module.js


function toggle_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $f47e43bfabc9ba47$exports = {};
toggle_dist_module_$parcel$export($f47e43bfabc9ba47$exports, "useToggleState", () => $f47e43bfabc9ba47$export$8042c6c013fd5226);

function $f47e43bfabc9ba47$export$8042c6c013fd5226(props = {}) {
  let {
    isReadOnly: isReadOnly
  } = props; // have to provide an empty function so useControlledState doesn't throw a fit
  // can't use useControlledState's prop calling because we need the event object from the change

  let [isSelected, setSelected] = $bfee1151ccb0650f$export$40bfa8c7b0832715(props.isSelected, props.defaultSelected || false, props.onChange);

  function updateSelected(value) {
    if (!isReadOnly) setSelected(value);
  }

  function toggleState() {
    if (!isReadOnly) setSelected(!isSelected);
  }

  return {
    isSelected: isSelected,
    setSelected: updateSelected,
    toggle: toggleState
  };
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/toggle/dist/module.js




function _react_aria_toggle_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $d2c8e2b0480f3f34$exports = {};
_react_aria_toggle_dist_module_$parcel$export($d2c8e2b0480f3f34$exports, "useToggle", () => $d2c8e2b0480f3f34$export$cbe85ee05b554577);

function $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {
  let {
    isDisabled = false,
    isRequired: isRequired,
    isReadOnly: isReadOnly,
    value: value,
    name: name,
    children: children,
    'aria-label': ariaLabel,
    'aria-labelledby': ariaLabelledby,
    validationState = 'valid'
  } = props;

  let onChange = e => {
    // since we spread props on label, onChange will end up there as well as in here.
    // so we have to stop propagation at the lowest level that we care about
    e.stopPropagation();
    state.setSelected(e.target.checked);
  };

  let hasChildren = children != null;
  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;
  if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility'); // This handles focusing the input on pointer down, which Safari does not do by default.

  let {
    pressProps: pressProps
  } = module_$f6c31cce2adf654f$export$45712eceda6fad21({
    isDisabled: isDisabled
  });
  let {
    focusableProps: focusableProps
  } = $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, ref);
  let interactions = module_$3ef42575df84b30b$export$9d1611c77c2fe928(pressProps, focusableProps);
  let domProps = module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  });
  return {
    inputProps: module_$3ef42575df84b30b$export$9d1611c77c2fe928(domProps, {
      'aria-invalid': validationState === 'invalid' || undefined,
      'aria-errormessage': props['aria-errormessage'],
      'aria-controls': props['aria-controls'],
      'aria-readonly': isReadOnly || undefined,
      'aria-required': isRequired || undefined,
      onChange: onChange,
      disabled: isDisabled,
      value: value,
      name: name,
      type: 'checkbox',
      ...interactions
    })
  };
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/checkbox/node_modules/@react-aria/label/dist/module.js


function _react_aria_label_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $2baaea4c71418dea$exports = {};
_react_aria_label_dist_module_$parcel$export($2baaea4c71418dea$exports, "useField", () => $2baaea4c71418dea$export$294aa081a6c6f55d);
var $d191a55c9702f145$exports = {};
_react_aria_label_dist_module_$parcel$export($d191a55c9702f145$exports, "useLabel", () => $d191a55c9702f145$export$8467354a121f1b9f);

function $d191a55c9702f145$export$8467354a121f1b9f(props) {
  let {
    id: id,
    label: label,
    'aria-labelledby': ariaLabelledby,
    'aria-label': ariaLabel,
    labelElementType = 'label'
  } = props;
  id = module_$bdb11010cef70236$export$f680877a34711e37(id);
  let labelId = module_$bdb11010cef70236$export$f680877a34711e37();
  let labelProps = {};

  if (label) {
    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;
    labelProps = {
      id: labelId,
      htmlFor: labelElementType === 'label' ? id : undefined
    };
  } else if (!ariaLabelledby && !ariaLabel) console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');

  let fieldProps = module_$313b98861ee5dd6c$export$d6875122194c7b44({
    id: id,
    'aria-label': ariaLabel,
    'aria-labelledby': ariaLabelledby
  });
  return {
    labelProps: labelProps,
    fieldProps: fieldProps
  };
}

function $2baaea4c71418dea$export$294aa081a6c6f55d(props) {
  let {
    description: description,
    errorMessage: errorMessage,
    validationState: validationState
  } = props;
  let {
    labelProps: labelProps,
    fieldProps: fieldProps
  } = $d191a55c9702f145$export$8467354a121f1b9f(props);
  let descriptionId = module_$bdb11010cef70236$export$b4cc09c592e8fdb8([Boolean(description), Boolean(errorMessage), validationState]);
  let errorMessageId = module_$bdb11010cef70236$export$b4cc09c592e8fdb8([Boolean(description), Boolean(errorMessage), validationState]);
  fieldProps = module_$3ef42575df84b30b$export$9d1611c77c2fe928(fieldProps, {
    'aria-describedby': [descriptionId, // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268
    errorMessageId, props['aria-describedby']].filter(Boolean).join(' ') || undefined
  });
  return {
    labelProps: labelProps,
    fieldProps: fieldProps,
    descriptionProps: {
      id: descriptionId
    },
    errorMessageProps: {
      id: errorMessageId
    }
  };
}


;// CONCATENATED MODULE: ../../node_modules/@react-stately/toggle/dist/module.js


function _react_stately_toggle_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $3017fa7ffdddec74$exports = {};
_react_stately_toggle_dist_module_$parcel$export($3017fa7ffdddec74$exports, "useToggleState", () => $3017fa7ffdddec74$export$8042c6c013fd5226);

function $3017fa7ffdddec74$export$8042c6c013fd5226(props = {}) {
  let {
    isReadOnly: isReadOnly
  } = props; // have to provide an empty function so useControlledState doesn't throw a fit
  // can't use useControlledState's prop calling because we need the event object from the change

  let [isSelected, setSelected] = $bfee1151ccb0650f$export$40bfa8c7b0832715(props.isSelected, props.defaultSelected || false, props.onChange);

  function updateSelected(value) {
    if (!isReadOnly) setSelected(value);
  }

  function toggleState() {
    if (!isReadOnly) setSelected(!isSelected);
  }

  return {
    isSelected: isSelected,
    setSelected: updateSelected,
    toggle: toggleState
  };
}


;// CONCATENATED MODULE: ../../node_modules/@react-aria/checkbox/dist/module.js






function checkbox_dist_module_$parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {
    get: v,
    set: s,
    enumerable: true,
    configurable: true
  });
}

var $6fc5544ca1b3ab2a$exports = {};
checkbox_dist_module_$parcel$export($6fc5544ca1b3ab2a$exports, "useCheckbox", () => $6fc5544ca1b3ab2a$export$e375f10ce42261c5);

function $6fc5544ca1b3ab2a$export$e375f10ce42261c5(props, state, inputRef) {
  let {
    inputProps: inputProps
  } = $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, inputRef);
  let {
    isSelected: isSelected
  } = state;
  let {
    isIndeterminate: isIndeterminate
  } = props;
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useEffect)(() => {
    // indeterminate is a property, but it can only be set via javascript
    // https://css-tricks.com/indeterminate-checkboxes/
    if (inputRef.current) inputRef.current.indeterminate = isIndeterminate;
  });
  return {
    inputProps: { ...inputProps,
      checked: isSelected,
      'aria-checked': isIndeterminate ? 'mixed' : isSelected
    }
  };
}

var $9c576869c2451f7f$exports = {};
checkbox_dist_module_$parcel$export($9c576869c2451f7f$exports, "useCheckboxGroup", () => $9c576869c2451f7f$export$49ff6f28c54f1cbe);
const $46cd8c3ac90d2083$export$31440636951aa68c = new WeakMap();

function $9c576869c2451f7f$export$49ff6f28c54f1cbe(props, state) {
  let {
    isDisabled: isDisabled,
    name: name
  } = props;
  let {
    labelProps: labelProps,
    fieldProps: fieldProps
  } = $d191a55c9702f145$export$8467354a121f1b9f({ ...props,
    // Checkbox group is not an HTML input element so it
    // shouldn't be labeled by a <label> element.
    labelElementType: 'span'
  });
  let domProps = module_$65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  }); // Pass name prop from group to all items by attaching to the state.

  $46cd8c3ac90d2083$export$31440636951aa68c.set(state, name);
  return {
    groupProps: module_$3ef42575df84b30b$export$9d1611c77c2fe928(domProps, {
      role: 'group',
      'aria-disabled': isDisabled || undefined,
      ...fieldProps
    }),
    labelProps: labelProps
  };
}

var $1e517f900339691c$exports = {};
checkbox_dist_module_$parcel$export($1e517f900339691c$exports, "useCheckboxGroupItem", () => $1e517f900339691c$export$353b32fc6898d37d);

function $1e517f900339691c$export$353b32fc6898d37d(props, state, inputRef) {
  const toggleState = $3017fa7ffdddec74$export$8042c6c013fd5226({
    isReadOnly: props.isReadOnly || state.isReadOnly,
    isSelected: state.isSelected(props.value),

    onChange(isSelected) {
      if (isSelected) state.addValue(props.value);else state.removeValue(props.value);
      if (props.onChange) props.onChange(isSelected);
    }

  });
  let {
    inputProps: inputProps
  } = $6fc5544ca1b3ab2a$export$e375f10ce42261c5({ ...props,
    isReadOnly: props.isReadOnly || state.isReadOnly,
    isDisabled: props.isDisabled || state.isDisabled,
    name: props.name || $46cd8c3ac90d2083$export$31440636951aa68c.get(state)
  }, toggleState, inputRef);
  return {
    inputProps: inputProps
  };
}


;// CONCATENATED MODULE: ./src/table/table-select-all-checkbox.tsx
var table_select_all_checkbox_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-select-all-checkbox.tsx";











const TableSelectAllCheckbox = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  column,
  state,
  color,
  animated,
  ...props
}, ref) => {
  const tableCellRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableCellRef == null ? void 0 : tableCellRef.current);
  const isSingleSelectionMode = state.selectionManager.selectionMode === 'single';
  const {
    columnHeaderProps
  } = $e00d682c9b61b6ca$export$9514819a8c81e960({
    node: column
  }, state, tableCellRef);
  const {
    checkboxProps
  } = $d38e85e844ed4409$export$1003db6a7e384b99(state);
  const {
    isFocusVisible,
    focusProps
  } = $e974583017b16a4e$export$4e328f61c538687f();
  const inputRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const {
    inputProps
  } = $6fc5544ca1b3ab2a$export$e375f10ce42261c5(checkboxProps, $f47e43bfabc9ba47$export$8042c6c013fd5226({ ...checkboxProps,
    isSelected: checkboxProps.isSelected || checkboxProps.isIndeterminate
  }), inputRef);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableHeaderCell, {
    ref: tableCellRef,
    isFocusVisible: isFocusVisible,
    className: clsx('nextui-table-select-all-checkbox', props.className),
    ...$699afe8e9e0f66de$export$9d1611c77c2fe928(columnHeaderProps, focusProps, props),
    children: isSingleSelectionMode ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)($b05beb39a168f0a6$export$439d29a4e110a164, {
      children: inputProps['aria-label']
    }, void 0, false, {
      fileName: table_select_all_checkbox_jsxFileName,
      lineNumber: 87,
      columnNumber: 11
    }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_checkbox, {
      ref: inputRef,
      ...inputProps,
      indeterminate: checkboxProps.isIndeterminate,
      color: color,
      animated: animated,
      css: {
        display: 'inherit',
        $$checkboxBorderColor: '$colors$accents3'
      }
    }, void 0, false, {
      fileName: table_select_all_checkbox_jsxFileName,
      lineNumber: 89,
      columnNumber: 11
    }, undefined)
  }, void 0, false, {
    fileName: table_select_all_checkbox_jsxFileName,
    lineNumber: 80,
    columnNumber: 7
  }, undefined);
});
TableSelectAllCheckbox.displayName = 'NextUI - TableSelectAllCheckbox';

TableSelectAllCheckbox.toString = () => '.nextui-table-select-all-checkbox';

/* harmony default export */ const table_select_all_checkbox = (TableSelectAllCheckbox);
;// CONCATENATED MODULE: ./src/table/table-context.tsx
var table_context_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-context.tsx";


const table_context_defaultContext = {
  footerAlign: 'end',
  rowsPerPage: 0,
  currentPage: 1,
  animated: true
};
const TableContext = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().createContext(table_context_defaultContext);
const useTableContext = () => external_root_React_commonjs2_react_commonjs_react_amd_react_default().useContext(TableContext);

const Provider = ({
  children,
  defaultValues
}) => {
  const [footerAlign, setFooterAlign] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState((defaultValues == null ? void 0 : defaultValues.footerAlign) || table_context_defaultContext.footerAlign);
  const [animated, setAnimated] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState((defaultValues == null ? void 0 : defaultValues.animated) === undefined ? table_context_defaultContext.animated : defaultValues == null ? void 0 : defaultValues.animated);
  const [collection, setCollection] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState(defaultValues == null ? void 0 : defaultValues.collection);
  const [rowsPerPage, setRowsPerPage] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState(table_context_defaultContext.rowsPerPage);
  const [currentPage, setCurrentPage] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState(table_context_defaultContext.currentPage);
  const [color, setColor] = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useState(defaultValues == null ? void 0 : defaultValues.color);
  const providerValue = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useMemo(() => ({
    animated,
    footerAlign,
    collection,
    rowsPerPage,
    currentPage,
    color,
    setFooterAlign,
    setCollection,
    setAnimated,
    setRowsPerPage,
    setColor,
    setCurrentPage
  }), [animated, color, collection, footerAlign, rowsPerPage, currentPage]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(TableContext.Provider, {
    value: providerValue,
    children: children
  }, void 0, false, {
    fileName: table_context_jsxFileName,
    lineNumber: 80,
    columnNumber: 5
  }, undefined);
};

/* harmony default export */ const table_context = ({
  Provider,
  Consumer: TableContext.Consumer
});
;// CONCATENATED MODULE: ./src/table/table-pagination.tsx
var table_pagination_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-pagination.tsx";






const TablePagination = ({
  align,
  rowsPerPage: rowsPerPageProp,
  onPageChange,
  ...props
}) => {
  const {
    color,
    animated,
    collection,
    footerAlign,
    rowsPerPage,
    setFooterAlign,
    setRowsPerPage,
    setCurrentPage
  } = useTableContext();
  external_root_React_commonjs2_react_commonjs_react_amd_react_default().useEffect(() => {
    if (align && align !== footerAlign) {
      setFooterAlign == null ? void 0 : setFooterAlign(align);
    }
  }, [align, footerAlign]);
  external_root_React_commonjs2_react_commonjs_react_amd_react_default().useEffect(() => {
    if (rowsPerPageProp && rowsPerPageProp !== rowsPerPage) {
      setRowsPerPage == null ? void 0 : setRowsPerPage(rowsPerPageProp);
    }
  }, [rowsPerPage, rowsPerPageProp]);

  const handlePageChanged = page => {
    setCurrentPage == null ? void 0 : setCurrentPage(page);
    onPageChange == null ? void 0 : onPageChange(page);
  };

  const totalPagination = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    var _collection$body;

    const rowsCount = collection != null && collection.body ? [...(collection == null ? void 0 : (_collection$body = collection.body) == null ? void 0 : _collection$body.childNodes)].length : 0;
    return rowsPerPage > 0 ? Math.ceil(rowsCount / rowsPerPage) : 1;
  }, [collection, rowsPerPage]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_pagination, {
    total: totalPagination,
    animated: animated,
    onChange: handlePageChanged,
    color: props.color || color,
    className: clsx('nextui-table-pagination', props.className),
    ...props
  }, void 0, false, {
    fileName: table_pagination_jsxFileName,
    lineNumber: 63,
    columnNumber: 5
  }, undefined);
};

TablePagination.displayName = 'NextUI - TablePagination';

TablePagination.toString = () => '.nextui-table-pagination';

/* harmony default export */ const table_pagination = (TablePagination);
;// CONCATENATED MODULE: ./src/table/table-footer.tsx
var table_footer_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-footer.tsx";





const TableFooter = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children,
  ...props
}, ref) => {
  const tableFooterRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableFooterRef == null ? void 0 : tableFooterRef.current);
  const {
    footerAlign
  } = useTableContext();
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableFooter, {
    ref: tableFooterRef,
    role: "rowgroup",
    align: props.align || footerAlign,
    className: clsx('nextui-table-footer', props.className),
    ...props,
    children: children
  }, void 0, false, {
    fileName: table_footer_jsxFileName,
    lineNumber: 23,
    columnNumber: 5
  }, undefined);
});
TableFooter.displayName = 'NextUI - TableFooter';

TableFooter.toString = () => '.nextui-table-footer';

/* harmony default export */ const table_footer = (TableFooter);
;// CONCATENATED MODULE: ./src/table/table-row.tsx
var table_row_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-row.tsx";







const TableRow = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  children,
  item,
  state,
  ...props
}, ref) => {
  const tableRowRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableRowRef == null ? void 0 : tableRowRef.current);
  const {
    rowProps
  } = $601c09ad619dd758$export$7f2f6ae19e707aa5({
    node: item
  }, state, tableRowRef);
  const {
    isFocusVisible,
    focusProps
  } = $e974583017b16a4e$export$4e328f61c538687f();
  const isDisabled = state.disabledKeys.has(item.key);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableRow, {
    ref: tableRowRef,
    isFocusVisible: isFocusVisible,
    isSelected: !!rowProps['aria-selected'],
    isDisabled: isDisabled,
    className: clsx('nextui-table-row', {
      'nextui-table-row--selected': rowProps['aria-selected'],
      'nextui-table-row--disabled': isDisabled
    }, props.className),
    css: item.props.css,
    ...$699afe8e9e0f66de$export$9d1611c77c2fe928(rowProps, focusProps, props),
    children: children
  }, void 0, false, {
    fileName: table_row_jsxFileName,
    lineNumber: 39,
    columnNumber: 7
  }, undefined);
});
TableRow.displayName = 'NextUI - TableRow';

TableRow.toString = () => '.nextui-table-row';

/* harmony default export */ const table_row = (TableRow);
;// CONCATENATED MODULE: ./src/table/table-cell.tsx
var table_cell_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-cell.tsx";







const TableCell = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  cell,
  state,
  ...props
}, ref) => {
  const tableCellRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableCellRef == null ? void 0 : tableCellRef.current);
  const {
    gridCellProps
  } = $a262418ffbc55256$export$49571c903d73624c({
    node: cell
  }, state, tableCellRef);
  const {
    isFocusVisible,
    focusProps
  } = $e974583017b16a4e$export$4e328f61c538687f();
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableCell, {
    ref: tableCellRef,
    isFocusVisible: isFocusVisible,
    className: clsx('nextui-table-cell', props.className),
    css: cell.props.css,
    ...$699afe8e9e0f66de$export$9d1611c77c2fe928(gridCellProps, focusProps, props),
    children: cell.rendered
  }, void 0, false, {
    fileName: table_cell_jsxFileName,
    lineNumber: 42,
    columnNumber: 7
  }, undefined);
});
TableCell.displayName = 'NextUI - TableCell';

TableCell.toString = () => '.nextui-table-cell';

/* harmony default export */ const table_cell = (TableCell);
;// CONCATENATED MODULE: ./src/table/table-checkbox-cell.tsx
var table_checkbox_cell_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-checkbox-cell.tsx";










const TableCheckboxCell = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef(({
  cell,
  state,
  color,
  animated,
  ...props
}, ref) => {
  const tableCellRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableCellRef == null ? void 0 : tableCellRef.current);
  const {
    gridCellProps
  } = $a262418ffbc55256$export$49571c903d73624c({
    node: cell
  }, state, tableCellRef);
  const {
    checkboxProps
  } = $d38e85e844ed4409$export$16ea7f650bd7c1bb({
    key: (cell == null ? void 0 : cell.parentKey) || cell.key
  }, state);
  const {
    isFocusVisible,
    focusProps
  } = $e974583017b16a4e$export$4e328f61c538687f();
  const inputRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  const {
    inputProps
  } = $6fc5544ca1b3ab2a$export$e375f10ce42261c5(checkboxProps, $f47e43bfabc9ba47$export$8042c6c013fd5226(checkboxProps), inputRef);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableCell, {
    ref: tableCellRef,
    isFocusVisible: isFocusVisible,
    className: clsx('nextui-table-checkbox-cell', props.className),
    ...$699afe8e9e0f66de$export$9d1611c77c2fe928(gridCellProps, focusProps, props),
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_checkbox, { ...inputProps,
      ref: inputRef,
      color: color,
      animated: animated,
      css: {
        display: 'inherit'
      }
    }, void 0, false, {
      fileName: table_checkbox_cell_jsxFileName,
      lineNumber: 75,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: table_checkbox_cell_jsxFileName,
    lineNumber: 69,
    columnNumber: 7
  }, undefined);
});
TableCheckboxCell.displayName = 'NextUI - TableCheckboxCell';

TableCheckboxCell.toString = () => '.nextui-table-checkbox-cell';

/* harmony default export */ const table_checkbox_cell = (TableCheckboxCell);
;// CONCATENATED MODULE: ./src/table/utils.ts
const isInfinityScroll = collection => {
  var _collection$body;

  const bodyProps = (_collection$body = collection.body) == null ? void 0 : _collection$body.props;
  return (bodyProps == null ? void 0 : bodyProps.loadingState) !== undefined && typeof (bodyProps == null ? void 0 : bodyProps.onLoadMore) === 'function';
};
;// CONCATENATED MODULE: ./src/table/table-body.tsx
var table_body_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table-body.tsx";












// TODO: Remove this once we have a better way to pass it from the parent
const SCROLL_OFFSET = 40;

const TableBody = ({
  children,
  collection,
  state,
  animated,
  color,
  hasPagination,
  hideLoading,
  ...props
}) => {
  var _collection$body, _collection$body$prop, _collection$body2, _collection$body2$pro, _collection$body4, _collection$body4$pro;

  const {
    currentPage,
    rowsPerPage
  } = useTableContext();
  const infinityScroll = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => isInfinityScroll(collection), [collection.body.props]);
  const isLoading = ((_collection$body = collection.body) == null ? void 0 : (_collection$body$prop = _collection$body.props) == null ? void 0 : _collection$body$prop.loadingState) === 'loading' || ((_collection$body2 = collection.body) == null ? void 0 : (_collection$body2$pro = _collection$body2.props) == null ? void 0 : _collection$body2$pro.loadingState) === 'loadingMore';
  const rows = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const data = [...collection.body.childNodes];

    if (!hasPagination) {
      return data;
    }

    return data == null ? void 0 : data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage);
  }, [hasPagination, collection, currentPage, rowsPerPage]);
  const completeSpaces = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useMemo)(() => {
    const rowsCount = rows.length;

    if (rowsCount >= rowsPerPage && !infinityScroll) {
      return null;
    }

    return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("tr", {
      role: "row",
      className: "nextui-table-hidden-row",
      "aria-hidden": "true",
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBaseTableCell, {
        "aria-hidden": "true",
        colSpan: collection.columnCount,
        style: $699afe8e9e0f66de$export$9d1611c77c2fe928({
          '--nextui--tableBodyEmptySpaceHeight': infinityScroll ? 'var(--nextui-space-10)' : `calc(${rowsPerPage - rowsCount} * var(--nextui-space-14))`
        }, (props == null ? void 0 : props.style) || {}),
        css: {
          height: 'var(--nextui--tableBodyEmptySpaceHeight)'
        }
      }, void 0, false, {
        fileName: table_body_jsxFileName,
        lineNumber: 77,
        columnNumber: 9
      }, undefined)
    }, void 0, false, {
      fileName: table_body_jsxFileName,
      lineNumber: 76,
      columnNumber: 7
    }, undefined);
  }, [collection.columnCount, rows, rowsPerPage, infinityScroll]); // handle scroll and call next page on infinity scroll

  const handleScroll = e => {
    if (!infinityScroll) {
      return;
    }

    const element = e.target;
    const isAtBottom = element.scrollHeight - (element.scrollTop + SCROLL_OFFSET) <= element.clientHeight;

    if (isAtBottom && !isLoading) {
      var _collection$body3, _collection$body3$pro;

      (_collection$body3 = collection.body) == null ? void 0 : (_collection$body3$pro = _collection$body3.props) == null ? void 0 : _collection$body3$pro.onLoadMore == null ? void 0 : _collection$body3$pro.onLoadMore();
    }
  };

  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_row_group, {
    as: "tbody",
    className: clsx('nextui-table-body', props.className),
    isInfinityScroll: infinityScroll,
    onScroll: handleScroll,
    css: {
      pb: '$10',
      position: 'relative',
      ...props.css,
      ...((_collection$body4 = collection.body) == null ? void 0 : (_collection$body4$pro = _collection$body4.props) == null ? void 0 : _collection$body4$pro.css)
    },
    ...props,
    children: [children, rows == null ? void 0 : rows.map(row => {
      if (!row.hasChildNodes) {
        return null;
      }

      return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_row, {
        "aria-hidden": "false",
        item: row,
        state: state,
        children: [...row.childNodes].map(cell => {
          var _cell$props;

          return cell != null && (_cell$props = cell.props) != null && _cell$props.isSelectionCell ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_checkbox_cell, {
            cell: cell,
            state: state,
            color: color,
            animated: animated
          }, cell == null ? void 0 : cell.key, false, {
            fileName: table_body_jsxFileName,
            lineNumber: 134,
            columnNumber: 17
          }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_cell, {
            cell: cell,
            state: state
          }, cell == null ? void 0 : cell.key, false, {
            fileName: table_body_jsxFileName,
            lineNumber: 142,
            columnNumber: 17
          }, undefined);
        })
      }, row == null ? void 0 : row.key, false, {
        fileName: table_body_jsxFileName,
        lineNumber: 131,
        columnNumber: 11
      }, undefined);
    }), !hideLoading && isLoading && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableLoadingRow, {
      role: "row",
      className: "nextui-table-hidden-row",
      "aria-hidden": "true",
      isAtEnd: rows.length > 0,
      isAbsolute: !infinityScroll,
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledBaseTableCell, {
        "aria-hidden": "true",
        colSpan: collection.columnCount,
        children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_loading, {
          color: color
        }, void 0, false, {
          fileName: table_body_jsxFileName,
          lineNumber: 160,
          columnNumber: 13
        }, undefined)
      }, void 0, false, {
        fileName: table_body_jsxFileName,
        lineNumber: 156,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: table_body_jsxFileName,
      lineNumber: 149,
      columnNumber: 9
    }, undefined), completeSpaces]
  }, void 0, true, {
    fileName: table_body_jsxFileName,
    lineNumber: 112,
    columnNumber: 5
  }, undefined);
};

TableBody.displayName = 'NextUI - TableBody';

TableBody.toString = () => '.nextui-table-body';

/* harmony default export */ const table_body = (TableBody);
;// CONCATENATED MODULE: ./src/table/table.tsx
var table_jsxFileName = "/home/runner/work/nextui/nextui/packages/react/src/table/table.tsx";



















const table_defaultProps = {
  animated: true,
  hideLoading: false,
  selectionMode: 'none',
  selectionBehavior: 'toggle'
};
const Table = /*#__PURE__*/external_root_React_commonjs2_react_commonjs_react_amd_react_default().forwardRef((tableProps, ref) => {
  const {
    selectionMode,
    selectionBehavior,
    hideLoading,
    children,
    shadow,
    color,
    animated,
    borderWeight,
    bordered,
    containerCss,
    ...props
  } = tableProps;
  const [withoutPaginationChildren, paginationChildren] = pickSingleChild(children, table_pagination);
  const hasPagination = hasChild(children, table_pagination);
  const state = $494692f36da31136$export$907bcc6c48325fd6({ ...tableProps,
    children: withoutPaginationChildren,
    showSelectionCheckboxes: tableProps.showSelectionCheckboxes !== undefined ? tableProps.showSelectionCheckboxes : selectionMode === 'multiple' && selectionBehavior !== 'replace'
  }); // clean table props

  Object.keys(props).forEach(propNameKey => {
    if (excludedTableProps.indexOf(propNameKey) > -1) {
      // @ts-ignored
      delete props[propNameKey];
    }
  });
  const tableRef = (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useRef)(null);
  (0,external_root_React_commonjs2_react_commonjs_react_amd_react_.useImperativeHandle)(ref, () => tableRef == null ? void 0 : tableRef.current);
  const {
    collection
  } = state;
  const {
    gridProps
  } = $58b38183c6c3f0ee$export$25bceaac3c7e4dc7(tableProps, state, tableRef);
  const initialValues = external_root_React_commonjs2_react_commonjs_react_amd_react_default().useMemo(() => {
    return {
      collection,
      color,
      animated
    };
  }, [collection, animated, color]);
  return /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_context.Provider, {
    defaultValues: initialValues,
    children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTableContainer, {
      shadow: shadow,
      borderWeight: borderWeight,
      bordered: bordered,
      className: "nextui-table-container",
      css: { ...containerCss
      },
      children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(StyledTable, {
        ref: tableRef,
        color: color,
        shadow: shadow,
        animated: animated,
        hoverable: selectionMode !== 'none' || props.hoverable,
        isMultiple: selectionMode === 'multiple',
        hasPagination: hasPagination,
        className: clsx('nextui-table', props.className),
        ...gridProps,
        ...props,
        children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_row_group, {
          as: "thead",
          isFixed: isInfinityScroll(collection),
          children: [collection.headerRows.map(headerRow => /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_header_row, {
            item: headerRow,
            state: state,
            children: [...headerRow.childNodes].map(column => {
              var _column$props;

              return column != null && (_column$props = column.props) != null && _column$props.isSelectionCell ? /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_select_all_checkbox, {
                column: column,
                state: state,
                color: color,
                animated: animated
              }, column == null ? void 0 : column.key, false, {
                fileName: table_jsxFileName,
                lineNumber: 160,
                columnNumber: 23
              }, undefined) : /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_column_header, {
                column: column,
                state: state,
                animated: animated
              }, column == null ? void 0 : column.key, false, {
                fileName: table_jsxFileName,
                lineNumber: 168,
                columnNumber: 23
              }, undefined);
            })
          }, headerRow == null ? void 0 : headerRow.key, false, {
            fileName: table_jsxFileName,
            lineNumber: 153,
            columnNumber: 17
          }, undefined)), !props.sticked && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_spacer, {
            as: "tr",
            className: "nextui-table-hidden-row",
            y: 0.4
          }, void 0, false, {
            fileName: table_jsxFileName,
            lineNumber: 179,
            columnNumber: 17
          }, undefined)]
        }, void 0, true, {
          fileName: table_jsxFileName,
          lineNumber: 151,
          columnNumber: 13
        }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_body, {
          state: state,
          color: color,
          collection: collection,
          animated: animated,
          hasPagination: hasPagination,
          hideLoading: hideLoading
        }, void 0, false, {
          fileName: table_jsxFileName,
          lineNumber: 182,
          columnNumber: 13
        }, undefined), hasPagination && /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(table_footer, {
          children: [/*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)(src_spacer, {
            as: "tr",
            className: "nextui-table-hidden-row",
            y: 0.6
          }, void 0, false, {
            fileName: table_jsxFileName,
            lineNumber: 193,
            columnNumber: 17
          }, undefined), /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("tr", {
            role: "row",
            children: /*#__PURE__*/(0,jsx_dev_runtime.jsxDEV)("th", {
              tabIndex: -1,
              role: "columnheader",
              colSpan: collection.columnCount,
              children: paginationChildren
            }, void 0, false, {
              fileName: table_jsxFileName,
              lineNumber: 195,
              columnNumber: 19
            }, undefined)
          }, void 0, false, {
            fileName: table_jsxFileName,
            lineNumber: 194,
            columnNumber: 17
          }, undefined)]
        }, void 0, true, {
          fileName: table_jsxFileName,
          lineNumber: 192,
          columnNumber: 15
        }, undefined)]
      }, void 0, true, {
        fileName: table_jsxFileName,
        lineNumber: 139,
        columnNumber: 11
      }, undefined)
    }, void 0, false, {
      fileName: table_jsxFileName,
      lineNumber: 132,
      columnNumber: 9
    }, undefined)
  }, void 0, false, {
    fileName: table_jsxFileName,
    lineNumber: 131,
    columnNumber: 7
  }, undefined);
});
Table.displayName = 'NextUI - Table';

Table.toString = () => '.nextui-table';

/* harmony default export */ const table = (with_defaults(Table, table_defaultProps));
;// CONCATENATED MODULE: ./src/table/base/table-cell.tsx

// Override TS for Cell to support NextUI specific props.
const table_cell_TableCell = $7926cbd9620c5dcc$export$f6f0c3fe4ec306ea;
/* harmony default export */ const base_table_cell = (table_cell_TableCell);
;// CONCATENATED MODULE: ./src/table/base/table-column.tsx

// Override TS for Column to support NextUI specific props.
const TableColumn = $687413af9bbb06c5$export$816b5d811295e6bc;
/* harmony default export */ const table_column = (TableColumn);
;// CONCATENATED MODULE: ./src/table/base/table-header.tsx

const TableHeader = $3657764c2db588d6$export$f850895b287ef28e;
/* harmony default export */ const table_header = (TableHeader);
;// CONCATENATED MODULE: ./src/table/base/table-row.tsx

// Override TS for TableRow to support NextUI specific props.
const table_row_TableRow = $f711e0e1fe2dac16$export$b59bdbef9ce70de2;
/* harmony default export */ const base_table_row = (table_row_TableRow);
;// CONCATENATED MODULE: ./src/table/base/table-body.tsx

// Override TS for Body to support NextUI specific props.
const table_body_TableBody = $99858a7515d0e6da$export$76ccd210b9029917;
/* harmony default export */ const base_table_body = (table_body_TableBody);
;// CONCATENATED MODULE: ./src/table/index.ts




table.Cell = base_table_cell;
table.Column = table_column;
table.Header = table_header;
table.Row = base_table_row;
table.Body = base_table_body;
table.Pagination = table_pagination;
/* harmony default export */ const src_table = (table);
;// CONCATENATED MODULE: ./src/index.ts
//Utils
 // Hooks















 // Third party


 //Theme



 // Components

























































})();

/******/ 	return __webpack_exports__;
/******/ })()
;
});