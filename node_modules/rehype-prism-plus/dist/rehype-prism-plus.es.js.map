{"version":3,"file":"rehype-prism-plus.es.js","sources":["../src/generator.js","../src/common.js","../src/all.js"],"sourcesContent":["/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Root} Root\n * @typedef Options options\n *   Configuration.\n * @property {boolean} [showLineNumbers]\n *   Set `showLineNumbers` to `true` to always display line number\n * @property {boolean} [ignoreMissing]\n *   Set `ignoreMissing` to `true` to ignore unsupported languages and line highlighting when no language is specified\n */\n\nimport { visit } from 'unist-util-visit'\nimport { toString } from 'hast-util-to-string'\nimport { filter } from 'unist-util-filter'\nimport rangeParser from 'parse-numeric-range'\n\n/**\n * @param {Element} node\n * @return {string|null}\n */\nconst getLanguage = (node) => {\n  const className = node.properties.className\n  //@ts-ignore\n  for (const classListItem of className) {\n    if (classListItem.slice(0, 9) === 'language-') {\n      return classListItem.slice(9).toLowerCase()\n    }\n  }\n  return null\n}\n\n/**\n * Create a closure that determines if we have to highlight the given index\n *\n * @param {string} meta\n * @return { (index:number) => boolean }\n */\nconst calculateLinesToHighlight = (meta) => {\n  const RE = /{([\\d,-]+)}/\n  // Remove space between {} e.g. {1, 3}\n  const parsedMeta = meta\n    .split(',')\n    .map((str) => str.trim())\n    .join()\n  if (RE.test(parsedMeta)) {\n    const strlineNumbers = RE.exec(parsedMeta)[1]\n    const lineNumbers = rangeParser(strlineNumbers)\n    return (index) => lineNumbers.includes(index + 1)\n  } else {\n    return () => false\n  }\n}\n\n/**\n * Check if we want to start the line numbering from a given number or 1\n * showLineNumbers=5, will start the numbering from 5\n * @param {string} meta\n * @returns {number}\n */\nconst calculateStartingLine = (meta) => {\n  const RE = /showLineNumbers=(?<lines>\\d+)/i\n  // pick the line number after = using a named capturing group\n  if (RE.test(meta)) {\n    const {\n      groups: { lines },\n    } = RE.exec(meta)\n    return Number(lines)\n  }\n  return 1\n}\n\n/**\n * Split line to div node with className `code-line`\n *\n * @param {string} text\n * @return {Element[]}\n */\nconst splitLine = (text) => {\n  // Xdm Markdown parses every code line with \\n\n  const textArray = text.split(/\\n/)\n\n  // Remove last line \\n which results in empty array\n  if (textArray[textArray.length - 1].trim() === '') {\n    textArray.pop()\n  }\n\n  // Empty array are actually line segments so we convert them back to newlines\n  return textArray.map((line) => {\n    return {\n      type: 'element',\n      tagName: 'span',\n      properties: { className: ['code-line'] },\n      children: [{ type: 'text', value: line }],\n    }\n  })\n}\n\n/**\n * Add a node start and end line position information for each text node\n *\n * @return { (ast:Element['children']) => Element['children'] }\n *\n */\nconst addNodePositionClosure = () => {\n  let startLineNum = 1\n  /**\n   * @param {Element['children']} ast\n   * @return {Element['children']}\n   */\n  const addNodePosition = (ast) => {\n    // @ts-ignore\n    return ast.reduce((result, node) => {\n      if (node.type === 'text') {\n        const value = /** @type {string} */ (node.value)\n        const numLines = (value.match(/\\n/g) || '').length\n        node.position = {\n          // column: 0 is to make the ts compiler happy but we do not use this field\n          start: { line: startLineNum, column: 0 },\n          end: { line: startLineNum + numLines, column: 0 },\n        }\n        startLineNum = startLineNum + numLines\n        result.push(node)\n        return result\n      }\n\n      if (Object.prototype.hasOwnProperty.call(node, 'children')) {\n        const initialLineNum = startLineNum\n        // @ts-ignore\n        node.children = addNodePosition(node.children, startLineNum)\n        result.push(node)\n        node.position = {\n          start: { line: initialLineNum, column: 0 },\n          end: { line: startLineNum, column: 0 },\n        }\n        return result\n      }\n\n      result.push(node)\n      return result\n    }, [])\n  }\n  return addNodePosition\n}\n\n/**\n * Split multiline text nodes into individual nodes with positioning\n *\n * @param {Element['children']} ast\n * @return {Element['children']}\n */\nconst splitTextByLine = (ast) => {\n  //@ts-ignore\n  return ast.reduce((result, node) => {\n    if (node.type === 'text') {\n      if (node.value.indexOf('\\n') === -1) {\n        result.push(node)\n        return result\n      }\n\n      const lines = node.value.split('\\n')\n      for (const [i, line] of lines.entries()) {\n        result.push({\n          type: 'text',\n          value: i === lines.length - 1 ? line : line + '\\n',\n          position: {\n            start: { line: node.position.start.line + i },\n            end: { line: node.position.start.line + i },\n          },\n        })\n      }\n\n      return result\n    }\n\n    if (Object.prototype.hasOwnProperty.call(node, 'children')) {\n      // @ts-ignore\n      node.children = splitTextByLine(node.children)\n      result.push(node)\n      return result\n    }\n\n    result.push(node)\n    return result\n  }, [])\n}\n\n/**\n * Rehype prism plugin generator that highlights code blocks with refractor (prismjs)\n *\n * Pass in your own refractor object with the required languages registered:\n * https://github.com/wooorm/refractor#refractorregistersyntax\n *\n * @param {import('refractor/lib/core').Refractor} refractor\n * @return {import('unified').Plugin<[Options?], Root>}\n */\nconst rehypePrismGenerator = (refractor) => {\n  return (options = {}) => {\n    return (tree) => {\n      visit(tree, 'element', visitor)\n    }\n\n    /**\n     * @param {Element} node\n     * @param {number} index\n     * @param {Element} parent\n     */\n    function visitor(node, index, parent) {\n      if (!parent || parent.tagName !== 'pre' || node.tagName !== 'code') {\n        return\n      }\n\n      let meta = node.data && node.data.meta ? /** @type {string} */ (node.data.meta) : ''\n      // Coerce className to array\n      if (node.properties.className) {\n        if (typeof node.properties.className === 'boolean') {\n          node.properties.className = []\n        } else if (!Array.isArray(node.properties.className)) {\n          node.properties.className = [node.properties.className]\n        }\n      } else {\n        node.properties.className = []\n      }\n      node.properties.className.push('code-highlight')\n      const lang = getLanguage(node)\n\n      /** @type {Element} */\n      let refractorRoot\n      let langError = false\n\n      // Syntax highlight\n      if (lang) {\n        try {\n          // @ts-ignore\n          refractorRoot = refractor.highlight(toString(node), lang)\n          // @ts-ignore className is already an array\n          parent.properties.className = (parent.properties.className || []).concat(\n            'language-' + lang\n          )\n        } catch (err) {\n          if (options.ignoreMissing && /Unknown language/.test(err.message)) {\n            langError = true\n            refractorRoot = node\n          } else {\n            throw err\n          }\n        }\n      } else {\n        refractorRoot = node\n      }\n\n      const nodeWithPosition = addNodePositionClosure()(refractorRoot.children)\n      refractorRoot.children = splitTextByLine(nodeWithPosition)\n\n      if (refractorRoot.children.length > 0) {\n        refractorRoot.position = {\n          start: { line: refractorRoot.children[0].position.start.line, column: 0 },\n          end: {\n            line: refractorRoot.children[refractorRoot.children.length - 1].position.end.line,\n            column: 0,\n          },\n        }\n      }\n      const shouldHighlightLine = calculateLinesToHighlight(meta)\n      const startingLineNumber = calculateStartingLine(meta)\n      const codeLineArray = splitLine(toString(node))\n      const falseShowLineNumbersStr = [\n        'showlinenumbers=false',\n        'showlinenumbers=\"false\"',\n        'showlinenumbers={false}',\n      ]\n      for (const [i, line] of codeLineArray.entries()) {\n        // Code lines\n        if (\n          (meta.toLowerCase().includes('showLineNumbers'.toLowerCase()) ||\n            options.showLineNumbers) &&\n          !falseShowLineNumbersStr.some((str) => meta.toLowerCase().includes(str))\n        ) {\n          line.properties.line = [(i + startingLineNumber).toString()]\n          // @ts-ignore\n          line.properties.className.push('line-number')\n        }\n\n        // Line highlight\n        if (shouldHighlightLine(i)) {\n          // @ts-ignore\n          line.properties.className.push('highlight-line')\n        }\n\n        if (lang === 'diff' && toString(line).substring(0, 1) === '-') {\n          // @ts-ignore\n          line.properties.className.push('deleted')\n        } else if (lang === 'diff' && toString(line).substring(0, 1) === '+') {\n          // @ts-ignore\n          line.properties.className.push('inserted')\n        }\n\n        // Syntax highlight\n        const treeExtract = filter(\n          refractorRoot,\n          (node) => node.position.start.line <= i + 1 && node.position.end.line >= i + 1\n        )\n        line.children = treeExtract.children\n      }\n\n      node.children = codeLineArray\n    }\n  }\n}\n\nexport default rehypePrismGenerator\n","import { refractor as refractorCommon } from 'refractor/lib/common.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * Supported languages: https://github.com/wooorm/refractor#data\n *\n * Consider using rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismCommon = rehypePrismGenerator(refractorCommon)\n\nexport default rehypePrismCommon\n","import { refractor as refractorAll } from 'refractor/lib/all.js'\nimport rehypePrismGenerator from './generator.js'\n\n/**\n * Rehype prism plugin that highlights code blocks with refractor (prismjs)\n * This supports all the languages and should be used on the server side.\n *\n * Consider using rehypePrismCommon or rehypePrismGenerator to generate a plugin\n * that supports your required languages.\n */\nconst rehypePrismAll = rehypePrismGenerator(refractorAll)\n\nexport default rehypePrismAll\n"],"names":["splitTextByLine","ast","reduce","result","node","type","value","indexOf","push","lines","split","entries","i","line","length","position","start","end","Object","prototype","hasOwnProperty","call","children","rehypePrismGenerator","refractor","options","tree","visit","visitor","index","parent","tagName","meta","data","properties","className","Array","isArray","refractorRoot","lang","classListItem","slice","toLowerCase","getLanguage","highlight","toString","concat","err","ignoreMissing","test","message","startLineNum","nodeWithPosition","addNodePosition","numLines","match","column","initialLineNum","textArray","shouldHighlightLine","RE","parsedMeta","map","str","trim","join","strlineNumbers","exec","lineNumbers","rangeParser","includes","calculateLinesToHighlight","startingLineNumber","Number","groups","calculateStartingLine","codeLineArray","pop","falseShowLineNumbersStr","showLineNumbers","some","substring","treeExtract","filter","rehypePrismCommon","refractorCommon","rehypePrismAll","refractorAll"],"mappings":"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"}